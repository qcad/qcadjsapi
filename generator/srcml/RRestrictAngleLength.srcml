<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src"
xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0"
language="C++"
filename="../../qcad/src/snap/RRestrictAngleLength.h">
  <comment type="block" format="doxygen">/** * Copyright (c)
  2011-2018 by Andrew Mustun. All rights reserved. * * This file is
  part of the QCAD project. * * QCAD is free software: you can
  redistribute it and/or modify * it under the terms of the GNU
  General Public License as published by * the Free Software
  Foundation, either version 3 of the License, or * (at your
  option) any later version. * * QCAD is distributed in the hope
  that it will be useful, * but WITHOUT ANY WARRANTY; without even
  the implied warranty of * MERCHANTABILITY or FITNESS FOR A
  PARTICULAR PURPOSE. See the * GNU General Public License for more
  details. * * You should have received a copy of the GNU General
  Public License * along with QCAD. */</comment>
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>RRESTRICTANGLELENGTH_H</name></cpp:ifndef>
  <cpp:define>#
  <cpp:directive>define</cpp:directive>
  <cpp:macro>
    <name>RRESTRICTANGLELENGTH_H</name>
  </cpp:macro></cpp:define>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"snap_global.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RSnapRestriction.h"</cpp:file></cpp:include>
  <class_decl>class 
  <name>RDocumentInterface</name>;</class_decl>
  <comment type="block" format="doxygen">/** * \brief Angle and
  length snap restriction implementation. * * \scriptable *
  \generateScriptShell * * \ingroup snap */</comment>
  <class>class 
  <macro>
    <name>QCADSNAP_EXPORT</name>
  </macro>
  <name>RRestrictAngleLength</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>RSnapRestriction</name>
  </super></super_list>
  <block>{
  <private type="default"></private>
  <public>public: 
  <enum>enum 
  <name>AngleLengthMode</name>
  <block>{ 
  <decl>
    <name>None</name>
  </decl>, 
  <decl>
    <name>Angle</name>
  </decl>, 
  <decl>
    <name>Length</name>
  </decl>, 
  <decl>
    <name>AngleLength</name>
  </decl>}</block>;</enum>
  <constructor>
    <name>RRestrictAngleLength</name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <name>RDocumentInterface</name>
          <modifier>*</modifier>
        </type>
        <name>documentInterface</name>
        <init>= 
        <expr>
          <name>NULL</name>
        </expr></init>
      </decl>
    </parameter>)</parameter_list>
    <member_init_list>: 
    <call>
      <name>RSnapRestriction</name>
      <argument_list>(
      <argument>
        <expr>
          <name>documentInterface</name>
        </expr>
      </argument>)</argument_list>
    </call>, 
    <call>
      <name>mode</name>
      <argument_list>(
      <argument>
        <expr>
          <name>
            <name>RRestrictAngleLength</name>
            <operator>::</operator>
            <name>AngleLength</name>
          </name>
        </expr>
      </argument>)</argument_list>
    </call>, 
    <call>
      <name>baseAngle</name>
      <argument_list>(
      <argument>
        <expr>
          <literal type="number">0.0</literal>
        </expr>
      </argument>)</argument_list>
    </call>, 
    <call>
      <name>angle</name>
      <argument_list>(
      <argument>
        <expr>
          <literal type="number">0.0</literal>
        </expr>
      </argument>)</argument_list>
    </call>, 
    <call>
      <name>baseLength</name>
      <argument_list>(
      <argument>
        <expr>
          <literal type="number">0.0</literal>
        </expr>
      </argument>)</argument_list>
    </call>, 
    <call>
      <name>length</name>
      <argument_list>(
      <argument>
        <expr>
          <literal type="number">0.0</literal>
        </expr>
      </argument>)</argument_list>
    </call></member_init_list>
    <block>{
    <block_content />}</block>
  </constructor>
  <constructor>
    <name>RRestrictAngleLength</name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <name>RDocumentInterface</name>
          <modifier>*</modifier>
        </type>
        <name>documentInterface</name>
      </decl>
    </parameter>, 
    <parameter>
      <decl>
        <type>
          <name>double</name>
        </type>
        <name>baseAngle</name>
      </decl>
    </parameter>, 
    <parameter>
      <decl>
        <type>
          <name>double</name>
        </type>
        <name>angle</name>
      </decl>
    </parameter>, 
    <parameter>
      <decl>
        <type>
          <name>double</name>
        </type>
        <name>baseLength</name>
      </decl>
    </parameter>, 
    <parameter>
      <decl>
        <type>
          <name>double</name>
        </type>
        <name>length</name>
      </decl>
    </parameter>)</parameter_list>
    <member_init_list>: 
    <call>
      <name>RSnapRestriction</name>
      <argument_list>(
      <argument>
        <expr>
          <name>documentInterface</name>
        </expr>
      </argument>)</argument_list>
    </call>, 
    <call>
      <name>mode</name>
      <argument_list>(
      <argument>
        <expr>
          <name>
            <name>RRestrictAngleLength</name>
            <operator>::</operator>
            <name>AngleLength</name>
          </name>
        </expr>
      </argument>)</argument_list>
    </call>, 
    <call>
      <name>baseAngle</name>
      <argument_list>(
      <argument>
        <expr>
          <name>baseAngle</name>
        </expr>
      </argument>)</argument_list>
    </call>, 
    <call>
      <name>angle</name>
      <argument_list>(
      <argument>
        <expr>
          <name>angle</name>
        </expr>
      </argument>)</argument_list>
    </call>, 
    <call>
      <name>baseLength</name>
      <argument_list>(
      <argument>
        <expr>
          <name>baseLength</name>
        </expr>
      </argument>)</argument_list>
    </call>, 
    <call>
      <name>length</name>
      <argument_list>(
      <argument>
        <expr>
          <name>length</name>
        </expr>
      </argument>)</argument_list>
    </call>, 
    <call>
      <name>repeatAngle</name>
      <argument_list>(
      <argument>
        <expr>
          <literal type="boolean">false</literal>
        </expr>
      </argument>)</argument_list>
    </call>, 
    <call>
      <name>repeatLength</name>
      <argument_list>(
      <argument>
        <expr>
          <literal type="boolean">false</literal>
        </expr>
      </argument>)</argument_list>
    </call></member_init_list>
    <block>{
    <block_content />}</block>
  </constructor>
  <destructor>
    <specifier>virtual</specifier>
    <name>~RRestrictAngleLength</name>
    <parameter_list>()</parameter_list>
    <block>{
    <block_content />}</block>
  </destructor>
  <function_decl>
  <type>
    <specifier>virtual</specifier>
    <name>RVector</name>
  </type>
  <name>restrictSnap</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>RVector</name>
        <modifier>&amp;</modifier>
      </type>
      <name>position</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>RVector</name>
        <modifier>&amp;</modifier>
      </type>
      <name>relativeZero</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function>
    <type>
      <specifier>virtual</specifier>
      <name>void</name>
    </type>
    <name>setBaseAngle</name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <name>double</name>
        </type>
        <name>a</name>
      </decl>
    </parameter>)</parameter_list>
    <block>{
    <block_content>
      <expr_stmt>
      <expr>
        <name>baseAngle</name>
        <operator>=</operator>
        <name>a</name>
      </expr>;</expr_stmt>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>virtual</specifier>
      <name>void</name>
    </type>
    <name>setAngle</name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <name>double</name>
        </type>
        <name>a</name>
      </decl>
    </parameter>)</parameter_list>
    <block>{
    <block_content>
      <expr_stmt>
      <expr>
        <name>angle</name>
        <operator>=</operator>
        <name>a</name>
      </expr>;</expr_stmt>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>virtual</specifier>
      <name>void</name>
    </type>
    <name>setBaseLength</name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <name>double</name>
        </type>
        <name>l</name>
      </decl>
    </parameter>)</parameter_list>
    <block>{
    <block_content>
      <expr_stmt>
      <expr>
        <name>baseLength</name>
        <operator>=</operator>
        <name>l</name>
      </expr>;</expr_stmt>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>virtual</specifier>
      <name>void</name>
    </type>
    <name>setLength</name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <name>double</name>
        </type>
        <name>l</name>
      </decl>
    </parameter>)</parameter_list>
    <block>{
    <block_content>
      <expr_stmt>
      <expr>
        <name>length</name>
        <operator>=</operator>
        <name>l</name>
      </expr>;</expr_stmt>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>virtual</specifier>
      <name>void</name>
    </type>
    <name>setRestrictAngle</name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <name>bool</name>
        </type>
        <name>on</name>
      </decl>
    </parameter>)</parameter_list>
    <block>{
    <block_content>
      <if_stmt>
        <if>if 
        <condition>(
        <expr>
          <name>on</name>
        </expr>)</condition>
        <block>{
        <block_content>
          <if_stmt>
            <if>if 
            <condition>(
            <expr>
              <name>mode</name>
              <operator>==</operator>
              <name>None</name>
            </expr>)</condition>
            <block>{
            <block_content>
              <expr_stmt>
              <expr>
                <name>mode</name>
                <operator>=</operator>
                <name>Angle</name>
              </expr>;</expr_stmt>
            </block_content>}</block></if>
          </if_stmt>
          <if_stmt>
            <if>if 
            <condition>(
            <expr>
              <name>mode</name>
              <operator>==</operator>
              <name>Length</name>
            </expr>)</condition>
            <block>{
            <block_content>
              <expr_stmt>
              <expr>
                <name>mode</name>
                <operator>=</operator>
                <name>AngleLength</name>
              </expr>;</expr_stmt>
            </block_content>}</block></if>
          </if_stmt>
        </block_content>}</block></if>
        <else>else 
        <block>{
        <block_content>
          <if_stmt>
            <if>if 
            <condition>(
            <expr>
              <name>mode</name>
              <operator>==</operator>
              <name>Angle</name>
            </expr>)</condition>
            <block>{
            <block_content>
              <expr_stmt>
              <expr>
                <name>mode</name>
                <operator>=</operator>
                <name>None</name>
              </expr>;</expr_stmt>
            </block_content>}</block></if>
          </if_stmt>
          <if_stmt>
            <if>if 
            <condition>(
            <expr>
              <name>mode</name>
              <operator>==</operator>
              <name>AngleLength</name>
            </expr>)</condition>
            <block>{
            <block_content>
              <expr_stmt>
              <expr>
                <name>mode</name>
                <operator>=</operator>
                <name>Length</name>
              </expr>;</expr_stmt>
            </block_content>}</block></if>
          </if_stmt>
        </block_content>}</block></else>
      </if_stmt>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>virtual</specifier>
      <name>void</name>
    </type>
    <name>setRestrictLength</name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <name>bool</name>
        </type>
        <name>on</name>
      </decl>
    </parameter>)</parameter_list>
    <block>{
    <block_content>
      <if_stmt>
        <if>if 
        <condition>(
        <expr>
          <name>on</name>
        </expr>)</condition>
        <block>{
        <block_content>
          <if_stmt>
            <if>if 
            <condition>(
            <expr>
              <name>mode</name>
              <operator>==</operator>
              <name>None</name>
            </expr>)</condition>
            <block>{
            <block_content>
              <expr_stmt>
              <expr>
                <name>mode</name>
                <operator>=</operator>
                <name>Length</name>
              </expr>;</expr_stmt>
            </block_content>}</block></if>
          </if_stmt>
          <if_stmt>
            <if>if 
            <condition>(
            <expr>
              <name>mode</name>
              <operator>==</operator>
              <name>Angle</name>
            </expr>)</condition>
            <block>{
            <block_content>
              <expr_stmt>
              <expr>
                <name>mode</name>
                <operator>=</operator>
                <name>AngleLength</name>
              </expr>;</expr_stmt>
            </block_content>}</block></if>
          </if_stmt>
        </block_content>}</block></if>
        <else>else 
        <block>{
        <block_content>
          <if_stmt>
            <if>if 
            <condition>(
            <expr>
              <name>mode</name>
              <operator>==</operator>
              <name>Length</name>
            </expr>)</condition>
            <block>{
            <block_content>
              <expr_stmt>
              <expr>
                <name>mode</name>
                <operator>=</operator>
                <name>None</name>
              </expr>;</expr_stmt>
            </block_content>}</block></if>
          </if_stmt>
          <if_stmt>
            <if>if 
            <condition>(
            <expr>
              <name>mode</name>
              <operator>==</operator>
              <name>AngleLength</name>
            </expr>)</condition>
            <block>{
            <block_content>
              <expr_stmt>
              <expr>
                <name>mode</name>
                <operator>=</operator>
                <name>Angle</name>
              </expr>;</expr_stmt>
            </block_content>}</block></if>
          </if_stmt>
        </block_content>}</block></else>
      </if_stmt>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>virtual</specifier>
      <name>void</name>
    </type>
    <name>setRepeatAngle</name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <name>bool</name>
        </type>
        <name>on</name>
      </decl>
    </parameter>)</parameter_list>
    <block>{
    <block_content>
      <expr_stmt>
      <expr>
        <name>repeatAngle</name>
        <operator>=</operator>
        <name>on</name>
      </expr>;</expr_stmt>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>virtual</specifier>
      <name>void</name>
    </type>
    <name>setRepeatLength</name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <name>bool</name>
        </type>
        <name>on</name>
      </decl>
    </parameter>)</parameter_list>
    <block>{
    <block_content>
      <expr_stmt>
      <expr>
        <name>repeatLength</name>
        <operator>=</operator>
        <name>on</name>
      </expr>;</expr_stmt>
    </block_content>}</block>
  </function></public>
  <protected>protected: 
  <decl_stmt>
  <decl>
    <type>
      <name>AngleLengthMode</name>
    </type>
    <name>mode</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>double</name>
    </type>
    <name>baseAngle</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>double</name>
    </type>
    <name>angle</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>double</name>
    </type>
    <name>baseLength</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>double</name>
    </type>
    <name>length</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>bool</name>
    </type>
    <name>repeatAngle</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>bool</name>
    </type>
    <name>repeatLength</name>
  </decl>;</decl_stmt></protected>}</block>;</class>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>RRestrictAngleLength*</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>
    RRestrictAngleLength::AngleLengthMode</argument>)</argument_list>
  </macro>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
</unit>

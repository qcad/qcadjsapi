<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src"
xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0"
language="C++" filename="../../qcad/src/core/math/REllipse.h">
  <comment type="block" format="doxygen">/** * Copyright (c)
  2011-2018 by Andrew Mustun. All rights reserved. * * This file is
  part of the QCAD project. * * QCAD is free software: you can
  redistribute it and/or modify * it under the terms of the GNU
  General Public License as published by * the Free Software
  Foundation, either version 3 of the License, or * (at your
  option) any later version. * * QCAD is distributed in the hope
  that it will be useful, * but WITHOUT ANY WARRANTY; without even
  the implied warranty of * MERCHANTABILITY or FITNESS FOR A
  PARTICULAR PURPOSE. See the * GNU General Public License for more
  details. * * You should have received a copy of the GNU General
  Public License * along with QCAD. */</comment>
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>RELLIPSE_H</name></cpp:ifndef>
  <cpp:define>#
  <cpp:directive>define</cpp:directive>
  <cpp:macro>
    <name>RELLIPSE_H</name>
  </cpp:macro></cpp:define>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"../core_global.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RShape.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RSpline.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"REllipseProxy.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RLine.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RVector.h"</cpp:file></cpp:include>
  <class_decl>class 
  <name>RBox</name>;</class_decl>
  <comment type="block" format="doxygen">/** * Low-level
  mathematical representation of an ellipse or ellipse arc. * *
  \ingroup math * \scriptable * \sharedPointerSupport * \copyable *
  \hasStreamOperator */</comment>
  <class>class 
  <macro>
    <name>QCADCORE_EXPORT</name>
  </macro>
  <name>REllipse</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>RShape</name>
  </super></super_list>
  <block>{
  <private type="default"></private>
  <public>public: 
  <constructor_decl>
  <name>REllipse</name>
  <parameter_list>()</parameter_list>;</constructor_decl>
  <constructor_decl>
  <name>REllipse</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>RVector</name>
        <modifier>&amp;</modifier>
      </type>
      <name>center</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>RVector</name>
        <modifier>&amp;</modifier>
      </type>
      <name>majorPoint</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>ratio</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>startParam</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>endParam</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>bool</name>
      </type>
      <name>reversed</name>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <destructor_decl>
  <specifier>virtual</specifier>
  <name>~REllipse</name>
  <parameter_list>()</parameter_list>;</destructor_decl>
  <function_decl>
  <type>
    <specifier>static</specifier>
    <name>REllipse</name>
  </type>
  <name>createInscribed</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>RVector</name>
        <modifier>&amp;</modifier>
      </type>
      <name>p1</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>RVector</name>
        <modifier>&amp;</modifier>
      </type>
      <name>p2</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>RVector</name>
        <modifier>&amp;</modifier>
      </type>
      <name>p3</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>RVector</name>
        <modifier>&amp;</modifier>
      </type>
      <name>p4</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>RVector</name>
        <modifier>&amp;</modifier>
      </type>
      <name>centerHint</name>
      <init>= 
      <expr>
        <name>
          <name>RVector</name>
          <operator>::</operator>
          <name>invalid</name>
        </name>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <specifier>static</specifier>
    <name>REllipse</name>
  </type>
  <name>createFrom4Points</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>RVector</name>
        <modifier>&amp;</modifier>
      </type>
      <name>p1</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>RVector</name>
        <modifier>&amp;</modifier>
      </type>
      <name>p2</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>RVector</name>
        <modifier>&amp;</modifier>
      </type>
      <name>p3</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>RVector</name>
        <modifier>&amp;</modifier>
      </type>
      <name>p4</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function>
    <type>
      <specifier>virtual</specifier>
      <name>
        <name>RShape</name>
        <operator>::</operator>
        <name>Type</name>
      </name>
    </type>
    <name>getShapeType</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>Ellipse</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>virtual</specifier>
      <name>REllipse</name>
      <modifier>*</modifier>
    </type>
    <name>clone</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <operator>new</operator>
        <call>
          <name>REllipse</name>
          <argument_list>(
          <argument>
            <expr>
              <operator>*</operator>
              <name>this</name>
            </expr>
          </argument>)</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>virtual</specifier>
      <name>bool</name>
    </type>
    <name>isDirected</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <literal type="boolean">true</literal>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function_decl>
  <type>
    <specifier>virtual</specifier>
    <name>bool</name>
  </type>
  <name>isValid</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <specifier>virtual</specifier>
    <name>void</name>
  </type>
  <name>setZ</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>z</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <specifier>virtual</specifier>
    <name>
      <name>QList</name>
      <argument_list type="generic">&lt;
      <argument>
        <expr>
          <name>RVector</name>
        </expr>
      </argument>&gt;</argument_list>
    </name>
  </type>
  <name>getVectorProperties</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <specifier>virtual</specifier>
    <name>
      <name>QList</name>
      <argument_list type="generic">&lt;
      <argument>
        <expr>
          <name>double</name>
        </expr>
      </argument>&gt;</argument_list>
    </name>
  </type>
  <name>getDoubleProperties</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <specifier>virtual</specifier>
    <name>
      <name>QList</name>
      <argument_list type="generic">&lt;
      <argument>
        <expr>
          <name>bool</name>
        </expr>
      </argument>&gt;</argument_list>
    </name>
  </type>
  <name>getBoolProperties</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <specifier>virtual</specifier>
    <name>RBox</name>
  </type>
  <name>getBoundingBox</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <specifier>virtual</specifier>
    <name>
      <name>QList</name>
      <argument_list type="generic">&lt;
      <argument>
        <expr>
          <name>RVector</name>
        </expr>
      </argument>&gt;</argument_list>
    </name>
  </type>
  <name>getEndPoints</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <specifier>virtual</specifier>
    <name>
      <name>QList</name>
      <argument_list type="generic">&lt;
      <argument>
        <expr>
          <name>RVector</name>
        </expr>
      </argument>&gt;</argument_list>
    </name>
  </type>
  <name>getMiddlePoints</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <specifier>virtual</specifier>
    <name>
      <name>QList</name>
      <argument_list type="generic">&lt;
      <argument>
        <expr>
          <name>RVector</name>
        </expr>
      </argument>&gt;</argument_list>
    </name>
  </type>
  <name>getCenterPoints</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <specifier>virtual</specifier>
    <name>
      <name>QList</name>
      <argument_list type="generic">&lt;
      <argument>
        <expr>
          <name>RVector</name>
        </expr>
      </argument>&gt;</argument_list>
    </name>
  </type>
  <name>getPointsWithDistanceToEnd</name>
  <parameter_list>( 
  <parameter>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>distance</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>from</name>
      <init>= 
      <expr>
        <name>
          <name>RS</name>
          <operator>::</operator>
          <name>FromAny</name>
        </name>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <specifier>virtual</specifier>
    <name>
      <name>QList</name>
      <argument_list type="generic">&lt;
      <argument>
        <expr>
          <name>RVector</name>
        </expr>
      </argument>&gt;</argument_list>
    </name>
  </type>
  <name>getPointCloud</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>segmentLength</name>
    </decl>
  </parameter>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <specifier>virtual</specifier>
    <name>RVector</name>
  </type>
  <name>getVectorTo</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>RVector</name>
        <modifier>&amp;</modifier>
      </type>
      <name>point</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>bool</name>
      </type>
      <name>limited</name>
      <init>= 
      <expr>
        <literal type="boolean">true</literal>
      </expr></init>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>strictRange</name>
      <init>= 
      <expr>
        <name>RMAXDOUBLE</name>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>moveStartPoint</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>RVector</name>
        <modifier>&amp;</modifier>
      </type>
      <name>pos</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>bool</name>
      </type>
      <name>changeAngleOnly</name>
      <init>=
      <expr>
        <literal type="boolean">false</literal>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>moveEndPoint</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>RVector</name>
        <modifier>&amp;</modifier>
      </type>
      <name>pos</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>bool</name>
      </type>
      <name>changeAngleOnly</name>
      <init>=
      <expr>
        <literal type="boolean">false</literal>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>
      <name>QList</name>
      <argument_list type="generic">&lt;
      <argument>
        <expr>
          <name>RVector</name>
        </expr>
      </argument>&gt;</argument_list>
    </name>
  </type>
  <name>getFoci</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>RVector</name>
  </type>
  <name>getCenter</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setCenter</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>RVector</name>
        <modifier>&amp;</modifier>
      </type>
      <name>vector</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>RVector</name>
  </type>
  <name>getMajorPoint</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>RVector</name>
  </type>
  <name>getMinorPoint</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setMajorPoint</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>RVector</name>
        <modifier>&amp;</modifier>
      </type>
      <name>vector</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setMinorPoint</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>RVector</name>
        <modifier>&amp;</modifier>
      </type>
      <name>p</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>switchMajorMinor</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>double</name>
  </type>
  <name>getRatio</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setRatio</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>radius</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>double</name>
  </type>
  <name>getStartParam</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setStartParam</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>startParam</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>double</name>
  </type>
  <name>getEndParam</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setEndParam</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>endParam</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>double</name>
  </type>
  <name>getStartAngle</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setStartAngle</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>a</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>double</name>
  </type>
  <name>angleToParam</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>a</name>
    </decl>
  </parameter>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>double</name>
  </type>
  <name>getEndAngle</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setEndAngle</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>a</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>double</name>
  </type>
  <name>getAngleLength</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>bool</name>
      </type>
      <name>allowForZeroLength</name>
      <init>= 
      <expr>
        <literal type="boolean">false</literal>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function>
    <type>
      <name>bool</name>
    </type>
    <name>isAngleWithinArc</name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <name>double</name>
        </type>
        <name>a</name>
      </decl>
    </parameter>)</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <if_stmt>
        <if>if 
        <condition>(
        <expr>
          <call>
            <name>isFullEllipse</name>
            <argument_list>()</argument_list>
          </call>
        </expr>)</condition>
        <block>{
        <block_content>
          <return>return 
          <expr>
            <literal type="boolean">true</literal>
          </expr>;</return>
        </block_content>}</block></if>
      </if_stmt>
      <return>return 
      <expr>
        <call>
          <name>
            <name>RMath</name>
            <operator>::</operator>
            <name>isAngleBetween</name>
          </name>
          <argument_list>(
          <argument>
            <expr>
              <name>a</name>
            </expr>
          </argument>, 
          <argument>
            <expr>
              <call>
                <name>getStartAngle</name>
                <argument_list>()</argument_list>
              </call>
            </expr>
          </argument>, 
          <argument>
            <expr>
              <call>
                <name>getEndAngle</name>
                <argument_list>()</argument_list>
              </call>
            </expr>
          </argument>, 
          <argument>
            <expr>
              <name>reversed</name>
            </expr>
          </argument>)</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <name>bool</name>
    </type>
    <name>isParamWithinArc</name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <name>double</name>
        </type>
        <name>a</name>
      </decl>
    </parameter>)</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <if_stmt>
        <if>if 
        <condition>(
        <expr>
          <call>
            <name>isFullEllipse</name>
            <argument_list>()</argument_list>
          </call>
        </expr>)</condition>
        <block>{
        <block_content>
          <return>return 
          <expr>
            <literal type="boolean">true</literal>
          </expr>;</return>
        </block_content>}</block></if>
      </if_stmt>
      <return>return 
      <expr>
        <call>
          <name>
            <name>RMath</name>
            <operator>::</operator>
            <name>isAngleBetween</name>
          </name>
          <argument_list>(
          <argument>
            <expr>
              <name>a</name>
            </expr>
          </argument>, 
          <argument>
            <expr>
              <call>
                <name>getStartParam</name>
                <argument_list>()</argument_list>
              </call>
            </expr>
          </argument>, 
          <argument>
            <expr>
              <call>
                <name>getEndParam</name>
                <argument_list>()</argument_list>
              </call>
            </expr>
          </argument>, 
          <argument>
            <expr>
              <name>reversed</name>
            </expr>
          </argument>)</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>isReversed</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setReversed</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>bool</name>
      </type>
      <name>reversed</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <specifier>virtual</specifier>
    <name>double</name>
  </type>
  <name>getDirection1</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <specifier>virtual</specifier>
    <name>double</name>
  </type>
  <name>getDirection2</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <specifier>virtual</specifier>
    <name>
      <name>RS</name>
      <operator>::</operator>
      <name>Side</name>
    </name>
  </type>
  <name>getSideOfPoint</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>RVector</name>
        <modifier>&amp;</modifier>
      </type>
      <name>point</name>
    </decl>
  </parameter>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <specifier>virtual</specifier>
    <name>RVector</name>
  </type>
  <name>getStartPoint</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <specifier>virtual</specifier>
    <name>RVector</name>
  </type>
  <name>getEndPoint</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>double</name>
  </type>
  <name>getMajorRadius</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>double</name>
  </type>
  <name>getMinorRadius</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>double</name>
  </type>
  <name>getAngle</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setAngle</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>a</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>isFullEllipse</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>isCircular</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>double</name>
  </type>
  <name>getLength</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>double</name>
  </type>
  <name>getSimpsonLength</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>f1</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>f2</name>
    </decl>
  </parameter>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>contains</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>RVector</name>
        <modifier>&amp;</modifier>
      </type>
      <name>p</name>
    </decl>
  </parameter>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <specifier>virtual</specifier>
    <name>double</name>
  </type>
  <name>getAngleAt</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>distance</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>RS</name>
          <operator>::</operator>
          <name>From</name>
        </name>
      </type>
      <name>from</name>
      <init>= 
      <expr>
        <name>
          <name>RS</name>
          <operator>::</operator>
          <name>FromStart</name>
        </name>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>double</name>
  </type>
  <name>getAngleAtPoint</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>RVector</name>
        <modifier>&amp;</modifier>
      </type>
      <name>pos</name>
    </decl>
  </parameter>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>double</name>
  </type>
  <name>getParamTo</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>RVector</name>
        <modifier>&amp;</modifier>
      </type>
      <name>pos</name>
    </decl>
  </parameter>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>double</name>
  </type>
  <name>getRadiusAt</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>param</name>
    </decl>
  </parameter>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>RVector</name>
  </type>
  <name>getPointAt</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>param</name>
    </decl>
  </parameter>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>RVector</name>
  </type>
  <name>getMiddlePoint</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <specifier>virtual</specifier>
    <name>RVector</name>
  </type>
  <name>getPointOnShape</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <specifier>virtual</specifier>
    <name>bool</name>
  </type>
  <name>move</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>RVector</name>
        <modifier>&amp;</modifier>
      </type>
      <name>offset</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <specifier>virtual</specifier>
    <name>bool</name>
  </type>
  <name>rotate</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>rotation</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>RVector</name>
        <modifier>&amp;</modifier>
      </type>
      <name>center</name>
      <init>= 
      <expr>
        <name>RDEFAULT_RVECTOR</name>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <specifier>virtual</specifier>
    <name>bool</name>
  </type>
  <name>scale</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>RVector</name>
        <modifier>&amp;</modifier>
      </type>
      <name>scaleFactors</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>RVector</name>
        <modifier>&amp;</modifier>
      </type>
      <name>center</name>
      <init>= 
      <expr>
        <name>RDEFAULT_RVECTOR</name>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <specifier>virtual</specifier>
    <name>bool</name>
  </type>
  <name>mirror</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>RLine</name>
        <modifier>&amp;</modifier>
      </type>
      <name>axis</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <specifier>virtual</specifier>
    <name>bool</name>
  </type>
  <name>reverse</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <specifier>virtual</specifier>
    <name>
      <name>QSharedPointer</name>
      <argument_list type="generic">&lt;
      <argument>
        <expr>
          <name>RShape</name>
        </expr>
      </argument>&gt;</argument_list>
    </name>
  </type>
  <name>getTransformed</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QTransform</name>
        <modifier>&amp;</modifier>
      </type>
      <name>transform</name>
    </decl>
  </parameter>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <specifier>virtual</specifier>
    <name>
      <name>RS</name>
      <operator>::</operator>
      <name>Ending</name>
    </name>
  </type>
  <name>getTrimEnd</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>RVector</name>
        <modifier>&amp;</modifier>
      </type>
      <name>trimPoint</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>RVector</name>
        <modifier>&amp;</modifier>
      </type>
      <name>clickPoint</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <specifier>virtual</specifier>
    <name>bool</name>
  </type>
  <name>trimStartPoint</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>RVector</name>
        <modifier>&amp;</modifier>
      </type>
      <name>trimPoint</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>RVector</name>
        <modifier>&amp;</modifier>
      </type>
      <name>clickPoint</name>
      <init>= 
      <expr>
        <name>
          <name>RVector</name>
          <operator>::</operator>
          <name>invalid</name>
        </name>
      </expr></init>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>bool</name>
      </type>
      <name>extend</name>
      <init>= 
      <expr>
        <literal type="boolean">false</literal>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <specifier>virtual</specifier>
    <name>bool</name>
  </type>
  <name>trimEndPoint</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>RVector</name>
        <modifier>&amp;</modifier>
      </type>
      <name>trimPoint</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>RVector</name>
        <modifier>&amp;</modifier>
      </type>
      <name>clickPoint</name>
      <init>= 
      <expr>
        <name>
          <name>RVector</name>
          <operator>::</operator>
          <name>invalid</name>
        </name>
      </expr></init>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>bool</name>
      </type>
      <name>extend</name>
      <init>= 
      <expr>
        <literal type="boolean">false</literal>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function>
    <type>
      <specifier>virtual</specifier>
      <name>bool</name>
    </type>
    <name>trimStartPoint</name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <name>double</name>
        </type>
        <name>trimDist</name>
      </decl>
    </parameter>)</parameter_list>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>
            <name>RShape</name>
            <operator>::</operator>
            <name>trimStartPoint</name>
          </name>
          <argument_list>(
          <argument>
            <expr>
              <name>trimDist</name>
            </expr>
          </argument>)</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>virtual</specifier>
      <name>bool</name>
    </type>
    <name>trimEndPoint</name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <name>double</name>
        </type>
        <name>trimDist</name>
      </decl>
    </parameter>)</parameter_list>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>
            <name>RShape</name>
            <operator>::</operator>
            <name>trimEndPoint</name>
          </name>
          <argument_list>(
          <argument>
            <expr>
              <name>trimDist</name>
            </expr>
          </argument>)</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>correctMajorMinor</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>double</name>
  </type>
  <name>getSweep</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>
      <name>QList</name>
      <argument_list type="generic">&lt;
      <argument>
        <expr>
          <name>RVector</name>
        </expr>
      </argument>&gt;</argument_list>
    </name>
  </type>
  <name>getBoxCorners</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>
      <name>QList</name>
      <argument_list type="generic">&lt;
      <argument>
        <expr>
          <name>RLine</name>
        </expr>
      </argument>&gt;</argument_list>
    </name>
  </type>
  <name>getTangents</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>RVector</name>
        <modifier>&amp;</modifier>
      </type>
      <name>point</name>
    </decl>
  </parameter>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>
      <name>QList</name>
      <argument_list type="generic">&lt;
      <argument>
        <expr>
          <name>RSpline</name>
        </expr>
      </argument>&gt;</argument_list>
    </name>
  </type>
  <name>approximateWithSplines</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>RPolyline</name>
  </type>
  <name>approximateWithArcs</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>segments</name>
    </decl>
  </parameter>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <specifier>virtual</specifier>
    <name>
      <name>QList</name>
      <argument_list type="generic">&lt;
      <argument>
        <expr>
          <name>
            <name>QSharedPointer</name>
            <argument_list type="generic">&lt;
            <argument>
              <expr>
                <name>RShape</name>
              </expr>
            </argument>&gt;</argument_list>
          </name>
        </expr>
      </argument>&gt;</argument_list>
    </name>
  </type>
  <name>getOffsetShapes</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>distance</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>number</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>RS</name>
          <operator>::</operator>
          <name>Side</name>
        </name>
      </type>
      <name>side</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>RVector</name>
        <modifier>&amp;</modifier>
      </type>
      <name>position</name>
      <init>= 
      <expr>
        <name>
          <name>RVector</name>
          <operator>::</operator>
          <name>invalid</name>
        </name>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <specifier>virtual</specifier>
    <name>
      <name>QList</name>
      <argument_list type="generic">&lt;
      <argument>
        <expr>
          <name>
            <name>QSharedPointer</name>
            <argument_list type="generic">&lt;
            <argument>
              <expr>
                <name>RShape</name>
              </expr>
            </argument>&gt;</argument_list>
          </name>
        </expr>
      </argument>&gt;</argument_list>
    </name>
  </type>
  <name>splitAt</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>
          <name>QList</name>
          <argument_list type="generic">&lt;
          <argument>
            <expr>
              <name>RVector</name>
            </expr>
          </argument>&gt;</argument_list>
        </name>
        <modifier>&amp;</modifier>
      </type>
      <name>points</name>
    </decl>
  </parameter>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function>
    <type>
      <specifier>static</specifier>
      <name>bool</name>
    </type>
    <name>hasProxy</name>
    <parameter_list>()</parameter_list>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>ellipseProxy</name>
        <operator>!=</operator>
        <name>NULL</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <comment type="block" format="doxygen">/** * \nonscriptable
  */</comment>
  <function>
    <type>
      <specifier>static</specifier>
      <name>void</name>
    </type>
    <name>setEllipseProxy</name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <name>REllipseProxy</name>
          <modifier>*</modifier>
        </type>
        <name>p</name>
      </decl>
    </parameter>)</parameter_list>
    <block>{
    <block_content>
      <if_stmt>
        <if>if 
        <condition>(
        <expr>
          <name>ellipseProxy</name>
          <operator>!=</operator>
          <name>NULL</name>
        </expr>)</condition>
        <block>{
        <block_content>
          <expr_stmt>
          <expr>
            <operator>delete</operator>
            <name>ellipseProxy</name>
          </expr>;</expr_stmt>
        </block_content>}</block></if>
      </if_stmt>
      <expr_stmt>
      <expr>
        <name>ellipseProxy</name>
        <operator>=</operator>
        <name>p</name>
      </expr>;</expr_stmt>
    </block_content>}</block>
  </function>
  <comment type="block" format="doxygen">/** * \nonscriptable
  */</comment>
  <function>
    <type>
      <specifier>static</specifier>
      <name>REllipseProxy</name>
      <modifier>*</modifier>
    </type>
    <name>getEllipseProxy</name>
    <parameter_list>()</parameter_list>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>ellipseProxy</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <cpp:if>#
  <cpp:directive>if</cpp:directive>
  <expr>
    <name>QT_VERSION</name>
    <operator>&gt;=</operator>
    <literal type="number">0x060000</literal>
  </expr></cpp:if>
  <comment type="block" format="doxygen">/** * copy function for Qt
  6 scripts: * \nonscriptable */</comment>
  <function>
    <type>
      <name>REllipse</name>
    </type>
    <name>copy</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <operator>*</operator>
        <name>this</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif></public>
  <protected>protected: 
  <function_decl>
  <type>
    <specifier>virtual</specifier>
    <name>void</name>
  </type>
  <name>print</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>QDebug</name>
      </type>
      <name>dbg</name>
    </decl>
  </parameter>)</parameter_list>
  <specifier>const</specifier>;</function_decl></protected>
  <public>public: 
  <comment type="block" format="doxygen">/** * \getter{getCenter} *
  \setter{setCenter} */</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>RVector</name>
    </type>
    <name>center</name>
  </decl>;</decl_stmt>
  <comment type="block" format="doxygen">/** *
  \getter{getMajorPoint} * \setter{setMajorPoint} */</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>RVector</name>
    </type>
    <name>majorPoint</name>
  </decl>;</decl_stmt>
  <comment type="block" format="doxygen">/** * \getter{getRatio} *
  \setter{setRatio} */</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>double</name>
    </type>
    <name>ratio</name>
  </decl>;</decl_stmt>
  <comment type="block" format="doxygen">/** *
  \getter{getStartParam} * \setter{setStartParam} */</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>double</name>
    </type>
    <name>startParam</name>
  </decl>;</decl_stmt>
  <comment type="block" format="doxygen">/** * \getter{getEndParam}
  * \setter{setEndParam} */</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>double</name>
    </type>
    <name>endParam</name>
  </decl>;</decl_stmt>
  <comment type="block" format="doxygen">/** * \getter{isReversed}
  * \setter{setReversed} */</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>bool</name>
    </type>
    <name>reversed</name>
  </decl>;</decl_stmt></public>
  <private>private: 
  <decl_stmt>
  <decl>
    <type>
      <specifier>static</specifier>
      <name>REllipseProxy</name>
      <modifier>*</modifier>
    </type>
    <name>ellipseProxy</name>
  </decl>;</decl_stmt></private>}</block>;</class>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>const REllipse*</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>REllipse*</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>REllipse</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>
    QSharedPointer&lt;REllipse&gt;</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>
    QSharedPointer&lt;REllipse&gt;*</argument>)</argument_list>
  </macro>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
</unit>

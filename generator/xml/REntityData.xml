<?xml version="1.0"?>
<unit xmlns="http://qcad.org/namespaces/src" xmlns:qc="http://qcad.org/namespaces/xsl" filename="REntityData.h">
  <class_decl name="RBlockReferenceEntity" />
  <class_decl name="RDocument" />
  <class_decl name="REntity" />
  <class_decl name="RExporter" />
  <class name="REntityData" ownership="cpp" proxy="true">
    <class_decl name="REntity" />
    <!--
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" default="NULL" />
        </parameters>
      </variant>
    </constructor>
    -->
    <function name="getDocument">
      <variant return-type="RDocument*" access="public">
        <parameters />
      </variant>
      <!--
      <variant return-type="const RDocument*" const="true" access="public">
        <parameters />
      </variant>
      -->
    </function>
    <function name="setDocument">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
        </parameters>
      </variant>
    </function>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isPointType">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isSane">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getShapes">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="false" />
          <parameter const="false" type="bool" modifier="" name="segment" default="false" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="entityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getClosestSubEntityId">
      <variant return-type="RObject::Id" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="pos" />
          <parameter const="false" type="double" modifier="" name="range" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" />
        </parameters>
      </variant>
    </function>
    <function name="getClosestShape">
      <variant return-type="QSharedPointer&lt;RShape&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="pos" />
          <parameter const="false" type="double" modifier="" name="range" default="RNANDOUBLE" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="false" />
          <!--
          <parameter const="false" type="RObject::Id" modifier="*" name="subEntityId" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <!--
    <function name="castToShape">
      <variant return-type="RShape*" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="castToConstShape">
      <variant return-type="const RShape*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    -->
    <function name="getBoundingBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="ignoreEmpty" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="copyAttributesFrom">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="REntityData" modifier="&amp;" name="entityData" />
          <parameter const="false" type="bool" modifier="" name="copyBlockId" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="to2D">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setZ">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="z" />
        </parameters>
      </variant>
    </function>
    <function name="getBoundingBoxes">
      <variant return-type="QList&lt;RBox&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="ignoreEmpty" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getHull">
      <variant return-type="RPolyline" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="isUpdatesEnabled">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setUpdatesEnabled">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="cloneOnChange">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isSelected">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setSelected">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isSelectedWorkingSet">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setSelectedWorkingSet">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getDrawOrder">
      <variant return-type="int" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDrawOrder">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="drawOrder" />
        </parameters>
      </variant>
    </function>
    <function name="setLayerId">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
        </parameters>
      </variant>
    </function>
    <function name="getLayerId">
      <variant return-type="RLayer::Id" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLayerName">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layerName" />
        </parameters>
      </variant>
    </function>
    <function name="getLayerName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setBlockId">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
    </function>
    <function name="getBlockId">
      <variant return-type="RBlock::Id" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setParentId">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RObject::Id" modifier="" name="parentId" />
        </parameters>
      </variant>
    </function>
    <function name="getParentId">
      <variant return-type="RObject::Id" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBlockName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLinetypeId">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RLinetype::Id" modifier="" name="linetypeId" />
        </parameters>
      </variant>
    </function>
    <function name="getLinetypeId">
      <variant return-type="RLinetype::Id" virtual="true" const="true" access="public">
        <parameters />
      </variant>
      <!--
      <variant return-type="RLinetype::Id" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="resolve" />
          <parameter const="true" type="QStack&lt;REntity*&gt;" modifier="&amp;" name="blockRefStack" />
        </parameters>
      </variant>
      -->
    </function>
    <function name="setLinetypePattern">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLinetypePattern" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getLinetypePattern">
      <variant return-type="RLinetypePattern" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLinetypeScale">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="linetypeScale" />
        </parameters>
      </variant>
    </function>
    <function name="getLinetypeScale">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLineweight">
      <variant return-type="RLineweight::Lineweight" virtual="true" const="true" access="public">
        <parameters />
      </variant>
      <!--
      <variant return-type="RLineweight::Lineweight" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="resolve" />
          <parameter const="true" type="QStack&lt;REntity*&gt;" modifier="&amp;" name="blockRefStack" />
        </parameters>
      </variant>
      -->
    </function>
    <!--
    <function name="getLineweightInUnits">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="true" type="QStack&lt;REntity*&gt;" modifier="&amp;" name="blockRefStack" />
        </parameters>
      </variant>
    </function>
    -->
    <function name="setLineweight">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RLineweight::Lineweight" modifier="" name="lineweight" />
        </parameters>
      </variant>
    </function>
    <function name="setColor">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RColor" modifier="&amp;" name="color" />
        </parameters>
      </variant>
    </function>
    <function name="getColor">
      <variant return-type="RColor" virtual="true" const="true" access="public">
        <parameters />
      </variant>
      <!--
      <variant return-type="RColor" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RColor" modifier="&amp;" name="unresolvedColor" />
          <parameter const="true" type="QStack&lt;REntity*&gt;" modifier="&amp;" name="blockRefStack" />
        </parameters>
      </variant>
      -->
      <!--
      <variant return-type="RColor" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="resolve" />
          <parameter const="true" type="QStack&lt;REntity*&gt;" modifier="&amp;" name="blockRefStack" />
        </parameters>
      </variant>
      -->
    </function>
    <function name="getDisplayColor">
      <variant return-type="RColor" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getInternalReferencePoints">
      <variant return-type="QList&lt;RRefPoint&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="hint"
          default="RS::RenderTop" />
        </parameters>
      </variant>
    </function>
    <function name="getReferencePoints">
      <variant return-type="QList&lt;RRefPoint&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="hint"
          default="RS::RenderTop" />
        </parameters>
      </variant>
    </function>
    <function name="getPointOnEntity">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getMiddlePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getCenterPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getArcReferencePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
        </parameters>
      </variant>
    </function>
    <function name="getPointsWithDistanceToEnd">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="int" modifier="" name="from" default="RS::FromAny" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getClosestPointOnEntity">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="double" modifier="" name="range" default="RNANDOUBLE" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <!--
          <parameter const="false" type="RObject::Id" modifier="*" name="subEntityId" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getIntersectionPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="REntityData" modifier="&amp;" name="other" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="bool" modifier="" name="same" default="false" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="true" />
          <!--
          <parameter const="false" type="QList&lt;QPair&lt;RObject::Id,RObject::Id&gt;&gt;" modifier="*" name="entityIds" default="NULL" />
          -->
        </parameters>
      </variant>
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getVectorTo">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="getDistanceTo">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="range" default="0.0" />
          <parameter const="false" type="bool" modifier="" name="draft" default="false" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="isInside">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="box" />
        </parameters>
      </variant>
    </function>
    <function name="isOnEntity">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="tolerance" default="RDEFAULT_TOLERANCE_1E_MIN4" />
        </parameters>
      </variant>
    </function>
    <function name="intersectsWith">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
        </parameters>
      </variant>
    </function>
    <function name="clickReferencePoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
        </parameters>
      </variant>
    </function>
    <function name="moveReferencePoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="targetPoint" />
          <parameter const="false" type="Qt::KeyboardModifiers" modifier="" name="modifiers"
          default="Qt::NoModifier" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
      <!--
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="scaleFactor" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
      -->
    </function>
    <function name="scaleVisualProperties">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="scaleFactor" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="axis1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="axis2" />
        </parameters>
      </variant>
    </function>
    <function name="flipHorizontal">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="flipVertical">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="stretch">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="area" />
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="update">
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setAutoUpdatesBlocked">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getDefaultDrawOrder" static="true">
      <variant return-type="int" access="public">
        <parameters />
      </variant>
    </function>
  </class>
</unit>

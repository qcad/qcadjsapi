<?xml version="1.0"?>
<unit xmlns="http://qcad.org/namespaces/src" xmlns:qc="http://qcad.org/namespaces/xsl" filename="RTextBasedData.h">
  <class_decl name="QTextDocument" />
  <class name="RTextBasedData">
    <super_list>
      <super name="REntityData" />
      <super name="RPainterPathSource" />
    </super_list>
    <enum name="TextFlag">
      <key>NoFlags</key>
      <key>Bold</key>
      <key>Italic</key>
      <key>Simple</key>
      <key>DimensionLabel</key>
      <key>Highlighted</key>
      <key>Backward</key>
      <key>UpsideDown</key>
    </enum>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" default="NULL" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="position" />
          <parameter const="true" type="RVector" modifier="&amp;" name="alignmentPoint" />
          <parameter const="false" type="double" modifier="" name="textHeight" />
          <parameter const="false" type="double" modifier="" name="textWidth" />
          <parameter const="false" type="RS::VAlign" modifier="" name="verticalAlignment" />
          <parameter const="false" type="RS::HAlign" modifier="" name="horizontalAlignment" />
          <parameter const="false" type="RS::TextDrawingDirection" modifier="" name="drawingDirection" />
          <parameter const="false" type="RS::TextLineSpacingStyle" modifier="" name="lineSpacingStyle" />
          <parameter const="false" type="double" modifier="" name="lineSpacingFactor" />
          <parameter const="true" type="QString" modifier="&amp;" name="text" />
          <parameter const="true" type="QString" modifier="&amp;" name="fontName" />
          <parameter const="false" type="bool" modifier="" name="bold" />
          <parameter const="false" type="bool" modifier="" name="italic" />
          <parameter const="false" type="double" modifier="" name="angle" />
          <parameter const="false" type="bool" modifier="" name="simple" />
        </parameters>
      </variant>
    </constructor>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setFlag">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RTextBasedData::TextFlag" modifier="" name="flag" />
          <parameter const="false" type="bool" modifier="" name="on" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getFlag">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="RTextBasedData::TextFlag" modifier="" name="flag" />
        </parameters>
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isSane">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="ignoreEmpty" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getRotatedBoundingBox">
      <variant return-type="QList&lt;RVector&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getWidth">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getHeight">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="sync">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RTextBasedData" modifier="&amp;" name="other" />
        </parameters>
      </variant>
    </function>
    <function name="getPointOnEntity">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
        </parameters>
      </variant>
    </function>
    <function name="getMiddlePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
        </parameters>
      </variant>
    </function>
    <function name="getCenterPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
        </parameters>
      </variant>
    </function>
    <function name="getPointsWithDistanceToEnd">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="int" modifier="" name="from" default="RS::FromAny" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
        </parameters>
      </variant>
    </function>
    <function name="getDistanceTo">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="range" default="0.0" />
          <parameter const="false" type="bool" modifier="" name="draft" default="false" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="intersectsWith">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
        </parameters>
      </variant>
    </function>
    <function name="getPosition">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPosition">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="position" />
        </parameters>
      </variant>
    </function>
    <function name="getAlignmentPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setAlignmentPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="alignmentPoint" />
        </parameters>
      </variant>
    </function>
    <function name="setText">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="text" />
        </parameters>
      </variant>
    </function>
    <function name="getFontName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setFontName">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fontName" />
        </parameters>
      </variant>
    </function>
    <function name="getFontFile">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setFontFile">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fontFile" />
        </parameters>
      </variant>
    </function>
    <function name="isBold">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setBold">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isItalic">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setItalic">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getTextHeight">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setTextHeight">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="h" />
        </parameters>
      </variant>
    </function>
    <function name="getTextWidth">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setTextWidth">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="w" />
        </parameters>
      </variant>
    </function>
    <function name="setVAlign">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::VAlign" modifier="" name="valign" />
        </parameters>
      </variant>
    </function>
    <function name="getVAlign">
      <variant return-type="RS::VAlign" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setHAlign">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::HAlign" modifier="" name="halign" />
        </parameters>
      </variant>
    </function>
    <function name="getHAlign">
      <variant return-type="RS::HAlign" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDrawingDirection">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::TextDrawingDirection" modifier="" name="drawingDirection" />
        </parameters>
      </variant>
    </function>
    <function name="getDrawingDirection">
      <variant return-type="RS::TextDrawingDirection" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLineSpacingStyle">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::TextLineSpacingStyle" modifier="" name="lineSpacingStyle" />
        </parameters>
      </variant>
    </function>
    <function name="getLineSpacingStyle">
      <variant return-type="RS::TextLineSpacingStyle" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLineSpacingFactor">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="lineSpacingFactor" />
        </parameters>
      </variant>
    </function>
    <function name="getLineSpacingFactor">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setAngle">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="angle" />
        </parameters>
      </variant>
    </function>
    <function name="getAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setXScale">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="xScale" />
        </parameters>
      </variant>
    </function>
    <function name="getXScale">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setSimple">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isSimple">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setBackward">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isBackward">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setUpsideDown">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isUpsideDown">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimensionLabel">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isDimensionLabel">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setSelected">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="setHighlighted">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isHighlighted">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getReferencePoints">
      <variant return-type="QList&lt;RRefPoint&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="hint" default="RS::RenderTop" />
        </parameters>
      </variant>
    </function>
    <function name="moveReferencePoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="targetPoint" />
          <parameter const="false" type="Qt::KeyboardModifiers" modifier="" name="modifiers" default="Qt::NoModifier" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="flipHorizontal">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="flipVertical">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getText">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRenderedText">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="escapeUnicode" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getPlainText">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEscapedText">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="escapeUnicode" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="escapeUnicode" static="true">
      <variant return-type="QString" static="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="str" />
        </parameters>
      </variant>
    </function>
    <function name="getMainFont">
      <variant return-type="QFont" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="update">
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="layout" />
        </parameters>
      </variant>
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isDirty">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPainterPaths">
      <variant return-type="QList&lt;RPainterPath&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="draft" default="false" />
          <parameter const="false" type="double" modifier="" name="pixelSizeHint" default="RDEFAULT_MIN1" />
        </parameters>
      </variant>
    </function>
    <function name="getShapes">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="false" />
          <parameter const="false" type="bool" modifier="" name="segment" default="false" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="entityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getExploded">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getClosestShape">
      <variant return-type="QSharedPointer&lt;RShape&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="pos" />
          <parameter const="false" type="double" modifier="" name="range" default="RNANDOUBLE" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getClosestPointOnEntity">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="double" modifier="" name="range" />
          <parameter const="false" type="bool" modifier="" name="limited" />
        </parameters>
      </variant>
    </function>
    <function name="getTextLayouts">
      <variant return-type="QList&lt;RTextLayout&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSimpleTextBlocks">
      <variant return-type="QList&lt;RTextBasedData&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasProxy" static="true">
      <variant return-type="bool" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <!--
    <function name="setTextProxy" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters>
          <parameter const="false" type="RTextProxy" modifier="*" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getTextProxy" static="true">
      <variant return-type="RTextProxy*" static="true" access="public">
        <parameters />
      </variant>
    </function>
    -->
    <function name="toEscapedText" static="true">
      <variant return-type="QString" static="true" access="public">
        <parameters>
          <parameter const="true" type="QTextDocument" modifier="&amp;" name="textDocument" />
          <parameter const="true" type="RColor" modifier="&amp;" name="initialColor" />
          <parameter const="false" type="double" modifier="" name="fontHeightFactor" default="1.0" />
          <parameter const="false" type="bool" modifier="" name="simpleText" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="toRichText" static="true">
      <variant return-type="QString" static="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="escapedText" />
          <parameter const="true" type="QFont" modifier="&amp;" name="mainFont" />
          <parameter const="false" type="double" modifier="" name="fontHeightFactor" default="1.0" />
        </parameters>
      </variant>
    </function>
    <function name="to2D">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
</unit>

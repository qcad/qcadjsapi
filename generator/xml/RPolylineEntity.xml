<?xml version="1.0"?>
<unit xmlns="http://qcad.org/namespaces/src" xmlns:qc="http://qcad.org/namespaces/xsl" filename="RPolylineEntity.h">
  <class_decl name="RDocument" />
  <class_decl name="RExporter" />
  <class_decl name="RArc" />
  <class_decl name="RLine" />
  <class name="RPolylineEntity" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
      <super name="REntity" />
    </super_list>
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyProtected" />
    <property static="true" type="RPropertyTypeId" name="PropertyWorkingSet" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyLayer" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetype" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetypeScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineweight" />
    <property static="true" type="RPropertyTypeId" name="PropertyColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDisplayedColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDrawOrder" />
    <property static="true" type="RPropertyTypeId" name="PropertyClosed" />
    <property static="true" type="RPropertyTypeId" name="PropertyPolylineGen" />
    <property static="true" type="RPropertyTypeId" name="PropertyVertexNX" />
    <property static="true" type="RPropertyTypeId" name="PropertyVertexNY" />
    <property static="true" type="RPropertyTypeId" name="PropertyVertexNZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyBulgeN" />
    <property static="true" type="RPropertyTypeId" name="PropertyAngleN" />
    <property static="true" type="RPropertyTypeId" name="PropertyStartWidthN" />
    <property static="true" type="RPropertyTypeId" name="PropertyEndWidthN" />
    <property static="true" type="RPropertyTypeId" name="PropertyGlobalWidth" />
    <property static="true" type="RPropertyTypeId" name="PropertyOrientation" />
    <property static="true" type="RPropertyTypeId" name="PropertyLength" />
    <property static="true" type="RPropertyTypeId" name="PropertyTotalLength" />
    <property static="true" type="RPropertyTypeId" name="PropertyArea" />
    <property static="true" type="RPropertyTypeId" name="PropertyTotalArea" />
    <property static="true" type="RPropertyTypeId" name="PropertyBaseAngle" />
    <property static="true" type="RPropertyTypeId" name="PropertySize1" />
    <property static="true" type="RPropertyTypeId" name="PropertySize2" />
    <property static="true" type="RPropertyTypeId" name="PropertyElevation" />
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="RPolylineData" modifier="&amp;" name="data" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RPolylineEntity" modifier="&amp;" name="other" />
        </parameters>
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStaticPropertyTypeIds" static="true">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RPolylineEntity*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setShape">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="exportEntity">
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RExporter" modifier="&amp;" name="e" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
          <parameter const="false" type="bool" modifier="" name="forceSelected" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getData">
      <variant return-type="RPolylineData&amp;" virtual="true" access="public">
        <parameters />
      </variant>
      <!--
      <variant return-type="const RPolylineData&amp;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
      -->
    </function>
    <function name="getPolylineShape">
      <variant return-type="RPolyline" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clear">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="normalize">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="countVertices">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="appendVertex">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="vertex" />
          <parameter const="false" type="double" modifier="" name="bulge" default="0.0" />
          <parameter const="false" type="double" modifier="" name="w1" default="0.0" />
          <parameter const="false" type="double" modifier="" name="w2" default="0.0" />
        </parameters>
      </variant>
    </function>
    <function name="prependVertex">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="vertex" />
          <parameter const="false" type="double" modifier="" name="bulge" default="0.0" />
          <parameter const="false" type="double" modifier="" name="w1" default="0.0" />
          <parameter const="false" type="double" modifier="" name="w2" default="0.0" />
        </parameters>
      </variant>
    </function>
    <function name="insertVertex">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="index" />
          <parameter const="true" type="RVector" modifier="&amp;" name="vertex" />
        </parameters>
      </variant>
    </function>
    <function name="insertVertexAt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="vertex" />
        </parameters>
      </variant>
    </function>
    <function name="getVertexAt">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="removeLastVertex">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="removeVertex">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="index" />
        </parameters>
      </variant>
    </function>
    <function name="countSegments">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSegmentAt">
      <variant return-type="QSharedPointer&lt;RShape&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="isArcSegmentAt">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="hasArcSegments">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getClosestSegment">
      <variant return-type="int" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="getClosestVertex">
      <variant return-type="int" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="getBulgeAt">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="setBulgeAt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
          <parameter const="false" type="double" modifier="" name="b" />
        </parameters>
      </variant>
    </function>
    <function name="getVertexAngle">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
          <parameter const="false" type="RS::Orientation" modifier="" name="orientation" default="RS::UnknownOrientation" />
        </parameters>
      </variant>
    </function>
    <function name="stripWidths">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setMinimumWidth">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="w" />
        </parameters>
      </variant>
    </function>
    <function name="setGlobalWidth">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="w" />
        </parameters>
      </variant>
    </function>
    <function name="setStartWidthAt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
          <parameter const="false" type="double" modifier="" name="w" />
        </parameters>
      </variant>
    </function>
    <function name="getStartWidthAt">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="setEndWidthAt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
          <parameter const="false" type="double" modifier="" name="w" />
        </parameters>
      </variant>
    </function>
    <function name="getEndWidthAt">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="hasWidths">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setStartWidths">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;double&gt;" modifier="&amp;" name="sw" />
        </parameters>
      </variant>
    </function>
    <function name="getStartWidths">
      <variant return-type="QList&lt;double&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setEndWidths">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;double&gt;" modifier="&amp;" name="ew" />
        </parameters>
      </variant>
    </function>
    <function name="getEndWidths">
      <variant return-type="QList&lt;double&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection1">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection2">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="reverse">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSideOfPoint">
      <variant return-type="RS::Side" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="getEndPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStartPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="relocateStartPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="setClosed">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isClosed">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isGeometricallyClosed">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="autoClose">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="toLogicallyClosed">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="toLogicallyOpen">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSelfIntersectionPoints">
      <variant return-type="QList&lt;RVector&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="getOrientation">
      <variant return-type="RS::Orientation" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="implicitelyClosed" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getArea">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLength">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLengthTo">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getExploded">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getComplexity">
      <variant return-type="int" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="toPainterPath">
      <variant return-type="RPainterPath" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="simplify">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="angleTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="verifyTangency">
      <variant return-type="QList&lt;RVector&gt;" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="toleranceMin" default="RS::AngleTolerance" />
          <parameter const="false" type="double" modifier="" name="toleranceMax" default="M_PI_4" />
        </parameters>
      </variant>
    </function>
    <function name="setPolylineGen">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getPolylineGen">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setElevation">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getElevation">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isFlat">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTrimEnd">
      <variant return-type="RS::Ending" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" />
        </parameters>
      </variant>
    </function>
    <function name="trimStartPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="trimDist" />
        </parameters>
      </variant>
    </function>
    <function name="trimEndPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="trimDist" />
        </parameters>
      </variant>
    </function>
    <function name="morph">
      <variant return-type="QList&lt;RPolyline&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="target" />
          <parameter const="false" type="int" modifier="" name="steps" />
        </parameters>
      </variant>
    </function>
    <function name="contains">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="borderIsInside" default="false" />
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="containsShape">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
        </parameters>
      </variant>
    </function>
    <function name="validate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <!--
    <function name="print">
      <variant return-type="void" virtual="true" const="true" access="protected">
        <parameters>
          <parameter const="false" type="QDebug" modifier="" name="dbg" />
        </parameters>
      </variant>
    </function>
    -->
  </class>
</unit>

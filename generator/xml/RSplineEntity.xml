<?xml version="1.0"?>
<unit xmlns="http://qcad.org/namespaces/src" xmlns:qc="http://qcad.org/namespaces/xsl" filename="RSplineEntity.h">
  <class_decl name="RDocument" />
  <class_decl name="RExporter" />
  <class name="RSplineEntity" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
      <super name="REntity" />
    </super_list>
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyProtected" />
    <property static="true" type="RPropertyTypeId" name="PropertyWorkingSet" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyLayer" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetype" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetypeScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineweight" />
    <property static="true" type="RPropertyTypeId" name="PropertyColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDisplayedColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDrawOrder" />
    <property static="true" type="RPropertyTypeId" name="PropertyControlPointNX" />
    <property static="true" type="RPropertyTypeId" name="PropertyControlPointNY" />
    <property static="true" type="RPropertyTypeId" name="PropertyControlPointNZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyFitPointNX" />
    <property static="true" type="RPropertyTypeId" name="PropertyFitPointNY" />
    <property static="true" type="RPropertyTypeId" name="PropertyFitPointNZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyKnotN" />
    <property static="true" type="RPropertyTypeId" name="PropertyPeriodic" />
    <property static="true" type="RPropertyTypeId" name="PropertyDegree" />
    <property static="true" type="RPropertyTypeId" name="PropertyUseStartTangent" />
    <property static="true" type="RPropertyTypeId" name="PropertyStartTangentX" />
    <property static="true" type="RPropertyTypeId" name="PropertyStartTangentY" />
    <property static="true" type="RPropertyTypeId" name="PropertyStartTangentZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyUseEndTangent" />
    <property static="true" type="RPropertyTypeId" name="PropertyEndTangentX" />
    <property static="true" type="RPropertyTypeId" name="PropertyEndTangentY" />
    <property static="true" type="RPropertyTypeId" name="PropertyEndTangentZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyLength" />
    <property static="true" type="RPropertyTypeId" name="PropertyTotalLength" />
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="RSplineData" modifier="&amp;" name="data" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RSplineEntity" modifier="&amp;" name="other" />
        </parameters>
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStaticPropertyTypeIds" static="true">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RSplineEntity*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="exportEntity">
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RExporter" modifier="&amp;" name="e" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
          <parameter const="false" type="bool" modifier="" name="forceSelected" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="setUndone">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getData">
      <variant return-type="RSplineData&amp;" virtual="true" access="public">
        <parameters />
      </variant>
      <!--
      <variant return-type="const RSplineData&amp;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
      -->
    </function>
    <function name="setShape">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RSpline" modifier="&amp;" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTDelta">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTMin">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTMax">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTAtPoint">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="getTAtDistance">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
        </parameters>
      </variant>
    </function>
    <function name="getDegree">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection1">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection2">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTrimEnd">
      <variant return-type="RS::Ending" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" />
        </parameters>
      </variant>
    </function>
    <function name="trimStartPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="trimEndPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="splitAtPoints">
      <variant return-type="QList&lt;RSpline&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="points" />
        </parameters>
      </variant>
    </function>
    <function name="splitAtParams">
      <variant return-type="QList&lt;RSpline&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;double&gt;" modifier="&amp;" name="params" />
        </parameters>
      </variant>
    </function>
    <function name="getTangentAtStart">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTangentAtEnd">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isClosed">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isGeometricallyClosed">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="isPeriodic">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="appendControlPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="appendFitPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="prependFitPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="insertFitPointAt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="removeFitPointAt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="setPeriodic">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getControlPoints">
      <variant return-type="QList&lt;RVector&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getControlPointsWrapped">
      <variant return-type="QList&lt;RVector&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="countControlPoints">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getControlPointAt">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="getFitPoints">
      <variant return-type="QList&lt;RVector&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasFitPoints">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="countFitPoints">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getFitPointAt">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="getKnotVector">
      <variant return-type="QList&lt;double&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getActualKnotVector">
      <variant return-type="QList&lt;double&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getWeights">
      <variant return-type="QList&lt;double&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLength">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPointAt">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="t" />
        </parameters>
      </variant>
    </function>
    <function name="getPointAtDistance">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
        </parameters>
      </variant>
    </function>
    <function name="getAngleAt">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="RS::From" modifier="" name="from" default="RS::FromStart" />
        </parameters>
      </variant>
    </function>
    <function name="getStartPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setStartPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="sp" />
        </parameters>
      </variant>
    </function>
    <function name="setEndPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="ep" />
        </parameters>
      </variant>
    </function>
    <function name="toPolyline">
      <variant return-type="RPolyline" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="segments" />
        </parameters>
      </variant>
    </function>
    <function name="approximateWithArcs">
      <variant return-type="RPolyline" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="tolerance" />
          <parameter const="false" type="double" modifier="" name="radiusLimit" default="RDEFAULT_MIN1" />
        </parameters>
      </variant>
    </function>
    <function name="reverse">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSideOfPoint">
      <variant return-type="RS::Side" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="getComplexity">
      <variant return-type="int" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getExploded">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="segments" default="RDEFAULT_MIN1" />
        </parameters>
      </variant>
    </function>
    <function name="simplify">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="tolerance" />
        </parameters>
      </variant>
    </function>
    <function name="getBezierSegments">
      <variant return-type="QList&lt;RSpline&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
        </parameters>
      </variant>
    </function>
    <function name="print" />
  </class>
</unit>

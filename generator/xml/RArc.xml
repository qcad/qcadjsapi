<?xml version="1.0"?>
<unit xmlns="http://qcad.org/namespaces/src" xmlns:qc="http://qcad.org/namespaces/xsl" filename="RArc.h">
  <class_decl name="RBox" />
  <class_decl name="RLine" />
  <class_decl name="RPolyline" />
  <class name="RArc" sharedpointer="true">
    <super_list>
      <super name="RShape" downcast="true" />
    </super_list>
    <constructor>
      <variant>
        <parameters />
      </variant>
      <variant>
        <parameters>
          <parameter const="false" type="double" modifier="" name="cx" />
          <parameter const="false" type="double" modifier="" name="cy" />
          <parameter const="false" type="double" modifier="" name="radius" />
          <parameter const="false" type="double" modifier="" name="startAngle" />
          <parameter const="false" type="double" modifier="" name="endAngle" />
          <parameter const="false" type="bool" modifier="" name="reversed" default="false" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
          <parameter const="false" type="double" modifier="" name="radius" />
          <parameter const="false" type="double" modifier="" name="startAngle" />
          <parameter const="false" type="double" modifier="" name="endAngle" />
          <parameter const="false" type="bool" modifier="" name="reversed" default="false" />
        </parameters>
      </variant>
    </constructor>
    <property type="RVector" name="center" read="getCenter" write="setCenter" />
    <property type="double" name="radius" read="getRadius" write="setRadius" />
    <property type="double" name="startAngle" read="getStartAngle" write="setStartAngle" />
    <property type="double" name="endAngle" read="getEndAngle" write="setEndAngle" />
    <property type="bool" name="reversed" read="isReversed" write="setReversed" />
    <function name="getShapeType">
      <variant return-type="RShape::Type" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="QSharedPointer&lt;RShape&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isDirected">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setZ">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="z" />
        </parameters>
      </variant>
    </function>
    <function name="getVectorProperties">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDoubleProperties">
      <variant return-type="QList&lt;double&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBoolProperties">
      <variant return-type="QList&lt;bool&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isFullCircle">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::AngleTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="createFrom3Points" static="true">
      <variant return-type="RArc" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="startPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="true" type="RVector" modifier="&amp;" name="endPoint" />
        </parameters>
      </variant>
    </function>
    <function name="createFrom2PBulge" static="true">
      <variant return-type="RArc" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="startPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="endPoint" />
          <parameter const="false" type="double" modifier="" name="bulge" />
        </parameters>
      </variant>
    </function>
    <function name="createTangential" static="true">
      <variant return-type="RArc" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="startPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="pos" />
          <parameter const="false" type="double" modifier="" name="direction" />
          <parameter const="false" type="double" modifier="" name="radius" />
        </parameters>
      </variant>
    </function>
    <function name="createBiarc" static="true">
      <variant return-type="QList&lt;RArc&gt;" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="startPoint" />
          <parameter const="false" type="double" modifier="" name="startDirection" />
          <parameter const="true" type="RVector" modifier="&amp;" name="endPoint" />
          <parameter const="false" type="double" modifier="" name="endDirection" />
          <parameter const="false" type="bool" modifier="" name="secondTry" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMiddlePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCenterPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getArcReferencePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPointsWithDistanceToEnd">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="int" modifier="" name="from" default="RS::FromAny" />
        </parameters>
      </variant>
    </function>
    <function name="getPointCloud">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="segmentLength" />
        </parameters>
      </variant>
    </function>
    <function name="getVectorTo">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="getCenter">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCenter">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="vector" />
        </parameters>
      </variant>
    </function>
    <function name="getRadius">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setRadius">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="radius" />
        </parameters>
      </variant>
    </function>
    <function name="getStartAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setStartAngle">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="startAngle" />
        </parameters>
      </variant>
    </function>
    <function name="getEndAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setEndAngle">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="endAngle" />
        </parameters>
      </variant>
    </function>
    <function name="isReversed">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setReversed">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="reversed" />
        </parameters>
      </variant>
    </function>
    <function name="getAngleLength">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="allowForZeroLength" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="isAngleWithinArc">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a" />
        </parameters>
      </variant>
    </function>
    <function name="getDiameter">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDiameter">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="d" />
        </parameters>
      </variant>
    </function>
    <function name="setLength">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="getArea">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setArea">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a" />
        </parameters>
      </variant>
    </function>
    <function name="getChordArea">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection1">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection2">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSideOfPoint">
      <variant return-type="RS::Side" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="getSweep">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setSweep">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="getLength">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStartPoint">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoint">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPointAtAngle">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a" />
        </parameters>
      </variant>
    </function>
    <function name="getAngleAt">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="RS::From" modifier="" name="from" default="RS::FromStart" />
        </parameters>
      </variant>
    </function>
    <function name="getMiddlePoint">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="moveStartPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="pos" />
          <parameter const="false" type="bool" modifier="" name="keepRadius" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="moveEndPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="pos" />
          <parameter const="false" type="bool" modifier="" name="keepRadius" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="moveMiddlePoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="pos" />
        </parameters>
      </variant>
    </function>
    <function name="getBulge">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="reverse">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="stretch">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="area" />
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="getTransformed">
      <variant return-type="QSharedPointer&lt;RShape&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QTransform" modifier="&amp;" name="transform" />
        </parameters>
      </variant>
    </function>
    <function name="getTrimEnd">
      <variant return-type="RS::Ending" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" />
        </parameters>
      </variant>
    </function>
    <function name="trimStartPoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="trimDist" />
        </parameters>
      </variant>
    </function>
    <function name="trimEndPoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="trimDist" />
        </parameters>
      </variant>
    </function>
    <function name="getDistanceFromStart">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="approximateWithLines">
      <variant return-type="RPolyline" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="segmentLength" />
          <parameter const="false" type="double" modifier="" name="angle" default="0.0" />
        </parameters>
      </variant>
    </function>
    <function name="approximateWithLinesTan">
      <variant return-type="RPolyline" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="segmentLength" />
          <parameter const="false" type="double" modifier="" name="angle" default="0.0" />
        </parameters>
      </variant>
    </function>
    <function name="getTangents">
      <variant return-type="QList&lt;RLine&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="getOffsetShapes">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="int" modifier="" name="number" />
          <parameter const="false" type="RS::Side" modifier="" name="side" />
          <parameter const="true" type="RVector" modifier="&amp;" name="position" default="RVector::invalid" />
        </parameters>
      </variant>
    </function>
    <function name="splitAt">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="points" />
        </parameters>
      </variant>
    </function>
    <function name="splitAtQuadrantLines">
      <variant return-type="QList&lt;RArc&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="print" />
    <preproc plain="#if QT_VERSION&gt;=0x060000" />
    <function name="copy">
      <variant return-type="RArc" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <preproc plain="#endif" />
  </class>
</unit>

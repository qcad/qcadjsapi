<?xml version="1.0"?>
<unit xmlns="http://qcad.org/namespaces/src" xmlns:qc="http://qcad.org/namespaces/xsl" filename="RVector.h">
  <class_decl name="RMatrix" />
  <class_decl name="RBox" />
  <class_decl name="RLine" />
  <class_decl name="RPolyline" />
  <class name="RVector" variant-conversion="true">
    <constructor>
      <variant count="4">
        <parameters>
          <parameter const="false" type="double" modifier="" name="vx" />
          <parameter const="false" type="double" modifier="" name="vy" />
          <parameter const="false" type="double" modifier="" name="vz" default="0.0" />
          <parameter const="false" type="bool" modifier="" name="valid_in" default="true" />
        </parameters>
      </variant>
      <variant count="1">
        <parameters>
          <parameter const="true" type="QList&lt;double&gt;" modifier="&amp;" name="tuples" />
        </parameters>
      </variant>
      <variant count="0">
        <parameters />
      </variant>
    </constructor>
    <property type="double" name="x" read="getX" write="setX" />
    <property type="double" name="y" read="getY" write="setY" />
    <property type="double" name="z" read="getZ" write="setZ" />
    <property type="bool" name="valid" read="isValid" />
    <function name="set">
      <variant count="3" return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="vx" />
          <parameter const="false" type="double" modifier="" name="vy" />
          <parameter const="false" type="double" modifier="" name="vz" default="0.0" />
        </parameters>
      </variant>
    </function>
    <function name="setPolar">
      <variant count="2" return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="radius" />
          <parameter const="false" type="double" modifier="" name="angle" />
        </parameters>
      </variant>
    </function>
    <function name="get2D">
      <variant count="0" return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isValid">
      <variant count="0" return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isZero">
      <variant count="0" return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isSane">
      <variant count="0" return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isNaN">
      <variant count="0" return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isInside">
      <variant count="1" return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="b" />
        </parameters>
      </variant>
    </function>
    <function name="equalsFuzzy">
      <variant count="2" return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
          <parameter const="false" type="double" modifier="" name="tol" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="equalsFuzzy2D">
      <variant count="2" return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
          <parameter const="false" type="double" modifier="" name="tol" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="getDistanceTo">
      <variant count="1" return-type="double" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getDistanceTo2D">
      <variant count="1" return-type="double" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="setAngle">
      <variant count="1" return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a" />
        </parameters>
      </variant>
    </function>
    <function name="getAngle">
      <variant count="0" return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAngleToPlaneXY">
      <variant count="0" return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAngleTo">
      <variant count="1" return-type="double" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="setMagnitude2D">
      <variant count="1" return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="m" />
        </parameters>
      </variant>
    </function>
    <function name="getMagnitude">
      <variant count="0" return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSquaredMagnitude">
      <variant count="0" return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMagnitude2D">
      <variant count="0" return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLerp">
      <variant count="2" return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
          <parameter const="false" type="double" modifier="" name="t" />
        </parameters>
      </variant>
    </function>
    <function name="getUnitVector">
      <variant count="0" return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setX">
      <variant count="1" return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="x" />
        </parameters>
      </variant>
    </function>
    <function name="getX">
      <variant count="0" return-type="double" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setY">
      <variant count="1" return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="y" />
        </parameters>
      </variant>
    </function>
    <function name="getY">
      <variant count="0" return-type="double" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setZ">
      <variant count="1" return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="z" />
        </parameters>
      </variant>
    </function>
    <function name="getZ">
      <variant count="0" return-type="double" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isInWindow">
      <variant count="2" return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="firstCorner" />
          <parameter const="true" type="RVector" modifier="&amp;" name="secondCorner" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant count="1" return-type="RVector" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="moveList" static="true">
      <variant count="2" return-type="void" static="true" access="public">
        <parameters>
          <parameter const="false" type="QList&lt;RVector&gt;" modifier="&amp;" name="list" />
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant count="2" return-type="RVector" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
      <variant count="1" return-type="RVector" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
        </parameters>
      </variant>
    </function>
    <function name="getRotated">
      <variant count="2" return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
    </function>
    <function name="rotate3D">
      <variant count="2" return-type="RVector" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
          <parameter const="false" type="double" modifier="" name="rotation" />
        </parameters>
      </variant>
    </function>
    <function name="rotateList" static="true">
      <variant count="3" return-type="void" static="true" access="public">
        <parameters>
          <parameter const="false" type="QList&lt;RVector&gt;" modifier="&amp;" name="list" />
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
      <variant count="2" return-type="void" static="true" access="public">
        <parameters>
          <parameter const="false" type="QList&lt;RVector&gt;" modifier="&amp;" name="list" />
          <parameter const="false" type="double" modifier="" name="rotation" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant count="2" return-type="RVector" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="factor" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RVector::nullVector" />
        </parameters>
      </variant>
      <variant count="2" return-type="RVector" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="factors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RVector::nullVector" />
        </parameters>
      </variant>
    </function>
    <function name="getScaled">
      <variant count="2" return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="factors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
    </function>
    <function name="scaleList" static="true">
      <variant count="3" return-type="void" static="true" access="public">
        <parameters>
          <parameter const="false" type="QList&lt;RVector&gt;" modifier="&amp;" name="list" />
          <parameter const="false" type="double" modifier="" name="factor" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RVector::nullVector" />
        </parameters>
      </variant>
      <variant count="3" return-type="void" static="true" access="public">
        <parameters>
          <parameter const="false" type="QList&lt;RVector&gt;" modifier="&amp;" name="list" />
          <parameter const="true" type="RVector" modifier="&amp;" name="factors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RVector::nullVector" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant count="2" return-type="RVector" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="axis1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="axis2" />
        </parameters>
      </variant>
      <variant count="1" return-type="RVector" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="getMirrored">
      <variant count="1" return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="flipHorizontal">
      <variant count="0" return-type="RVector" access="public">
        <parameters />
      </variant>
    </function>
    <function name="flipVertical">
      <variant count="0" return-type="RVector" access="public">
        <parameters />
      </variant>
    </function>
    <function name="stretch">
      <variant count="2" return-type="RVector" access="public">
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="area" />
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="isoProject">
      <variant count="1" return-type="RVector" access="public">
        <parameters>
          <parameter const="false" type="RS::IsoProjectionType" modifier="" name="type" />
        </parameters>
      </variant>
    </function>
    <function name="axonometricProjection">
      <variant count="1" return-type="RVector" access="public">
        <parameters>
          <parameter const="false" type="RS::IsoProjectionType" modifier="" name="type" />
        </parameters>
      </variant>
    </function>
    <function name="obliqueProjection">
      <variant count="1" return-type="RVector" access="public">
        <parameters>
          <parameter const="false" type="RS::IsoProjectionType" modifier="" name="type" />
        </parameters>
      </variant>
    </function>
    <function name="transform">
      <variant count="1" return-type="RVector" access="public">
        <parameters>
          <parameter const="true" type="RMatrix" modifier="&amp;" name="m" />
        </parameters>
      </variant>
    </function>
    <function name="transform2DM">
      <variant count="1" return-type="RVector" access="public">
        <parameters>
          <parameter const="true" type="RMatrix" modifier="&amp;" name="m" />
        </parameters>
      </variant>
    </function>
    <function name="transform2D">
      <variant count="1" return-type="RVector" access="public">
        <parameters>
          <parameter const="true" type="QTransform" modifier="&amp;" name="t" />
        </parameters>
      </variant>
    </function>
    <function name="getTransformed">
      <variant count="1" return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="true" type="RMatrix" modifier="&amp;" name="m" />
        </parameters>
      </variant>
    </function>
    <function name="getTransformed2DM">
      <variant count="1" return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="true" type="RMatrix" modifier="&amp;" name="m" />
        </parameters>
      </variant>
    </function>
    <function name="getTransformed2D">
      <variant count="1" return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="true" type="QTransform" modifier="&amp;" name="t" />
        </parameters>
      </variant>
    </function>
    <function name="getDividedComponents">
      <variant count="1" return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getMultipliedComponents">
      <variant count="1" return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getClosest">
      <variant count="1" return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="list" />
        </parameters>
      </variant>
    </function>
    <function name="getClosest2D">
      <variant count="1" return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="list" />
        </parameters>
      </variant>
    </function>
    <function name="getClosestDistance">
      <variant count="2" return-type="double" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="list" />
          <parameter const="false" type="int" modifier="" name="counts" />
        </parameters>
      </variant>
    </function>
    <function name="getClosestIndex">
      <variant count="2" return-type="int" const="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="list" />
          <parameter const="false" type="bool" modifier="" name="ignoreZ" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getClosestIndex2D">
      <variant count="1" return-type="int" const="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="list" />
        </parameters>
      </variant>
    </function>
    <function name="operator_add" call="operator+">
      <variant count="1" return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="operator_subtract" call="operator-">
      <variant count="1" return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="operator_multiply" call="operator*">
      <variant count="1" return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="operator_divide" call="operator/">
      <variant count="1" return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="getNegated">
      <variant count="0" return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAbsolute">
      <variant count="0" return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="dot">
      <variant count="1" return-type="double" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="other" />
        </parameters>
      </variant>
    </function>
    <function name="normalize">
      <variant count="0" return-type="RVector" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getNormalized">
      <variant count="0" return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="operator_add_assign" call="operator+=">
      <variant count="1" return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="operator_subtract_assign" call="operator-=">
      <variant count="1" return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="operator_multiply_assign" call="operator*=">
      <variant count="1" return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="operator_divide_assign" call="operator/=">
      <variant count="1" return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="operator_equal" call="operator==">
      <variant count="1" return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="operator_unequal" call="operator!=">
      <variant count="1" return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getFloor">
      <variant count="0" return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCeil">
      <variant count="0" return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="lteXY">
      <variant count="1" return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="gteXY">
      <variant count="1" return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <preproc plain="#if QT_VERSION&gt;=0x060000" />
    <function name="copy">
      <variant count="0" return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <preproc plain="#endif" />
    <function name="containsFuzzy" static="true">
      <variant count="3" return-type="bool" static="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="vectors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
          <parameter const="false" type="double" modifier="" name="tol" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="findFirstFuzzy" static="true">
      <variant count="3" return-type="int" static="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="vectors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
          <parameter const="false" type="double" modifier="" name="tol" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="getMinimum" static="true">
      <variant count="2" return-type="RVector" static="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="v2" />
        </parameters>
      </variant>
      <variant count="1" return-type="RVector" static="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="vectors" />
        </parameters>
      </variant>
    </function>
    <function name="getMaximum" static="true">
      <variant count="2" return-type="RVector" static="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="v2" />
        </parameters>
      </variant>
      <variant count="1" return-type="RVector" static="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="vectors" />
        </parameters>
      </variant>
    </function>
    <function name="getMinimumX" static="true">
      <variant count="1" return-type="RVector" static="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="vectors" />
        </parameters>
      </variant>
    </function>
    <function name="getMaximumX" static="true">
      <variant count="1" return-type="RVector" static="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="vectors" />
        </parameters>
      </variant>
    </function>
    <function name="getMinimumY" static="true">
      <variant count="1" return-type="RVector" static="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="vectors" />
        </parameters>
      </variant>
    </function>
    <function name="getMaximumY" static="true">
      <variant count="1" return-type="RVector" static="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="vectors" />
        </parameters>
      </variant>
    </function>
    <function name="getAverage" static="true">
      <variant count="2" return-type="RVector" static="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="v2" />
        </parameters>
      </variant>
      <variant count="1" return-type="RVector" static="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="vectors" />
        </parameters>
      </variant>
    </function>
    <function name="getUnion" static="true">
      <variant count="3" return-type="QList&lt;RVector&gt;" static="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="vectorsA" />
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="vectorsB" />
          <parameter const="false" type="double" modifier="" name="tol" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="getUnique" static="true">
      <variant count="2" return-type="QList&lt;RVector&gt;" static="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="vectors" />
          <parameter const="false" type="double" modifier="" name="tol" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="getXList" static="true">
      <variant count="1" return-type="QList&lt;double&gt;" static="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="vectors" />
        </parameters>
      </variant>
    </function>
    <function name="getYList" static="true">
      <variant count="1" return-type="QList&lt;double&gt;" static="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="vectors" />
        </parameters>
      </variant>
    </function>
    <function name="getZList" static="true">
      <variant count="1" return-type="QList&lt;double&gt;" static="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="vectors" />
        </parameters>
      </variant>
    </function>
    <function name="getCrossProduct" static="true">
      <variant count="2" return-type="RVector" static="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="v2" />
        </parameters>
      </variant>
    </function>
    <function name="getDotProduct" static="true">
      <variant count="2" return-type="double" static="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="v2" />
        </parameters>
      </variant>
    </function>
    <function name="createPolar" static="true">
      <variant count="2" return-type="RVector" static="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="radius" />
          <parameter const="false" type="double" modifier="" name="angle" />
        </parameters>
      </variant>
    </function>
    <function name="lessThanX" static="true">
      <variant count="2" return-type="bool" static="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="v2" />
        </parameters>
      </variant>
    </function>
    <function name="greaterThanX" static="true">
      <variant count="2" return-type="bool" static="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="v2" />
        </parameters>
      </variant>
    </function>
    <function name="lessThanY" static="true">
      <variant count="2" return-type="bool" static="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="v2" />
        </parameters>
      </variant>
    </function>
    <function name="greaterThanY" static="true">
      <variant count="2" return-type="bool" static="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="v2" />
        </parameters>
      </variant>
    </function>
    <function name="lessThanEqualXY" static="true">
      <variant count="2" return-type="bool" static="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="v2" />
        </parameters>
      </variant>
    </function>
    <function name="greaterThanEqualXY" static="true">
      <variant count="2" return-type="bool" static="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="v2" />
        </parameters>
      </variant>
    </function>
    <function name="getSortedByDistance" static="true">
      <variant count="2" return-type="QList&lt;RVector&gt;" static="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="list" />
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <!--
    <class name="RVectorDistanceSort">
      <function name="lessThan" static="true">
        <variant return-type="bool" static="true" access="public">
          <parameters>
            <parameter const="true" type="RVector" modifier="&amp;" name="v1" />
            <parameter const="true" type="RVector" modifier="&amp;" name="v2" />
          </parameters>
        </variant>
      </function>
    </class>
    -->
    <function name="getSortedLeftRightTopBottom" static="true">
      <variant count="1" return-type="QList&lt;RVector&gt;" static="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="list" />
        </parameters>
      </variant>
    </function>
    <!--
    <class name="RVectorLeftRightTopBottomSort">
      <function name="lessThan" static="true">
        <variant return-type="bool" static="true" access="public">
          <parameters>
            <parameter const="true" type="RVector" modifier="&amp;" name="v1" />
            <parameter const="true" type="RVector" modifier="&amp;" name="v2" />
          </parameters>
        </variant>
      </function>
    </class>
    -->
    <function name="getSortedByAngle" static="true">
      <variant count="3" return-type="QList&lt;RVector&gt;" static="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="list" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
          <parameter const="false" type="double" modifier="" name="angle" />
        </parameters>
      </variant>
    </function>
    <!--
    <class name="RVectorAngleSort">
      <function name="lessThan" static="true">
        <variant return-type="bool" static="true" access="public">
          <parameters>
            <parameter const="true" type="RVector" modifier="&amp;" name="v1" />
            <parameter const="true" type="RVector" modifier="&amp;" name="v2" />
          </parameters>
        </variant>
      </function>
    </class>
    -->
    <property static="true" type="RVector" name="invalid" />
    <property static="true" type="RVector" name="nullVector" />
    <property static="true" type="RVector" name="nanVector" />
  </class>
</unit>

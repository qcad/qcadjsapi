<?xml version="1.0"?>
<unit xmlns="http://qcad.org/namespaces/src" xmlns:qc="http://qcad.org/namespaces/xsl">
  <class name="RAction" ownership="cpp">
    <enum name="ClickMode">
      <key>PickCoordinate</key>
      <key>PickCoordinateNoSnap</key>
      <key>PickEntity</key>
      <key>PickingDisabled</key>
    </enum>
    <!--
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RGuiAction" modifier="*" name="guiAction" default="NULL" />
        </parameters>
      </variant>
    </constructor>
    -->
    <function name="terminate">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isTerminated">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setOverride">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isOverride">
      <variant return-type="bool" virtual="true" overridable="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setNoState">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="hasNoState">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setUniqueGroup">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="ug" />
        </parameters>
      </variant>
    </function>
    <function name="getUniqueGroup">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setOverrideBase">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RAction" modifier="*" name="base" />
        </parameters>
      </variant>
    </function>
    <function name="getOverrideBase">
      <variant return-type="RAction*" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getGuiAction">
      <variant return-type="RGuiAction*" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setGuiAction">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RGuiAction" modifier="*" name="guiAction" />
        </parameters>
      </variant>
    </function>
    <function name="getGraphicsScenes">
      <variant return-type="QList&lt;RGraphicsScene*&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDocument">
      <variant return-type="RDocument*" virtual="true" overridable="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDocumentInterface">
      <variant return-type="RDocumentInterface*" virtual="true" overridable="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStorage">
      <variant return-type="RStorage*" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDocumentInterface">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="di" />
        </parameters>
      </variant>
    </function>
    <function name="setClickMode">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RAction::ClickMode" modifier="" name="m" />
        </parameters>
      </variant>
    </function>
    <function name="getClickMode">
      <variant return-type="RAction::ClickMode" access="public">
        <parameters />
      </variant>
    </function>
    <function name="beginEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setGraphicsView">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RGraphicsView" modifier="*" name="view" />
        </parameters>
      </variant>
    </function>
    <function name="finishEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="enterEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="suspendEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="resumeEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="escapeEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="keyPressEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="QKeyEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="keyReleaseEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="QKeyEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="mousePressEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RMouseEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="mouseMoveEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RMouseEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="mouseReleaseEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RMouseEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="mouseDoubleClickEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RMouseEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="wheelEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RWheelEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="tabletEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RTabletEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="swipeGestureEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="QSwipeGesture" modifier="&amp;" name="gesture" />
        </parameters>
      </variant>
    </function>
    <function name="panGestureEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="QPanGesture" modifier="&amp;" name="gesture" />
        </parameters>
      </variant>
    </function>
    <function name="pinchGestureEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="QPinchGesture" modifier="&amp;" name="gesture" />
        </parameters>
      </variant>
    </function>
    <function name="commandEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RCommandEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="commandEventPreview">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RCommandEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="coordinateEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RCoordinateEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="coordinateEventPreview">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RCoordinateEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="entityPickEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="REntityPickEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="entityPickEventPreview">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="REntityPickEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="propertyChangeEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="zoomChangeEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RGraphicsView" modifier="&amp;" name="view" />
        </parameters>
      </variant>
    </function>
    <function name="updatePreview">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="applyOperation">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="snap">
      <variant return-type="RVector" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RMouseEvent" modifier="&amp;" name="event" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RActionAdapter" inheritable="true" ownership="cpp">
    <super_list>
      <super name="RAction" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RGuiAction" modifier="*" name="guiAction" default="NULL" />
        </parameters>
      </variant>
    </constructor>
    <function name="beginEvent">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setGraphicsView">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="RGraphicsView" modifier="*" name="" />
        </parameters>
      </variant>
    </function>
    <function name="finishEvent">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="enterEvent">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="suspendEvent">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="resumeEvent">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="escapeEvent">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="keyPressEvent">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="QKeyEvent" modifier="&amp;" name="" />
        </parameters>
      </variant>
    </function>
    <function name="keyReleaseEvent">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="QKeyEvent" modifier="&amp;" name="" />
        </parameters>
      </variant>
    </function>
    <function name="mousePressEvent">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="RMouseEvent" modifier="&amp;" name="" />
        </parameters>
      </variant>
    </function>
    <function name="mouseMoveEvent">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="RMouseEvent" modifier="&amp;" name="" />
        </parameters>
      </variant>
    </function>
    <function name="mouseReleaseEvent">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="RMouseEvent" modifier="&amp;" name="" />
        </parameters>
      </variant>
    </function>
    <function name="mouseDoubleClickEvent">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="RMouseEvent" modifier="&amp;" name="" />
        </parameters>
      </variant>
    </function>
    <function name="wheelEvent">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="RWheelEvent" modifier="&amp;" name="" />
        </parameters>
      </variant>
    </function>
    <function name="tabletEvent">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="RTabletEvent" modifier="&amp;" name="" />
        </parameters>
      </variant>
    </function>
    <function name="swipeGestureEvent">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="QSwipeGesture" modifier="&amp;" name="" />
        </parameters>
      </variant>
    </function>
    <function name="panGestureEvent">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="QPanGesture" modifier="&amp;" name="" />
        </parameters>
      </variant>
    </function>
    <function name="pinchGestureEvent">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="QPinchGesture" modifier="&amp;" name="" />
        </parameters>
      </variant>
    </function>
    <function name="commandEvent">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="RCommandEvent" modifier="&amp;" name="" />
        </parameters>
      </variant>
    </function>
    <function name="commandEventPreview">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="RCommandEvent" modifier="&amp;" name="" />
        </parameters>
      </variant>
    </function>
    <function name="coordinateEvent">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="RCoordinateEvent" modifier="&amp;" name="" />
        </parameters>
      </variant>
    </function>
    <function name="coordinateEventPreview">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="RCoordinateEvent" modifier="&amp;" name="" />
        </parameters>
      </variant>
    </function>
    <function name="entityPickEvent">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="REntityPickEvent" modifier="&amp;" name="" />
        </parameters>
      </variant>
    </function>
    <function name="entityPickEventPreview">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="REntityPickEvent" modifier="&amp;" name="" />
        </parameters>
      </variant>
    </function>
    <function name="propertyChangeEvent">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyEvent" modifier="&amp;" name="" />
        </parameters>
      </variant>
    </function>
    <function name="zoomChangeEvent">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="RGraphicsView" modifier="&amp;" name="" />
        </parameters>
      </variant>
    </function>
    <function name="updatePreview">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="applyOperation">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RAddObjectOperation" ownership="cpp">
    <super_list>
      <super name="ROperation" />
      <super name="RAddObjectsOperation" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;RObject&gt;" modifier="" name="object" />
          <parameter const="true" type="QString" modifier="&amp;" name="text" />
          <parameter const="false" type="bool" modifier="" name="useCurrentAttributes" default="true" />
          <parameter const="false" type="bool" modifier="" name="undoable" default="true" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;RObject&gt;" modifier="" name="object" />
          <parameter const="false" type="bool" modifier="" name="useCurrentAttributes" default="true" />
          <parameter const="false" type="bool" modifier="" name="undoable" default="true" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
  </class>
  <class name="RAddObjectsOperation" ownership="cpp">
    <super_list>
      <super name="ROperation" />
    </super_list>
    <enum name="Flag">
      <key>NoFlags</key>
      <key>UseAttributes</key>
      <key>ForceNew</key>
      <key>GeometryOnly</key>
      <key>Delete</key>
    </enum>
    <class name="RModifiedObjects">
      <constructor>
        <variant>
          <parameters>
            <parameter const="false" type="QSharedPointer&lt;RObject&gt;" modifier="" name="object" />
            <parameter const="false" type="bool" modifier="" name="useCurrentAttributes" />
            <parameter const="false" type="bool" modifier="" name="forceNew" />
          </parameters>
        </variant>
        <variant>
          <parameters>
            <parameter const="false" type="QSharedPointer&lt;RObject&gt;" modifier="" name="object" />
            <parameter const="false" type="RAddObjectsOperation::Flags" modifier="" name="flags" />
          </parameters>
        </variant>
        <variant>
          <parameters>
            <parameter const="false" type="QSharedPointer&lt;RObject&gt;" modifier="" name="object" />
          </parameters>
        </variant>
        <variant>
          <parameters />
        </variant>
      </constructor>
      <function name="setUseAttributes">
        <variant return-type="void" access="public">
          <parameters>
            <parameter const="false" type="bool" modifier="" name="on" />
          </parameters>
        </variant>
      </function>
      <function name="getUseAttributes">
        <variant return-type="bool" const="true" access="public">
          <parameters />
        </variant>
      </function>
      <function name="setForceNew">
        <variant return-type="void" access="public">
          <parameters>
            <parameter const="false" type="bool" modifier="" name="on" />
          </parameters>
        </variant>
      </function>
      <function name="getForceNew">
        <variant return-type="bool" const="true" access="public">
          <parameters />
        </variant>
      </function>
      <function name="setGeometryOnly">
        <variant return-type="void" access="public">
          <parameters>
            <parameter const="false" type="bool" modifier="" name="on" />
          </parameters>
        </variant>
      </function>
      <function name="getGeometryOnly">
        <variant return-type="bool" const="true" access="public">
          <parameters />
        </variant>
      </function>
      <function name="setDelete">
        <variant return-type="void" access="public">
          <parameters>
            <parameter const="false" type="bool" modifier="" name="on" />
          </parameters>
        </variant>
      </function>
      <function name="getDelete">
        <variant return-type="bool" const="true" access="public">
          <parameters />
        </variant>
      </function>
      <function name="setFlag">
        <variant return-type="void" access="public">
          <parameters>
            <parameter const="false" type="RAddObjectsOperation::Flag" modifier="" name="flag" />
            <parameter const="false" type="bool" modifier="" name="on" />
          </parameters>
        </variant>
      </function>
      <function name="getFlag">
        <variant return-type="bool" const="true" access="public">
          <parameters>
            <parameter const="false" type="RAddObjectsOperation::Flag" modifier="" name="flag" />
          </parameters>
        </variant>
      </function>
    </class>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QList&lt;QSharedPointer&lt;RObject&gt;&gt;" modifier="&amp;" name="list" />
          <parameter const="false" type="bool" modifier="" name="useCurrentAttributes" default="true" />
          <parameter const="false" type="bool" modifier="" name="undoable" default="true" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="false" type="bool" modifier="" name="undoable" default="true" />
        </parameters>
      </variant>
    </constructor>
    <function name="replaceObject">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QSharedPointer&lt;RObject&gt;" modifier="&amp;" name="object" />
          <parameter const="false" type="bool" modifier="" name="useCurrentAttributes" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getObject">
      <variant return-type="QSharedPointer&lt;RObject&gt;" access="public">
        <parameters>
          <parameter const="false" type="RObject::Id" modifier="" name="id" />
        </parameters>
      </variant>
    </function>
    <function name="endCycle">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="addObject">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QSharedPointer&lt;RObject&gt;" modifier="&amp;" name="object" />
          <parameter const="false" type="bool" modifier="" name="useCurrentAttributes" default="true" />
          <parameter const="false" type="bool" modifier="" name="forceNew" default="false" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QSharedPointer&lt;RObject&gt;" modifier="&amp;" name="object" />
          <parameter const="false" type="RAddObjectsOperation::Flags" modifier="" name="flags" />
        </parameters>
      </variant>
    </function>
    <function name="deleteObject">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QSharedPointer&lt;RObject&gt;" modifier="&amp;" name="object" />
        </parameters>
      </variant>
    </function>
    <function name="apply">
      <variant return-type="RTransaction" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="&amp;" name="document" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getPreviewCounter">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLimitPreview">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isEmpty">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RArc" sharedpointer="true">
    <super_list>
      <super name="RShape" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="double" modifier="" name="cx" />
          <parameter const="false" type="double" modifier="" name="cy" />
          <parameter const="false" type="double" modifier="" name="radius" />
          <parameter const="false" type="double" modifier="" name="startAngle" />
          <parameter const="false" type="double" modifier="" name="endAngle" />
          <parameter const="false" type="bool" modifier="" name="reversed" default="false" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
          <parameter const="false" type="double" modifier="" name="radius" />
          <parameter const="false" type="double" modifier="" name="startAngle" />
          <parameter const="false" type="double" modifier="" name="endAngle" />
          <parameter const="false" type="bool" modifier="" name="reversed" default="false" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <property type="RVector" name="center" read="getCenter" write="setCenter" />
    <property type="double" name="radius" read="getRadius" write="setRadius" />
    <property type="double" name="startAngle" read="getStartAngle" write="setStartAngle" />
    <property type="double" name="endAngle" read="getEndAngle" write="setEndAngle" />
    <property type="bool" name="reversed" read="isReversed" write="setReversed" />
    <function name="getShapeType">
      <variant return-type="RShape::Type" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RArc*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isDirected">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setZ">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="z" />
        </parameters>
      </variant>
    </function>
    <function name="getVectorProperties">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDoubleProperties">
      <variant return-type="QList&lt;double&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBoolProperties">
      <variant return-type="QList&lt;bool&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isFullCircle">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::AngleTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="createFrom3Points" static="true">
      <variant return-type="RArc" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="startPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="true" type="RVector" modifier="&amp;" name="endPoint" />
        </parameters>
      </variant>
    </function>
    <function name="createFrom2PBulge" static="true">
      <variant return-type="RArc" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="startPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="endPoint" />
          <parameter const="false" type="double" modifier="" name="bulge" />
        </parameters>
      </variant>
    </function>
    <function name="createTangential" static="true">
      <variant return-type="RArc" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="startPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="pos" />
          <parameter const="false" type="double" modifier="" name="direction" />
          <parameter const="false" type="double" modifier="" name="radius" />
        </parameters>
      </variant>
    </function>
    <function name="createBiarc" static="true">
      <variant return-type="QList&lt;RArc&gt;" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="startPoint" />
          <parameter const="false" type="double" modifier="" name="startDirection" />
          <parameter const="true" type="RVector" modifier="&amp;" name="endPoint" />
          <parameter const="false" type="double" modifier="" name="endDirection" />
          <parameter const="false" type="bool" modifier="" name="secondTry" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMiddlePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCenterPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getArcReferencePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPointsWithDistanceToEnd">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="int" modifier="" name="from" default="RS::FromAny" />
        </parameters>
      </variant>
    </function>
    <function name="getPointCloud">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="segmentLength" />
        </parameters>
      </variant>
    </function>
    <function name="getVectorTo">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="getCenter">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCenter">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="vector" />
        </parameters>
      </variant>
    </function>
    <function name="getRadius">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setRadius">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="radius" />
        </parameters>
      </variant>
    </function>
    <function name="getStartAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setStartAngle">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="startAngle" />
        </parameters>
      </variant>
    </function>
    <function name="getEndAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setEndAngle">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="endAngle" />
        </parameters>
      </variant>
    </function>
    <function name="isReversed">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setReversed">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="reversed" />
        </parameters>
      </variant>
    </function>
    <function name="getAngleLength">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="allowForZeroLength" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="isAngleWithinArc">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a" />
        </parameters>
      </variant>
    </function>
    <function name="getDiameter">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDiameter">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="d" />
        </parameters>
      </variant>
    </function>
    <function name="setLength">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="getArea">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setArea">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a" />
        </parameters>
      </variant>
    </function>
    <function name="getChordArea">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection1">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection2">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSideOfPoint">
      <variant return-type="RS::Side" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="getSweep">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setSweep">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="getLength">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStartPoint">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoint">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPointAtAngle">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a" />
        </parameters>
      </variant>
    </function>
    <function name="getAngleAt">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="RS::From" modifier="" name="from" default="RS::FromStart" />
        </parameters>
      </variant>
    </function>
    <function name="getMiddlePoint">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="moveStartPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="pos" />
          <parameter const="false" type="bool" modifier="" name="keepRadius" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="moveEndPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="pos" />
          <parameter const="false" type="bool" modifier="" name="keepRadius" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="moveMiddlePoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="pos" />
        </parameters>
      </variant>
    </function>
    <function name="getBulge">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="reverse">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="stretch">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="area" />
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="getTransformed">
      <variant return-type="QSharedPointer&lt;RShape&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QTransform" modifier="&amp;" name="transform" />
        </parameters>
      </variant>
    </function>
    <function name="getTrimEnd">
      <variant return-type="RS::Ending" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" />
        </parameters>
      </variant>
    </function>
    <function name="trimStartPoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="trimDist" />
        </parameters>
      </variant>
    </function>
    <function name="trimEndPoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="trimDist" />
        </parameters>
      </variant>
    </function>
    <function name="getDistanceFromStart">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="approximateWithLines">
      <variant return-type="RPolyline" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="segmentLength" />
          <parameter const="false" type="double" modifier="" name="angle" default="0.0" />
        </parameters>
      </variant>
    </function>
    <function name="approximateWithLinesTan">
      <variant return-type="RPolyline" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="segmentLength" />
          <parameter const="false" type="double" modifier="" name="angle" default="0.0" />
        </parameters>
      </variant>
    </function>
    <function name="getTangents">
      <variant return-type="QList&lt;RLine&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="getOffsetShapes">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="int" modifier="" name="number" />
          <parameter const="false" type="RS::Side" modifier="" name="side" />
          <parameter const="true" type="RVector" modifier="&amp;" name="position" default="RVector::invalid" />
        </parameters>
      </variant>
    </function>
    <function name="splitAt">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="points" />
        </parameters>
      </variant>
    </function>
    <function name="splitAtQuadrantLines">
      <variant return-type="QList&lt;RArc&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="print" />
    <preproc plain="#if QT_VERSION&gt;=0x060000" />
    <function name="copy">
      <variant return-type="RArc" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <preproc plain="#endif" />
  </class>
  <class name="RArcData">
    <super_list>
      <super name="REntityData" />
      <super name="RArc" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
          <parameter const="false" type="double" modifier="" name="radius" />
          <parameter const="false" type="double" modifier="" name="startAngle" />
          <parameter const="false" type="double" modifier="" name="endAngle" />
          <parameter const="false" type="bool" modifier="" name="reversed" default="false" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RArc" modifier="&amp;" name="arc" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getArc">
      <variant return-type="RArc" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="setZ">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="z" />
        </parameters>
      </variant>
    </function>
    <function name="to2D">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="ignoreEmpty" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getMiddlePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getCenterPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getArcReferencePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
        </parameters>
      </variant>
    </function>
    <function name="getPointsWithDistanceToEnd">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="int" modifier="" name="from" default="RS::FromAny" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getIntersectionPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="REntityData" modifier="&amp;" name="other" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="bool" modifier="" name="same" default="false" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="true" />
          <!--
          <parameter const="false" type="QList&lt;QPair&lt;RObject::Id,RObject::Id&gt;&gt;" modifier="*" name="entityIds" default="NULL" />
          -->
        </parameters>
      </variant>
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getVectorTo">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="getDistanceTo">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="range" default="0.0" />
          <parameter const="false" type="bool" modifier="" name="draft" default="false" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="intersectsWith">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="flipHorizontal">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCenter">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRadius">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBulge">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStartAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isReversed">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection1">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection2">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="reverse">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTrimEnd">
      <variant return-type="RS::Ending" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" />
        </parameters>
      </variant>
    </function>
    <function name="trimStartPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="trimEndPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getLength">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAngleLength">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="allowForZeroLength" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getReferencePoints">
      <variant return-type="QList&lt;RRefPoint&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="hint" default="RS::RenderTop" />
        </parameters>
      </variant>
    </function>
    <function name="moveReferencePoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="targetPoint" />
          <parameter const="false" type="Qt::KeyboardModifiers" modifier="" name="modifiers" default="Qt::NoModifier" />
        </parameters>
      </variant>
    </function>
    <function name="approximateWithLines">
      <variant return-type="RPolyline" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="segmentLength" />
        </parameters>
      </variant>
    </function>
    <function name="castToShape">
      <variant return-type="RShape*" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getShapes">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="false" />
          <parameter const="false" type="bool" modifier="" name="segment" default="false" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="entityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RArcEntity" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
      <super name="REntity" />
    </super_list>
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyProtected" />
    <property static="true" type="RPropertyTypeId" name="PropertyWorkingSet" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyLayer" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetype" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetypeScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineweight" />
    <property static="true" type="RPropertyTypeId" name="PropertyColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDisplayedColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDrawOrder" />
    <property static="true" type="RPropertyTypeId" name="PropertyCenterX" />
    <property static="true" type="RPropertyTypeId" name="PropertyCenterY" />
    <property static="true" type="RPropertyTypeId" name="PropertyCenterZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddlePointX" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddlePointY" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddlePointZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyRadius" />
    <property static="true" type="RPropertyTypeId" name="PropertyStartAngle" />
    <property static="true" type="RPropertyTypeId" name="PropertyEndAngle" />
    <property static="true" type="RPropertyTypeId" name="PropertyReversed" />
    <property static="true" type="RPropertyTypeId" name="PropertyDiameter" />
    <property static="true" type="RPropertyTypeId" name="PropertyLength" />
    <property static="true" type="RPropertyTypeId" name="PropertyTotalLength" />
    <property static="true" type="RPropertyTypeId" name="PropertySweepAngle" />
    <property static="true" type="RPropertyTypeId" name="PropertyArea" />
    <property static="true" type="RPropertyTypeId" name="PropertyTotalArea" />
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="RArcData" modifier="&amp;" name="data" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RArcEntity" modifier="&amp;" name="other" />
        </parameters>
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStaticPropertyTypeIds" static="true">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RArcEntity*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setShape">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RArc" modifier="&amp;" name="a" />
        </parameters>
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="exportEntity">
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RExporter" modifier="&amp;" name="e" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
          <parameter const="false" type="bool" modifier="" name="forceSelected" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="scaleNonUniform">
      <variant return-type="QSharedPointer&lt;REntity&gt;" access="public">
        <parameters>
          <parameter const="false" type="REntity" modifier="&amp;" name="entity" />
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
      <variant return-type="QSharedPointer&lt;REntity&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
    </function>
    <function name="getData">
      <variant return-type="RArcData&amp;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCenter">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRadius">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setRadius">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="radius" />
        </parameters>
      </variant>
    </function>
    <function name="getBulge">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStartAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setStartAngle">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="angle" />
        </parameters>
      </variant>
    </function>
    <function name="getEndAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setEndAngle">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="angle" />
        </parameters>
      </variant>
    </function>
    <function name="isReversed">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setReversed">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="reversed" />
        </parameters>
      </variant>
    </function>
    <function name="getDirection1">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection2">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStartPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMiddlePoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="reverse">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSideOfPoint">
      <variant return-type="RS::Side" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="getSweep">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTrimEnd">
      <variant return-type="RS::Ending" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" />
        </parameters>
      </variant>
    </function>
    <function name="trimStartPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="trimEndPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getLength">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAngleLength">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="allowForZeroLength" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getAngleAt">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="RS::From" modifier="" name="from" />
        </parameters>
      </variant>
    </function>
    <function name="print" />
  </class>
  <class name="RAttributeData">
    <super_list>
      <super name="REntityData" />
      <super name="RTextBasedData" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RTextBasedData" modifier="&amp;" name="textData" />
          <parameter const="false" type="RBlockReferenceEntity::Id" modifier="" name="blockReferenceId" />
          <parameter const="true" type="QString" modifier="&amp;" name="tag" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRenderedText">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="escUnicode" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getTag">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setTag">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="t" />
        </parameters>
      </variant>
    </function>
    <function name="isInvisible">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setInvisible">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="getLinetypeId">
      <variant return-type="RLinetype::Id" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLineweight">
      <variant return-type="RLineweight::Lineweight" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getColor">
      <variant return-type="RColor" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getReferencePoints">
      <variant return-type="QList&lt;RRefPoint&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="hint" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RAttributeDefinitionData">
    <super_list>
      <super name="RTextBasedData" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RTextBasedData" modifier="&amp;" name="textData" />
          <parameter const="true" type="QString" modifier="&amp;" name="tag" />
          <parameter const="true" type="QString" modifier="&amp;" name="prompt" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTag">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setTag">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="t" />
        </parameters>
      </variant>
    </function>
    <function name="getPrompt">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPrompt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="isInvisible">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setInvisible">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getRenderedText">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="escUnicode" default="false" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RAttributeDefinitionEntity" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
      <super name="REntity" />
      <super name="RTextBasedEntity" />
    </super_list>
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyProtected" />
    <property static="true" type="RPropertyTypeId" name="PropertyWorkingSet" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyLayer" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetype" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetypeScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineweight" />
    <property static="true" type="RPropertyTypeId" name="PropertyColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDisplayedColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDrawOrder" />
    <property static="true" type="RPropertyTypeId" name="PropertyAngle" />
    <property static="true" type="RPropertyTypeId" name="PropertyXScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyBold" />
    <property static="true" type="RPropertyTypeId" name="PropertyFontName" />
    <property static="true" type="RPropertyTypeId" name="PropertyHAlign" />
    <property static="true" type="RPropertyTypeId" name="PropertyHeight" />
    <property static="true" type="RPropertyTypeId" name="PropertyWidth" />
    <property static="true" type="RPropertyTypeId" name="PropertyItalic" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineSpacingFactor" />
    <property static="true" type="RPropertyTypeId" name="PropertyPositionX" />
    <property static="true" type="RPropertyTypeId" name="PropertyPositionY" />
    <property static="true" type="RPropertyTypeId" name="PropertyPositionZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyPrompt" />
    <property static="true" type="RPropertyTypeId" name="PropertyTag" />
    <property static="true" type="RPropertyTypeId" name="PropertyText" />
    <property static="true" type="RPropertyTypeId" name="PropertyPlainText" />
    <property static="true" type="RPropertyTypeId" name="PropertyVAlign" />
    <property static="true" type="RPropertyTypeId" name="PropertyInvisible" />
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="RAttributeDefinitionData" modifier="&amp;" name="data" />
        </parameters>
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStaticPropertyTypeIds" static="true">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RAttributeDefinitionEntity*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getData">
      <variant return-type="RAttributeDefinitionData&amp;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setData">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RAttributeDefinitionData" modifier="&amp;" name="d" />
        </parameters>
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getTag">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setTag">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="t" />
        </parameters>
      </variant>
    </function>
    <function name="getPrompt">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPrompt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="isInvisible">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setInvisible">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="print" />
  </class>
  <class name="RAttributeEntity" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
      <super name="REntity" />
      <super name="RTextBasedEntity" />
    </super_list>
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyProtected" />
    <property static="true" type="RPropertyTypeId" name="PropertyWorkingSet" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyLayer" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetype" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetypeScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineweight" />
    <property static="true" type="RPropertyTypeId" name="PropertyColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDisplayedColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDrawOrder" />
    <property static="true" type="RPropertyTypeId" name="PropertyParentId" />
    <property static="true" type="RPropertyTypeId" name="PropertyAngle" />
    <property static="true" type="RPropertyTypeId" name="PropertyXScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyBold" />
    <property static="true" type="RPropertyTypeId" name="PropertyFontName" />
    <property static="true" type="RPropertyTypeId" name="PropertyHAlign" />
    <property static="true" type="RPropertyTypeId" name="PropertyHeight" />
    <property static="true" type="RPropertyTypeId" name="PropertyWidth" />
    <property static="true" type="RPropertyTypeId" name="PropertyItalic" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineSpacingFactor" />
    <property static="true" type="RPropertyTypeId" name="PropertyPositionX" />
    <property static="true" type="RPropertyTypeId" name="PropertyPositionY" />
    <property static="true" type="RPropertyTypeId" name="PropertyPositionZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyTag" />
    <property static="true" type="RPropertyTypeId" name="PropertyText" />
    <property static="true" type="RPropertyTypeId" name="PropertyPlainText" />
    <property static="true" type="RPropertyTypeId" name="PropertyVAlign" />
    <property static="true" type="RPropertyTypeId" name="PropertyInvisible" />
    <property static="true" type="RPropertyTypeId" name="PropertyBackward" />
    <property static="true" type="RPropertyTypeId" name="PropertyUpsideDown" />
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="RAttributeData" modifier="&amp;" name="data" />
        </parameters>
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStaticPropertyTypeIds" static="true">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RAttributeEntity*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getData">
      <variant return-type="RAttributeData&amp;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setData">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RAttributeData" modifier="&amp;" name="d" />
        </parameters>
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="exportEntity">
      <variant return-type="void" const="true" access="public">
        <parameters>
          <parameter const="false" type="RExporter" modifier="&amp;" name="e" />
          <parameter const="false" type="bool" modifier="" name="preview" />
          <parameter const="false" type="bool" modifier="" name="forceSelected" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getTag">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setTag">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="t" />
        </parameters>
      </variant>
    </function>
    <function name="isInvisible">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setInvisible">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="isSelectable">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="print" />
  </class>
  <class name="RAutoLoadJs">
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="addAutoLoadFile" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="file" />
        </parameters>
      </variant>
    </function>
    <function name="getAutoLoadFiles" static="true">
      <variant return-type="QStringList" static="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RBlock" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
    </super_list>
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyName" />
    <property static="true" type="RPropertyTypeId" name="PropertyFrozen" />
    <property static="true" type="RPropertyTypeId" name="PropertyPixelUnit" />
    <property static="true" type="RPropertyTypeId" name="PropertyOriginX" />
    <property static="true" type="RPropertyTypeId" name="PropertyOriginY" />
    <property static="true" type="RPropertyTypeId" name="PropertyOriginZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyLayout" />
    <property static="true" type="QString" name="modelSpaceName" />
    <property static="true" type="QString" name="paperSpaceName" />
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="QString" modifier="&amp;" name="name" />
          <parameter const="true" type="RVector" modifier="&amp;" name="origin" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RBlock*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setName">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="n" />
        </parameters>
      </variant>
    </function>
    <function name="isFrozen">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setFrozen">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isAnonymous">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setAnonymous">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isPixelUnit">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPixelUnit">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="setOrigin">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="origin" />
        </parameters>
      </variant>
    </function>
    <function name="getOrigin">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isModelSpace">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasLayout">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLayoutId">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RLayout::Id" modifier="" name="layoutId" />
        </parameters>
      </variant>
    </function>
    <function name="getLayoutId">
      <variant return-type="RLayout::Id" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLayoutName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="setCustomProperty">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="title" />
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
        </parameters>
      </variant>
    </function>
    <function name="print" />
  </class>
  <class name="RBlockListener" ownership="cpp">
    <function name="updateBlocks">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
    <function name="setCurrentBlock">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
    <function name="clearBlocks">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RBlockListenerAdapter" ownership="cpp">
    <super_list>
      <super name="QObject" />
      <super name="RBlockListener" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QObject" modifier="*" name="parent" default="NULL" />
        </parameters>
      </variant>
    </constructor>
    <function name="updateBlocks">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
    <function name="setCurrentBlock">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
    <function name="clearBlocks">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="blocksUpdated">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
    <function name="currentBlockSet">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
    <function name="blocksCleared">
      <variant return-type="void" access="public" signal="true">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RBlockReferenceData">
    <super_list>
      <super name="REntityData" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="referencedBlockId" />
          <parameter const="true" type="RVector" modifier="&amp;" name="position" />
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="false" type="double" modifier="" name="angle" />
          <parameter const="false" type="int" modifier="" name="columnCount" default="1" />
          <parameter const="false" type="int" modifier="" name="rowCount" default="1" />
          <parameter const="false" type="double" modifier="" name="columnSpacing" default="0" />
          <parameter const="false" type="double" modifier="" name="rowSpacing" default="0" />
          <parameter const="false" type="double" modifier="" name="visualPropertiesScale" default="1.0" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isPointType">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBoundingBoxes">
      <variant return-type="QList&lt;RBox&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="ignoreEmpty" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="ignoreEmpty" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="to2D">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPointOnEntity">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getInternalReferencePoints">
      <variant return-type="QList&lt;RRefPoint&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="hint" default="RS::RenderTop" />
        </parameters>
      </variant>
    </function>
    <function name="getReferencePoints">
      <variant return-type="QList&lt;RRefPoint&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="hint" default="RS::RenderTop" />
        </parameters>
      </variant>
    </function>
    <function name="getVectorTo">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="getDistanceTo">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="range" default="0.0" />
          <parameter const="false" type="bool" modifier="" name="draft" default="false" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="getQueryBoxInBlockCoordinates">
      <variant return-type="RBox" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="box" />
        </parameters>
      </variant>
    </function>
    <function name="getShapes">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="false" />
          <parameter const="false" type="bool" modifier="" name="segment" default="false" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="entityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="moveReferencePoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="targetPoint" />
          <parameter const="false" type="Qt::KeyboardModifiers" modifier="" name="modifiers" default="Qt::NoModifier" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="scaleVisualProperties">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="scaleFactor" />
        </parameters>
      </variant>
    </function>
    <function name="setReferencedBlockId">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
    </function>
    <function name="groundReferencedBlockId">
      <variant return-type="void" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getReferencedBlockId">
      <variant return-type="RBlock::Id" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setReferencedBlockName">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="blockName" />
        </parameters>
      </variant>
    </function>
    <function name="getReferencedBlockName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPosition">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPosition">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getScaleFactors">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setScaleFactors">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="sf" />
        </parameters>
      </variant>
    </function>
    <function name="getRotation">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setRotation">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="r" />
        </parameters>
      </variant>
    </function>
    <function name="getColumnCount">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setColumnCount">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="c" />
        </parameters>
      </variant>
    </function>
    <function name="getRowCount">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setRowCount">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="c" />
        </parameters>
      </variant>
    </function>
    <function name="getColumnSpacing">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setColumnSpacing">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="getRowSpacing">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setRowSpacing">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="update">
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RObject::Id" modifier="" name="entityId" />
        </parameters>
      </variant>
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryEntity">
      <variant return-type="QSharedPointer&lt;REntity&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
          <parameter const="false" type="bool" modifier="" name="transform" default="false" />
          <parameter const="false" type="bool" modifier="" name="ignoreAttDef" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="applyTransformationTo">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="REntity" modifier="&amp;" name="entity" />
        </parameters>
      </variant>
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;REntity&gt;" modifier="&amp;" name="entity" />
        </parameters>
      </variant>
    </function>
    <function name="getTransform">
      <variant return-type="RTransform" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getColumnRowOffset">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="col" />
          <parameter const="false" type="int" modifier="" name="row" />
          <parameter const="false" type="bool" modifier="" name="rotated" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="applyColumnRowOffsetTo">
      <variant return-type="void" const="true" access="public">
        <parameters>
          <parameter const="false" type="REntity" modifier="&amp;" name="entity" />
          <parameter const="false" type="int" modifier="" name="col" />
          <parameter const="false" type="int" modifier="" name="row" />
          <parameter const="false" type="bool" modifier="" name="rotated" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="mapToBlock">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="isPixelUnit">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="copy">
      <variant return-type="RBlockReferenceData" const="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RBlockReferenceEntity" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
      <super name="REntity" />
    </super_list>
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyProtected" />
    <property static="true" type="RPropertyTypeId" name="PropertyWorkingSet" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyLayer" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetype" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetypeScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineweight" />
    <property static="true" type="RPropertyTypeId" name="PropertyColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDisplayedColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDrawOrder" />
    <property static="true" type="RPropertyTypeId" name="PropertyReferencedBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyPositionX" />
    <property static="true" type="RPropertyTypeId" name="PropertyPositionY" />
    <property static="true" type="RPropertyTypeId" name="PropertyPositionZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyScaleX" />
    <property static="true" type="RPropertyTypeId" name="PropertyScaleY" />
    <property static="true" type="RPropertyTypeId" name="PropertyScaleZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyRotation" />
    <property static="true" type="RPropertyTypeId" name="PropertyColumnCount" />
    <property static="true" type="RPropertyTypeId" name="PropertyRowCount" />
    <property static="true" type="RPropertyTypeId" name="PropertyColumnSpacing" />
    <property static="true" type="RPropertyTypeId" name="PropertyRowSpacing" />
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="RBlockReferenceData" modifier="&amp;" name="data" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RBlockReferenceEntity" modifier="&amp;" name="other" />
        </parameters>
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStaticPropertyTypeIds" static="true">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RBlockReferenceEntity*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPropertyTypeIds">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyAttributes::Option" modifier="" name="option" default="RPropertyAttributes::NoOptions" />
        </parameters>
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="exportEntity">
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RExporter" modifier="&amp;" name="e" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
          <parameter const="false" type="bool" modifier="" name="forceSelected" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getData">
      <variant return-type="RBlockReferenceData&amp;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPosition">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPosition">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="pos" />
        </parameters>
      </variant>
    </function>
    <function name="getScaleFactors">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setScaleFactors">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="" name="sf" />
        </parameters>
      </variant>
    </function>
    <function name="getRotation">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setRotation">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="r" />
        </parameters>
      </variant>
    </function>
    <function name="getColumnCount">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setColumnCount">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="c" />
        </parameters>
      </variant>
    </function>
    <function name="getRowCount">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setRowCount">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="c" />
        </parameters>
      </variant>
    </function>
    <function name="getColumnSpacing">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setColumnSpacing">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="getRowSpacing">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setRowSpacing">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="setReferencedBlockId">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
    </function>
    <function name="setReferencedBlockName">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="blockName" />
        </parameters>
      </variant>
    </function>
    <function name="getReferencedBlockId">
      <variant return-type="RBlock::Id" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getReferencedBlockName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="update">
      <variant return-type="void" const="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
        </parameters>
      </variant>
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryEntity">
      <variant return-type="QSharedPointer&lt;REntity&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
          <parameter const="false" type="bool" modifier="" name="transform" default="false" />
          <parameter const="false" type="bool" modifier="" name="ignoreAttDef" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="applyTransformationTo">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="REntity" modifier="&amp;" name="entity" />
        </parameters>
      </variant>
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;REntity&gt;" modifier="&amp;" name="entity" />
        </parameters>
      </variant>
    </function>
    <function name="mapToBlock">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="print">
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="QDebug" modifier="" name="dbg" />
        </parameters>
      </variant>
    </function>
    -->
  </class>
  <class name="RBox">
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="double" modifier="" name="x1" />
          <parameter const="false" type="double" modifier="" name="y1" />
          <parameter const="false" type="double" modifier="" name="x2" />
          <parameter const="false" type="double" modifier="" name="y2" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
          <parameter const="false" type="double" modifier="" name="width" />
          <parameter const="false" type="double" modifier="" name="height" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="c1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="c2" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
          <parameter const="false" type="double" modifier="" name="range" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="QRectF" modifier="&amp;" name="rect" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <property type="RVector" name="c1" read="getCorner1" write="setCorner1" />
    <property type="RVector" name="c2" read="getCorner2" write="setCorner2" />
    <function name="isValid">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isSane">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="equalsFuzzy">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="b" />
          <parameter const="false" type="double" modifier="" name="tol" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="equalsFuzzy2D">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="b" />
          <parameter const="false" type="double" modifier="" name="tol" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="get2D">
      <variant return-type="RBox" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getWidth">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getHeight">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSize">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getArea">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCenter">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMinimum">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMaximum">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isOutside">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="other" />
        </parameters>
      </variant>
    </function>
    <function name="isOutsideXY">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="other" />
        </parameters>
      </variant>
    </function>
    <function name="contains">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="other" />
        </parameters>
      </variant>
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="containsBox">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="other" />
        </parameters>
      </variant>
    </function>
    <function name="containsPoint">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="intersects">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="other" />
        </parameters>
      </variant>
    </function>
    <function name="intersectsWith">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="growToInclude">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="other" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="growToIncludeBoxes">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RBox&gt;" modifier="&amp;" name="others" />
        </parameters>
      </variant>
    </function>
    <function name="growToIncludeBox">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="other" />
        </parameters>
      </variant>
    </function>
    <function name="growToIncludePoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getCorner1">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCorner1">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getCorner2">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCorner2">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getCorners">
      <variant return-type="QList&lt;RVector&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCorners2d">
      <variant return-type="QList&lt;RVector&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLines2d">
      <variant return-type="QList&lt;RLine&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPolyline2d">
      <variant return-type="RPolyline" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTriangles">
      <variant return-type="QList&lt;RTriangle&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="grow">
      <variant return-type="RBox&amp;" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="growXY">
      <variant return-type="RBox&amp;" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="offsetX" />
          <parameter const="false" type="double" modifier="" name="offsetY" />
        </parameters>
      </variant>
      <variant return-type="RBox&amp;" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="scaleByReference">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="targetPoint" />
          <parameter const="false" type="bool" modifier="" name="keepAspectRatio" default="false" />
          <parameter const="false" type="bool" modifier="" name="fromCenter" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="toQRectF">
      <variant return-type="QRectF" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="transform">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QTransform" modifier="&amp;" name="t" />
        </parameters>
      </variant>
    </function>
    <preproc plain="#if QT_VERSION&gt;=0x060000" />
    <function name="copy">
      <variant return-type="RBox" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <preproc plain="#endif" />
  </class>
  <class name="RCadToolBar" ownership="cpp" inheritable="true">
    <super_list>
      <super name="QObject" />
      <super name="QWidget" />
      <super name="QToolBar" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="title" />
          <parameter const="false" type="QWidget" modifier="*" name="parent" default="0" />
        </parameters>
      </variant>
    </constructor>
    <function name="getPanel">
      <variant return-type="RCadToolBarPanel*" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="title" />
          <parameter const="true" type="QString" modifier="&amp;" name="objectName" />
          <parameter const="false" type="bool" modifier="" name="hasBackButton" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getCurrentPanelName">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCurrentPanel">
      <variant return-type="RCadToolBarPanel*" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="showPanel">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="name" />
          <parameter const="false" type="bool" modifier="" name="isBack" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="updateIconSize">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="back">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="toggleVerticalWhenFloating">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="contextMenuEvent">
      <variant return-type="void" virtual="true" access="protected">
        <parameters>
          <parameter const="false" type="QContextMenuEvent" modifier="*" name="event" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RCadToolBarPanel" ownership="cpp" inheritable="true">
    <super_list>
      <super name="QObject" />
      <super name="QWidget" />
      <super name="RWidget" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RCadToolBar" modifier="*" name="parent" default="0" />
          <parameter const="false" type="bool" modifier="" name="hasBackButton" default="true" />
        </parameters>
      </variant>
    </constructor>
    <function name="setBackMenuName">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="n" />
        </parameters>
      </variant>
    </function>
    <function name="getButtonName">
      <variant return-type="QString" const="true" access="public">
        <parameters>
          <parameter const="false" type="QAction" modifier="*" name="action" />
        </parameters>
      </variant>
    </function>
    <function name="removeAction">
      <variant return-type="void" const="true" access="public">
        <parameters>
          <parameter const="false" type="QAction" modifier="*" name="action" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RChangePropertyOperation" ownership="cpp">
    <super_list>
      <super name="ROperation" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RS::EntityType" modifier="" name="entityTypeFilter" default="RS::EntityAll" />
          <parameter const="false" type="bool" modifier="" name="undoable" default="true" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RPropertyEvent" modifier="&amp;" name="event" />
          <parameter const="false" type="bool" modifier="" name="undoable" default="true" />
        </parameters>
      </variant>
    </constructor>
    <function name="apply">
      <variant return-type="RTransaction" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="&amp;" name="document" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RCharacterWidget" ownership="cpp" inheritable="true">
    <super_list>
      <super name="QObject" />
      <super name="QWidget" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QWidget" modifier="*" name="parent" default="0" />
        </parameters>
      </variant>
    </constructor>
    <function name="sizeHint">
      <variant return-type="QSize" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDisplayFont">
      <variant return-type="QFont" access="public">
        <parameters />
      </variant>
    </function>
    <function name="updateFont">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QFont" modifier="&amp;" name="font" />
        </parameters>
      </variant>
    </function>
    <function name="updateSize">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fontSize" />
        </parameters>
      </variant>
    </function>
    <function name="updateStyle">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fontStyle" />
        </parameters>
      </variant>
    </function>
    <function name="updateFontMerging">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="enable" />
        </parameters>
      </variant>
    </function>
    <function name="characterSelected">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="character" />
        </parameters>
      </variant>
    </function>
    <function name="mouseMoveEvent">
      <variant return-type="void" access="protected">
        <parameters>
          <parameter const="false" type="QMouseEvent" modifier="*" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="mousePressEvent">
      <variant return-type="void" access="protected">
        <parameters>
          <parameter const="false" type="QMouseEvent" modifier="*" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="paintEvent">
      <variant return-type="void" access="protected">
        <parameters>
          <parameter const="false" type="QPaintEvent" modifier="*" name="event" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RCircle" sharedpointer="true">
    <super_list>
      <super name="RShape" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="double" modifier="" name="cx" />
          <parameter const="false" type="double" modifier="" name="cy" />
          <parameter const="true" type="double" modifier="" name="radius" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
          <parameter const="true" type="double" modifier="" name="radius" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <property type="RVector" name="center" read="getCenter" write="setCenter" />
    <property type="double" name="radius" read="getRadius" write="setRadius" />
    <function name="getShapeType">
      <variant return-type="RShape::Type" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RCircle*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="createFrom2Points" static="true">
      <variant return-type="RCircle" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="p2" />
        </parameters>
      </variant>
    </function>
    <function name="createFrom3Points" static="true">
      <variant return-type="RCircle" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="p2" />
          <parameter const="true" type="RVector" modifier="&amp;" name="p3" />
        </parameters>
      </variant>
    </function>
    <function name="toArc">
      <variant return-type="RArc" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="startAngle" default="0.0" />
        </parameters>
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setZ">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="z" />
        </parameters>
      </variant>
    </function>
    <function name="getVectorProperties">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDoubleProperties">
      <variant return-type="QList&lt;double&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLength">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMiddlePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCenterPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getArcReferencePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPointsWithDistanceToEnd">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="int" modifier="" name="from" default="RS::FromAny" />
        </parameters>
      </variant>
    </function>
    <function name="getPointCloud">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="segmentLength" />
        </parameters>
      </variant>
    </function>
    <function name="getAngleAt">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="RS::From" modifier="" name="from" default="RS::FromStart" />
        </parameters>
      </variant>
    </function>
    <function name="getPointAtAngle">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a" />
        </parameters>
      </variant>
    </function>
    <function name="getVectorTo">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="getCenter">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCenter">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="vector" />
        </parameters>
      </variant>
    </function>
    <function name="getRadius">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setRadius">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="radius" />
        </parameters>
      </variant>
    </function>
    <function name="getDiameter">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDiameter">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="d" />
        </parameters>
      </variant>
    </function>
    <function name="getCircumference">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCircumference">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="c" />
        </parameters>
      </variant>
    </function>
    <function name="getArea">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setArea">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a" />
        </parameters>
      </variant>
    </function>
    <function name="contains">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="flipHorizontal">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="flipVertical">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTransformed">
      <variant return-type="QSharedPointer&lt;RShape&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QTransform" modifier="&amp;" name="transform" />
        </parameters>
      </variant>
    </function>
    <function name="getTangents">
      <variant return-type="QList&lt;RLine&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="getOffsetShapes">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="int" modifier="" name="number" />
          <parameter const="false" type="RS::Side" modifier="" name="side" />
          <parameter const="true" type="RVector" modifier="&amp;" name="position" default="RVector::invalid" />
        </parameters>
      </variant>
    </function>
    <function name="splitAt">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="points" />
        </parameters>
      </variant>
    </function>
    <function name="print" />
    <preproc plain="#if QT_VERSION&gt;=0x060000" />
    <function name="copy">
      <variant return-type="RCircle" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <preproc plain="#endif" />
  </class>
  <class name="RCircleData">
    <super_list>
      <super name="REntityData" />
      <super name="RCircle" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
          <parameter const="false" type="double" modifier="" name="radius" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RCircle" modifier="&amp;" name="circle" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCircle">
      <variant return-type="RCircle" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="setZ">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="z" />
        </parameters>
      </variant>
    </function>
    <function name="to2D">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="ignoreEmpty" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getMiddlePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getCenterPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getArcReferencePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
        </parameters>
      </variant>
    </function>
    <function name="getPointsWithDistanceToEnd">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="int" modifier="" name="from" default="RS::FromAny" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getIntersectionPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="REntityData" modifier="&amp;" name="other" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="bool" modifier="" name="same" default="false" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="true" />
          <!--
          <parameter const="false" type="QList&lt;QPair&lt;RObject::Id,RObject::Id&gt;&gt;" modifier="*" name="entityIds" default="NULL" />
          -->
        </parameters>
      </variant>
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getVectorTo">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="getDistanceTo">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="range" default="0.0" />
          <parameter const="false" type="bool" modifier="" name="draft" default="false" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="intersectsWith">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="axis1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="axis2" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="flipHorizontal">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="flipVertical">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="stretch">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="area" />
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="getCenter">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRadius">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getReferencePoints">
      <variant return-type="QList&lt;RRefPoint&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="hint" default="RS::RenderTop" />
        </parameters>
      </variant>
    </function>
    <function name="moveReferencePoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="targetPoint" />
          <parameter const="false" type="Qt::KeyboardModifiers" modifier="" name="modifiers" default="Qt::NoModifier" />
        </parameters>
      </variant>
    </function>
    <function name="castToShape">
      <variant return-type="RShape*" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getShapes">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="false" />
          <parameter const="false" type="bool" modifier="" name="segment" default="false" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="entityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RCircleEntity" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
      <super name="REntity" />
    </super_list>
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyProtected" />
    <property static="true" type="RPropertyTypeId" name="PropertyWorkingSet" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyLayer" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetype" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetypeScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineweight" />
    <property static="true" type="RPropertyTypeId" name="PropertyColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDisplayedColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDrawOrder" />
    <property static="true" type="RPropertyTypeId" name="PropertyCenterX" />
    <property static="true" type="RPropertyTypeId" name="PropertyCenterY" />
    <property static="true" type="RPropertyTypeId" name="PropertyCenterZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyRadius" />
    <property static="true" type="RPropertyTypeId" name="PropertyDiameter" />
    <property static="true" type="RPropertyTypeId" name="PropertyCircumference" />
    <property static="true" type="RPropertyTypeId" name="PropertyArea" />
    <property static="true" type="RPropertyTypeId" name="PropertyTotalArea" />
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="RCircleData" modifier="&amp;" name="data" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RCircleEntity" modifier="&amp;" name="other" />
        </parameters>
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStaticPropertyTypeIds" static="true">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RCircleEntity*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="exportEntity">
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RExporter" modifier="&amp;" name="e" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
          <parameter const="false" type="bool" modifier="" name="forceSelected" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="scaleNonUniform">
      <variant return-type="QSharedPointer&lt;REntity&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
    </function>
    <function name="getData">
      <variant return-type="RCircleData&amp;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCenter">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRadius">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setRadius">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="radius" />
        </parameters>
      </variant>
    </function>
    <function name="getLength">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="print" />
  </class>
  <class name="RClickReferencePointOperation" ownership="cpp">
    <super_list>
      <super name="ROperation" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
        </parameters>
      </variant>
    </constructor>
    <function name="apply">
      <variant return-type="RTransaction" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="&amp;" name="document" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RClipboardOperation" ownership="cpp">
    <super_list>
      <super name="ROperation" />
    </super_list>
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="apply">
      <variant return-type="RTransaction" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="&amp;" name="document" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="copy" />
    <function name="copyEntity">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="REntity" modifier="&amp;" name="entity" />
          <parameter const="false" type="RDocument" modifier="&amp;" name="src" />
          <parameter const="false" type="RDocument" modifier="&amp;" name="dest" />
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
          <parameter const="false" type="double" modifier="" name="scale" />
          <parameter const="false" type="double" modifier="" name="unitScale" />
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
          <parameter const="false" type="bool" modifier="" name="flipHorizontal" />
          <parameter const="false" type="bool" modifier="" name="flipVertical" />
          <parameter const="false" type="bool" modifier="" name="toCurrentLayer" />
          <parameter const="false" type="bool" modifier="" name="toCurrentBlock" />
          <parameter const="false" type="bool" modifier="" name="overwriteLayers" />
          <parameter const="false" type="bool" modifier="" name="overwriteBlocks" />
          <parameter const="true" type="QString" modifier="&amp;" name="blockName" />
          <parameter const="true" type="QString" modifier="&amp;" name="layerName" />
          <parameter const="false" type="RTransaction" modifier="&amp;" name="transaction" />
          <parameter const="false" type="bool" modifier="" name="toModelSpaceBlock" />
        </parameters>
      </variant>
    </function>
    <function name="copyEntityBlock">
      <variant return-type="QSharedPointer&lt;RBlock&gt;" access="public">
        <parameters>
          <parameter const="false" type="REntity" modifier="&amp;" name="entity" />
          <parameter const="false" type="RDocument" modifier="&amp;" name="src" />
          <parameter const="false" type="RDocument" modifier="&amp;" name="dest" />
          <parameter const="false" type="bool" modifier="" name="overwriteBlocks" />
          <parameter const="false" type="bool" modifier="" name="toCurrentBlock" />
          <parameter const="true" type="QString" modifier="&amp;" name="blockName" />
          <parameter const="false" type="RTransaction" modifier="&amp;" name="transaction" />
        </parameters>
      </variant>
    </function>
    <function name="copyBlock">
      <variant return-type="QSharedPointer&lt;RBlock&gt;" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
          <parameter const="false" type="RDocument" modifier="&amp;" name="src" />
          <parameter const="false" type="RDocument" modifier="&amp;" name="dest" />
          <parameter const="false" type="bool" modifier="" name="overwriteBlocks" />
          <parameter const="false" type="bool" modifier="" name="toCurrentBlock" />
          <parameter const="true" type="QString" modifier="&amp;" name="blockName" />
          <parameter const="false" type="RTransaction" modifier="&amp;" name="transaction" />
        </parameters>
      </variant>
    </function>
    <function name="copyEntityLayer">
      <variant return-type="QSharedPointer&lt;RLayer&gt;" access="public">
        <parameters>
          <parameter const="false" type="REntity" modifier="&amp;" name="entity" />
          <parameter const="false" type="RDocument" modifier="&amp;" name="src" />
          <parameter const="false" type="RDocument" modifier="&amp;" name="dest" />
          <parameter const="false" type="bool" modifier="" name="overwriteLayers" />
          <parameter const="false" type="RTransaction" modifier="&amp;" name="transaction" />
        </parameters>
      </variant>
    </function>
    <function name="copyLayer">
      <variant return-type="QSharedPointer&lt;RLayer&gt;" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
          <parameter const="false" type="RDocument" modifier="&amp;" name="src" />
          <parameter const="false" type="RDocument" modifier="&amp;" name="dest" />
          <parameter const="false" type="bool" modifier="" name="overwriteLayers" />
          <parameter const="false" type="RTransaction" modifier="&amp;" name="transaction" />
        </parameters>
      </variant>
    </function>
    <function name="copyEntityLinetype">
      <variant return-type="QSharedPointer&lt;RLinetype&gt;" access="public">
        <parameters>
          <parameter const="false" type="REntity" modifier="&amp;" name="entity" />
          <parameter const="false" type="RDocument" modifier="&amp;" name="src" />
          <parameter const="false" type="RDocument" modifier="&amp;" name="dest" />
          <parameter const="false" type="bool" modifier="" name="overwriteLinetypes" />
          <parameter const="false" type="RTransaction" modifier="&amp;" name="transaction" />
        </parameters>
      </variant>
    </function>
    <function name="copyLinetype">
      <variant return-type="QSharedPointer&lt;RLinetype&gt;" access="public">
        <parameters>
          <parameter const="false" type="RLinetype::Id" modifier="" name="linetypeId" />
          <parameter const="false" type="RDocument" modifier="&amp;" name="src" />
          <parameter const="false" type="RDocument" modifier="&amp;" name="dest" />
          <parameter const="false" type="bool" modifier="" name="overwriteLinetypes" />
          <parameter const="false" type="RTransaction" modifier="&amp;" name="transaction" />
        </parameters>
      </variant>
    </function>
    <function name="setCopyEmptyBlocks">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="setCopyAllLayers">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="setKeepSelection">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RCloseCurrentEvent" ownership="cpp">
    <super_list>
      <super name="QEvent" />
    </super_list>
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
  </class>
  <class name="RColor">
    <super_list>
      <super name="QColor" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="int" modifier="" name="r" />
          <parameter const="false" type="int" modifier="" name="g" />
          <parameter const="false" type="int" modifier="" name="b" />
          <parameter const="false" type="int" modifier="" name="a" default="255" />
          <parameter const="false" type="RColor::Mode" modifier="" name="mode" default="RColor::Fixed" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="name" />
          <parameter const="false" type="RColor::Mode" modifier="" name="mode" default="RColor::Fixed" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="false" type="RColor::Mode" modifier="" name="mode" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <enum name="Mode">
      <key>ByLayer</key>
      <key>ByBlock</key>
      <key>Fixed</key>
    </enum>
    <function name="getCustomColorCode">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getColorIndex">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="removeColor" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="cn" />
        </parameters>
      </variant>
    </function>
    <function name="addColor" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="cn" />
          <parameter const="true" type="RColor" modifier="&amp;" name="c" />
        </parameters>
      </variant>
    </function>
    <function name="createFromCadIndex" static="true">
      <variant return-type="RColor" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="code" />
        </parameters>
      </variant>
      <variant return-type="RColor" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="code" />
        </parameters>
      </variant>
    </function>
    <function name="createFromCadCustom" static="true">
      <variant return-type="RColor" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="code" />
        </parameters>
      </variant>
      <variant return-type="RColor" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="code" />
        </parameters>
      </variant>
    </function>
    <function name="createFromName" static="true">
      <variant return-type="RColor" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="name" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="getList" static="true">
      <variant return-type="QList&lt;QPair&lt;QString,RColor&gt;&gt;" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="onlyFixed" default="false" />
        </parameters>
      </variant>
    </function>
    -->
    <function name="getNameList" static="true">
      <variant return-type="QStringList" static="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="onlyFixed" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getColorList" static="true">
      <variant return-type="QList&lt;RColor&gt;" static="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="onlyFixed" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getIcon" static="true">
      <variant return-type="QIcon" access="public">
        <parameters>
          <parameter const="true" type="RColor" modifier="&amp;" name="color" />
          <parameter const="true" type="QSize" modifier="&amp;" name="size" default="RDEFAULT_QSIZE_ICON" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="getHash">
      <variant return-type="unsigned long long" const="true" access="public">
        <parameters />
      </variant>
    </function>
    -->
    <function name="isValid">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isByLayer">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isByBlock">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isFixed">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="toCompat">
      <variant return-type="QColor" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCompat">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QColor" modifier="&amp;" name="col" />
        </parameters>
      </variant>
    </function>
    <function name="getHighlighted" static="true">
      <variant return-type="RColor" access="public">
        <parameters>
          <parameter const="true" type="RColor" modifier="&amp;" name="color" />
          <parameter const="true" type="QColor" modifier="&amp;" name="bgColor" />
          <parameter const="false" type="int" modifier="" name="minDist" default="75" />
        </parameters>
      </variant>
    </function>
    <function name="getFaded" static="true">
      <variant return-type="RColor" access="public">
        <parameters>
          <parameter const="true" type="RColor" modifier="&amp;" name="color" />
          <parameter const="true" type="QColor" modifier="&amp;" name="bgColor" />
          <parameter const="false" type="double" modifier="" name="factor" default="1" />
        </parameters>
      </variant>
    </function>
    <function name="reinit" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="equals" call="operator==">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RColor" modifier="&amp;" name="color" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RColorCombo" ownership="cpp">
    <super_list>
      <super name="QObject" />
      <super name="QWidget" />
      <super name="QComboBox" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QWidget" modifier="*" name="parent" default="0" />
        </parameters>
      </variant>
    </constructor>
    <property type="bool" name="showAlphaChannel" read="getShowAlphaChannel" write="setShowAlphaChannel" />
    <property type="QColor" name="color" read="getColor" />
    <function name="getColor">
      <variant return-type="RColor" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setColor">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RColor" modifier="&amp;" name="col" />
        </parameters>
      </variant>
    </function>
    <function name="init">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getOnlyFixed">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setOnlyFixed">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="onlyFixed" />
        </parameters>
      </variant>
    </function>
    <function name="getShowAlphaChannel">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setShowAlphaChannel">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="showAlphaChannel" />
        </parameters>
      </variant>
    </function>
    <function name="valueChanged">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="true" type="RColor" modifier="&amp;" name="color" />
        </parameters>
      </variant>
    </function>
    <function name="dialogRunning">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="isRunning" />
        </parameters>
      </variant>
    </function>
    <function name="colorChanged">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="index" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RCommandEvent" ownership="cpp">
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="cmd" />
        </parameters>
      </variant>
    </constructor>
    <function name="getCommand">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="accept">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isAccepted">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RCommandLine" ownership="cpp">
    <super_list>
      <super name="QObject" />
      <super name="QWidget" />
      <super name="QLineEdit" />
    </super_list>
    <function name="clearHistory">
      <variant return-type="void" access="public" signal="true">
        <parameters />
      </variant>
    </function>
    <function name="commandConfirmed">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="command" />
        </parameters>
      </variant>
    </function>
    <function name="completeCommand">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="command" />
        </parameters>
      </variant>
    </function>
    <function name="escape">
      <variant return-type="void" access="public" signal="true">
        <parameters />
      </variant>
    </function>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QWidget" modifier="*" name="parent" default="0" />
        </parameters>
      </variant>
    </constructor>
    <function name="getLastCommand">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="appendCommand">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="cmd" />
        </parameters>
      </variant>
    </function>
    <function name="getHistory">
      <variant return-type="QStringList" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setHistory">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QStringList" modifier="&amp;" name="h" />
        </parameters>
      </variant>
    </function>
    <function name="triggerCommand">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="cmd" />
        </parameters>
      </variant>
    </function>
    <function name="paste">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RCoordinateEvent" ownership="cpp">
    <super_list>
      <super name="QEvent" />
      <super name="RInputEvent" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="position" />
          <parameter const="false" type="RGraphicsScene" modifier="&amp;" name="s" />
          <parameter const="false" type="RGraphicsView" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </constructor>
    <function name="setModifiers">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="Qt::KeyboardModifiers" modifier="" name="m" />
        </parameters>
      </variant>
    </function>
    <function name="getModifiers">
      <variant return-type="Qt::KeyboardModifiers" const="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RCoordinateListener" ownership="cpp">
    <function name="updateCoordinate">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RCoordinateListenerAdapter" ownership="cpp">
    <super_list>
      <super name="QObject" />
      <super name="RCoordinateListener" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QObject" modifier="*" name="parent" default="NULL" />
        </parameters>
      </variant>
    </constructor>
    <function name="updateCoordinate">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
    <function name="coordinateUpdated">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RCopyOperation" ownership="cpp">
    <super_list>
      <super name="ROperation" />
      <super name="RClipboardOperation" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
          <parameter const="false" type="RDocument" modifier="&amp;" name="src" />
        </parameters>
      </variant>
    </constructor>
    <function name="apply">
      <variant return-type="RTransaction" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="&amp;" name="document" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="setClear">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RDebug">
    <function name="printBacktrace" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="prefix" default="RDEFAULT_QSTRING" />
        </parameters>
      </variant>
    </function>
    <function name="startTimer" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="id" default="0" />
        </parameters>
      </variant>
    </function>
    <function name="stopTimer" static="true">
      <variant return-type="uint" static="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="id" />
          <parameter const="true" type="QString" modifier="&amp;" name="msg" />
          <parameter const="false" type="uint" modifier="" name="msThreshold" default="0" />
        </parameters>
      </variant>
      <variant return-type="uint" static="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="msg" />
        </parameters>
      </variant>
    </function>
    <function name="timeStamp" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hexDump" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="str" />
        </parameters>
      </variant>
    </function>
    <function name="incCounter" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="id" default="RDEFAULT_QSTRING" />
        </parameters>
      </variant>
    </function>
    <function name="decCounter" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="id" default="RDEFAULT_QSTRING" />
        </parameters>
      </variant>
    </function>
    <function name="getCounter" static="true">
      <variant return-type="int" static="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="id" default="RDEFAULT_QSTRING" />
        </parameters>
      </variant>
    </function>
    <function name="printCounter" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="id" default="RDEFAULT_QSTRING" />
        </parameters>
      </variant>
    </function>
    <function name="printCounters" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPrefix" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getPrefix" static="true">
      <variant return-type="QString" static="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RDeleteAllEntitiesOperation" ownership="cpp">
    <super_list>
      <super name="ROperation" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="bool" modifier="" name="undoable" default="true" />
        </parameters>
      </variant>
    </constructor>
    <function name="apply">
      <variant return-type="RTransaction" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="&amp;" name="document" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RDeleteObjectOperation" ownership="cpp">
    <super_list>
      <super name="ROperation" />
      <super name="RDeleteObjectsOperation" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;RObject&gt;" modifier="" name="object" />
          <parameter const="false" type="bool" modifier="" name="undoable" default="true" />
        </parameters>
      </variant>
    </constructor>
  </class>
  <class name="RDeleteObjectsOperation" ownership="cpp">
    <super_list>
      <super name="ROperation" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QList&lt;QSharedPointer&lt;RObject&gt;&gt;" modifier="&amp;" name="list" />
          <parameter const="false" type="bool" modifier="" name="undoable" default="true" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="false" type="bool" modifier="" name="undoable" default="true" />
        </parameters>
      </variant>
    </constructor>
    <function name="deleteObject">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QSharedPointer&lt;RObject&gt;" modifier="&amp;" name="o" />
        </parameters>
      </variant>
    </function>
    <function name="apply">
      <variant return-type="RTransaction" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="&amp;" name="document" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RDeleteSelectionOperation" ownership="cpp">
    <super_list>
      <super name="ROperation" />
      <super name="RClipboardOperation" />
    </super_list>
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="apply">
      <variant return-type="RTransaction" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="&amp;" name="document" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RDimAlignedData">
    <super_list>
      <super name="REntityData" />
      <super name="RDimensionData" />
      <super name="RDimLinearData" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RDimensionData" modifier="&amp;" name="dimData" />
          <parameter const="true" type="RVector" modifier="&amp;" name="extensionPoint1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="extensionPoint2" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="ignoreEmpty" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getReferencePoints">
      <variant return-type="QList&lt;RRefPoint&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="hint" default="RS::RenderTop" />
        </parameters>
      </variant>
    </function>
    <function name="moveReferencePoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="targetPoint" />
          <parameter const="false" type="Qt::KeyboardModifiers" modifier="" name="modifiers" default="Qt::NoModifier" />
        </parameters>
      </variant>
    </function>
    <function name="recomputeDefinitionPoint">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="oldExtPoint1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="oldExtPoint2" />
          <parameter const="true" type="RVector" modifier="&amp;" name="newExtPoint1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="newExtPoint2" />
        </parameters>
      </variant>
    </function>
    <function name="getMeasuredValue">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAutoLabel">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="updateRefDefinitionPoint1">
      <variant return-type="void" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="updateRefDefinitionPoint2">
      <variant return-type="void" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="to2D">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RDimAlignedEntity" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
      <super name="REntity" />
      <super name="RDimensionEntity" />
      <super name="RDimLinearEntity" />
    </super_list>
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyProtected" />
    <property static="true" type="RPropertyTypeId" name="PropertyWorkingSet" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyLayer" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetype" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetypeScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineweight" />
    <property static="true" type="RPropertyTypeId" name="PropertyColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDisplayedColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDrawOrder" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddleOfTextX" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddleOfTextY" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddleOfTextZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyText" />
    <property static="true" type="RPropertyTypeId" name="PropertyUpperTolerance" />
    <property static="true" type="RPropertyTypeId" name="PropertyLowerTolerance" />
    <property static="true" type="RPropertyTypeId" name="PropertyMeasuredValue" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimscale" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimlfac" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtxt" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimgap" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimasz" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimexe" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimexo" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtad" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtih" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtsz" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimlunit" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimdec" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimdsep" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimzin" />
    <property static="true" type="RPropertyTypeId" name="PropertyArchTick" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimclrt" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimBlockName" />
    <property static="true" type="RPropertyTypeId" name="PropertyAutoTextPos" />
    <property static="true" type="RPropertyTypeId" name="PropertyFontName" />
    <property static="true" type="RPropertyTypeId" name="PropertyArrow1Flipped" />
    <property static="true" type="RPropertyTypeId" name="PropertyArrow2Flipped" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtLineFix" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtLineFixLength" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimensionLinePosX" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimensionLinePosY" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimensionLinePosZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionPoint1X" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionPoint1Y" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionPoint1Z" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionPoint2X" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionPoint2Y" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionPoint2Z" />
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="RDimAlignedData" modifier="&amp;" name="data" />
        </parameters>
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStaticPropertyTypeIds" static="true">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RDimAlignedEntity*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getData">
      <variant return-type="RDimAlignedData&amp;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setData">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDimAlignedData" modifier="&amp;" name="d" />
        </parameters>
      </variant>
    </function>
    <function name="setExtensionPoint1">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getExtensionPoint1">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setExtensionPoint2">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getExtensionPoint2">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="print" />
  </class>
  <class name="RDimAngular2LData">
    <super_list>
      <super name="REntityData" />
      <super name="RDimensionData" />
      <super name="RDimAngularData" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RDimensionData" modifier="&amp;" name="dimData" />
          <parameter const="true" type="RVector" modifier="&amp;" name="extensionLine1Start" />
          <parameter const="true" type="RVector" modifier="&amp;" name="extensionLine1End" />
          <parameter const="true" type="RVector" modifier="&amp;" name="extensionLine2Start" />
          <parameter const="true" type="RVector" modifier="&amp;" name="dimArcPosition" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isSane">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setExtensionLine1Start">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getExtensionLine1Start">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setExtensionLine1End">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getExtensionLine1End">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setExtensionLine2Start">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getExtensionLine2Start">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setExtensionLine2End">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getExtensionLine2End">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimArcPosition">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getDimArcPosition">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getReferencePoints">
      <variant return-type="QList&lt;RRefPoint&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="hint" default="RS::RenderTop" />
        </parameters>
      </variant>
    </function>
    <function name="moveReferencePoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="targetPoint" />
          <parameter const="false" type="Qt::KeyboardModifiers" modifier="" name="modifiers" default="Qt::NoModifier" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="getAngles">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="&amp;" name="ang1" />
          <parameter const="false" type="double" modifier="&amp;" name="ang2" />
          <parameter const="false" type="bool" modifier="&amp;" name="reversed" />
          <parameter const="false" type="RVector" modifier="&amp;" name="p1" />
          <parameter const="false" type="RVector" modifier="&amp;" name="p2" />
        </parameters>
      </variant>
    </function>
    <function name="getCenter">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="to2D">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RDimAngular2LEntity" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
      <super name="REntity" />
      <super name="RDimensionEntity" />
      <super name="RDimAngularEntity" />
    </super_list>
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyProtected" />
    <property static="true" type="RPropertyTypeId" name="PropertyWorkingSet" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyLayer" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetype" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetypeScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineweight" />
    <property static="true" type="RPropertyTypeId" name="PropertyColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDisplayedColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDrawOrder" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddleOfTextX" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddleOfTextY" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddleOfTextZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyText" />
    <property static="true" type="RPropertyTypeId" name="PropertyUpperTolerance" />
    <property static="true" type="RPropertyTypeId" name="PropertyLowerTolerance" />
    <property static="true" type="RPropertyTypeId" name="PropertyMeasuredValue" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimscale" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtxt" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimgap" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimasz" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimexe" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimexo" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtad" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtih" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtsz" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimdsep" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimaunit" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimadec" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimazin" />
    <property static="true" type="RPropertyTypeId" name="PropertyArchTick" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimclrt" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimBlockName" />
    <property static="true" type="RPropertyTypeId" name="PropertyAutoTextPos" />
    <property static="true" type="RPropertyTypeId" name="PropertyFontName" />
    <property static="true" type="RPropertyTypeId" name="PropertyArrow1Flipped" />
    <property static="true" type="RPropertyTypeId" name="PropertyArrow2Flipped" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtLineFix" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtLineFixLength" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionLine1StartX" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionLine1StartY" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionLine1StartZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionLine1EndX" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionLine1EndY" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionLine1EndZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionLine2StartX" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionLine2StartY" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionLine2StartZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionLine2EndX" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionLine2EndY" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionLine2EndZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimArcPositionX" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimArcPositionY" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimArcPositionZ" />
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="RDimAngular2LData" modifier="&amp;" name="data" />
        </parameters>
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStaticPropertyTypeIds" static="true">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RDimAngular2LEntity*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getData">
      <variant return-type="RDimAngular2LData&amp;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setData">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDimAngular2LData" modifier="&amp;" name="d" />
        </parameters>
      </variant>
    </function>
    <function name="setExtensionLine1Start">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getExtensionLine1Start">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setExtensionLine2Start">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getExtensionLine2Start">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCenter">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="print" />
  </class>
  <class name="RDimAngular3PData">
    <super_list>
      <super name="REntityData" />
      <super name="RDimensionData" />
      <super name="RDimAngularData" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RDimensionData" modifier="&amp;" name="dimData" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
          <parameter const="true" type="RVector" modifier="&amp;" name="extensionLine1End" />
          <parameter const="true" type="RVector" modifier="&amp;" name="extensionLine2End" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isSane">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCenter">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCenter">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="setExtensionLine1End">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getExtensionLine1End">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setExtensionLine2End">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getExtensionLine2End">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimArcPosition">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getDimArcPosition">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getReferencePoints">
      <variant return-type="QList&lt;RRefPoint&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="hint" default="RS::RenderTop" />
        </parameters>
      </variant>
    </function>
    <function name="moveReferencePoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="targetPoint" />
          <parameter const="false" type="Qt::KeyboardModifiers" modifier="" name="modifiers" default="Qt::NoModifier" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="getAngles">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="&amp;" name="ang1" />
          <parameter const="false" type="double" modifier="&amp;" name="ang2" />
          <parameter const="false" type="bool" modifier="&amp;" name="reversed" />
          <parameter const="false" type="RVector" modifier="&amp;" name="p1" />
          <parameter const="false" type="RVector" modifier="&amp;" name="p2" />
        </parameters>
      </variant>
    </function>
    <function name="to2D">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RDimAngular3PEntity" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
      <super name="REntity" />
      <super name="RDimensionEntity" />
      <super name="RDimAngularEntity" />
    </super_list>
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyProtected" />
    <property static="true" type="RPropertyTypeId" name="PropertyWorkingSet" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyLayer" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetype" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetypeScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineweight" />
    <property static="true" type="RPropertyTypeId" name="PropertyColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDisplayedColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDrawOrder" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddleOfTextX" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddleOfTextY" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddleOfTextZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyText" />
    <property static="true" type="RPropertyTypeId" name="PropertyUpperTolerance" />
    <property static="true" type="RPropertyTypeId" name="PropertyLowerTolerance" />
    <property static="true" type="RPropertyTypeId" name="PropertyMeasuredValue" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimscale" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtxt" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimgap" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimasz" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimexe" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimexo" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtad" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtih" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtsz" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimdsep" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimaunit" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimadec" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimazin" />
    <property static="true" type="RPropertyTypeId" name="PropertyArchTick" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimclrt" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimBlockName" />
    <property static="true" type="RPropertyTypeId" name="PropertyAutoTextPos" />
    <property static="true" type="RPropertyTypeId" name="PropertyFontName" />
    <property static="true" type="RPropertyTypeId" name="PropertyArrow1Flipped" />
    <property static="true" type="RPropertyTypeId" name="PropertyArrow2Flipped" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtLineFix" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtLineFixLength" />
    <property static="true" type="RPropertyTypeId" name="PropertyCenterX" />
    <property static="true" type="RPropertyTypeId" name="PropertyCenterY" />
    <property static="true" type="RPropertyTypeId" name="PropertyCenterZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionLine1EndX" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionLine1EndY" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionLine1EndZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionLine2EndX" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionLine2EndY" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionLine2EndZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimArcPositionX" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimArcPositionY" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimArcPositionZ" />
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="RDimAngular3PData" modifier="&amp;" name="data" />
        </parameters>
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStaticPropertyTypeIds" static="true">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RDimAngular3PEntity*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getData">
      <variant return-type="RDimAngular3PData&amp;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setData">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDimAngular3PData" modifier="&amp;" name="d" />
        </parameters>
      </variant>
    </function>
    <function name="setCenter">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getCenter">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="print" />
  </class>
  <class name="RDimAngularData" sharedpointer="true">
    <super_list>
      <super name="REntityData" />
      <super name="RDimensionData" />
    </super_list>
    <!--
    <constructor>
      <variant>
        <parameters />
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RDimensionData" modifier="&amp;" name="dimData" />
        </parameters>
      </variant>
    </constructor>
    -->
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isSane">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setExtensionLine1End">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getExtensionLine1End">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setExtensionLine2End">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getExtensionLine2End">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimArcPosition">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getDimArcPosition">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getReferencePoints">
      <variant return-type="QList&lt;RRefPoint&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="hint" default="RS::RenderTop" />
        </parameters>
      </variant>
    </function>
    <function name="moveReferencePoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="targetPoint" />
          <parameter const="false" type="Qt::KeyboardModifiers" modifier="" name="modifiers" default="Qt::NoModifier" />
        </parameters>
      </variant>
    </function>
    <function name="getAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAngles">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="&amp;" name="ang1" />
          <parameter const="false" type="double" modifier="&amp;" name="ang2" />
          <parameter const="false" type="bool" modifier="&amp;" name="reversed" />
          <parameter const="false" type="RVector" modifier="&amp;" name="p1" />
          <parameter const="false" type="RVector" modifier="&amp;" name="p2" />
        </parameters>
      </variant>
    </function>
    <function name="getCenter">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMeasuredValue">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAutoLabel">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDimensionArc">
      <variant return-type="RArc" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RDimAngularEntity" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
      <super name="REntity" />
      <super name="RDimensionEntity" />
    </super_list>
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyProtected" />
    <property static="true" type="RPropertyTypeId" name="PropertyWorkingSet" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyLayer" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetype" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetypeScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineweight" />
    <property static="true" type="RPropertyTypeId" name="PropertyColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDisplayedColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDrawOrder" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddleOfTextX" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddleOfTextY" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddleOfTextZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyText" />
    <property static="true" type="RPropertyTypeId" name="PropertyUpperTolerance" />
    <property static="true" type="RPropertyTypeId" name="PropertyLowerTolerance" />
    <property static="true" type="RPropertyTypeId" name="PropertyMeasuredValue" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimscale" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtxt" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimgap" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimasz" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimexe" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimexo" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtad" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtih" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtsz" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimdsep" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimaunit" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimadec" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimazin" />
    <property static="true" type="RPropertyTypeId" name="PropertyArchTick" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimclrt" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimBlockName" />
    <property static="true" type="RPropertyTypeId" name="PropertyAutoTextPos" />
    <property static="true" type="RPropertyTypeId" name="PropertyFontName" />
    <property static="true" type="RPropertyTypeId" name="PropertyArrow1Flipped" />
    <property static="true" type="RPropertyTypeId" name="PropertyArrow2Flipped" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtLineFix" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtLineFixLength" />
    <property static="true" type="RPropertyTypeId" name="PropertyCenterX" />
    <property static="true" type="RPropertyTypeId" name="PropertyCenterY" />
    <property static="true" type="RPropertyTypeId" name="PropertyCenterZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionLine1EndX" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionLine1EndY" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionLine1EndZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionLine2EndX" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionLine2EndY" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionLine2EndZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimArcPositionX" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimArcPositionY" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimArcPositionZ" />
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getData">
      <variant return-type="RDimAngularData&amp;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setExtensionLine1End">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getExtensionLine1End">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setExtensionLine2End">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getExtensionLine2End">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimArcPosition">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getDimArcPosition">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDimensionArc">
      <variant return-type="RArc" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="print" />
  </class>
  <class name="RDimArcLengthData">
    <super_list>
      <super name="REntityData" />
      <super name="RDimensionData" />
      <super name="RDimAngularData" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RDimensionData" modifier="&amp;" name="dimData" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
          <parameter const="true" type="RVector" modifier="&amp;" name="extensionLine1End" />
          <parameter const="true" type="RVector" modifier="&amp;" name="extensionLine2End" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isSane">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCenter">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCenter">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getRadius">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setExtensionLine1End">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getExtensionLine1End">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setExtensionLine2End">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getExtensionLine2End">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimArcPosition">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getDimArcPosition">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setArcSymbolType">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="t" />
        </parameters>
      </variant>
    </function>
    <function name="getArcSymbolType">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getReferencePoints">
      <variant return-type="QList&lt;RRefPoint&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="hint" default="RS::RenderTop" />
        </parameters>
      </variant>
    </function>
    <function name="moveReferencePoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="targetPoint" />
          <parameter const="false" type="Qt::KeyboardModifiers" modifier="" name="modifiers" default="Qt::NoModifier" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="getAngles">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="&amp;" name="ang1" />
          <parameter const="false" type="double" modifier="&amp;" name="ang2" />
          <parameter const="false" type="bool" modifier="&amp;" name="reversed" />
          <parameter const="false" type="RVector" modifier="&amp;" name="p1" />
          <parameter const="false" type="RVector" modifier="&amp;" name="p2" />
        </parameters>
      </variant>
    </function>
    <function name="getMeasuredValue">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAutoLabel">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMeasurement">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="resolveAutoMeasurement" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="to2D">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RDimArcLengthEntity" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
      <super name="REntity" />
      <super name="RDimensionEntity" />
      <super name="RDimAngularEntity" />
    </super_list>
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyProtected" />
    <property static="true" type="RPropertyTypeId" name="PropertyWorkingSet" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyLayer" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetype" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetypeScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineweight" />
    <property static="true" type="RPropertyTypeId" name="PropertyColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDisplayedColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDrawOrder" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddleOfTextX" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddleOfTextY" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddleOfTextZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyText" />
    <property static="true" type="RPropertyTypeId" name="PropertyUpperTolerance" />
    <property static="true" type="RPropertyTypeId" name="PropertyLowerTolerance" />
    <property static="true" type="RPropertyTypeId" name="PropertyMeasuredValue" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimscale" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimlfac" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtxt" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimgap" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimasz" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimexe" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimexo" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtad" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtih" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtsz" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimlunit" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimdec" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimdsep" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimzin" />
    <property static="true" type="RPropertyTypeId" name="PropertyArchTick" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimclrt" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimBlockName" />
    <property static="true" type="RPropertyTypeId" name="PropertyAutoTextPos" />
    <property static="true" type="RPropertyTypeId" name="PropertyFontName" />
    <property static="true" type="RPropertyTypeId" name="PropertyArrow1Flipped" />
    <property static="true" type="RPropertyTypeId" name="PropertyArrow2Flipped" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtLineFix" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtLineFixLength" />
    <property static="true" type="RPropertyTypeId" name="PropertyCenterX" />
    <property static="true" type="RPropertyTypeId" name="PropertyCenterY" />
    <property static="true" type="RPropertyTypeId" name="PropertyCenterZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionLine1EndX" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionLine1EndY" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionLine1EndZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionLine2EndX" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionLine2EndY" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionLine2EndZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimArcPositionX" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimArcPositionY" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimArcPositionZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimArcSymbolType" />
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="RDimArcLengthData" modifier="&amp;" name="data" />
        </parameters>
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStaticPropertyTypeIds" static="true">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RDimArcLengthEntity*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getData">
      <variant return-type="RDimArcLengthData&amp;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setData">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDimArcLengthData" modifier="&amp;" name="d" />
        </parameters>
      </variant>
    </function>
    <function name="setCenter">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getCenter">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="print" />
  </class>
  <class name="RDimDiametricData">
    <super_list>
      <super name="REntityData" />
      <super name="RDimensionData" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RDimensionData" modifier="&amp;" name="dimData" />
          <parameter const="true" type="RVector" modifier="&amp;" name="choordPoint" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isSane">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setChordPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getChordPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setFarChordPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getFarChordPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getReferencePoints">
      <variant return-type="QList&lt;RRefPoint&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="hint" default="RS::RenderTop" />
        </parameters>
      </variant>
    </function>
    <function name="moveReferencePoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="targetPoint" />
          <parameter const="false" type="Qt::KeyboardModifiers" modifier="" name="modifiers" default="Qt::NoModifier" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="getMeasuredValue">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAutoLabel">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="to2D">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RDimDiametricEntity" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
      <super name="REntity" />
      <super name="RDimensionEntity" />
    </super_list>
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyProtected" />
    <property static="true" type="RPropertyTypeId" name="PropertyWorkingSet" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyLayer" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetype" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetypeScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineweight" />
    <property static="true" type="RPropertyTypeId" name="PropertyColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDisplayedColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDrawOrder" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddleOfTextX" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddleOfTextY" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddleOfTextZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyText" />
    <property static="true" type="RPropertyTypeId" name="PropertyUpperTolerance" />
    <property static="true" type="RPropertyTypeId" name="PropertyLowerTolerance" />
    <property static="true" type="RPropertyTypeId" name="PropertyMeasuredValue" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimscale" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimlfac" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtxt" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimgap" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimasz" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimexe" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimexo" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtad" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtih" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtsz" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimlunit" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimdec" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimdsep" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimzin" />
    <property static="true" type="RPropertyTypeId" name="PropertyArchTick" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimclrt" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimBlockName" />
    <property static="true" type="RPropertyTypeId" name="PropertyAutoTextPos" />
    <property static="true" type="RPropertyTypeId" name="PropertyFontName" />
    <property static="true" type="RPropertyTypeId" name="PropertyArrow1Flipped" />
    <property static="true" type="RPropertyTypeId" name="PropertyArrow2Flipped" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtLineFix" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtLineFixLength" />
    <property static="true" type="RPropertyTypeId" name="PropertyChordPointX" />
    <property static="true" type="RPropertyTypeId" name="PropertyChordPointY" />
    <property static="true" type="RPropertyTypeId" name="PropertyChordPointZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyFarChordPointX" />
    <property static="true" type="RPropertyTypeId" name="PropertyFarChordPointY" />
    <property static="true" type="RPropertyTypeId" name="PropertyFarChordPointZ" />
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="RDimDiametricData" modifier="&amp;" name="data" />
        </parameters>
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStaticPropertyTypeIds" static="true">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RDimDiametricEntity*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getData">
      <variant return-type="RDimDiametricData&amp;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setData">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDimDiametricData" modifier="&amp;" name="d" />
        </parameters>
      </variant>
    </function>
    <function name="setChordPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getChordPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setFarChordPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getFarChordPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="print" />
  </class>
  <class name="RDimLinearData">
    <super_list>
      <super name="REntityData" />
      <super name="RDimensionData" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RDimensionData" modifier="&amp;" name="dimData" />
          <parameter const="true" type="RVector" modifier="&amp;" name="extensionPoint1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="extensionPoint2" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" default="NULL" />
        </parameters>
      </variant>
    </constructor>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isSane">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDefinitionPoint">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="setExtensionPoint1">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getExtensionPoint1">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setExtensionPoint2">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getExtensionPoint2">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="recomputeDefinitionPoint">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="oldExtPoint1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="oldExtPoint2" />
          <parameter const="true" type="RVector" modifier="&amp;" name="newExtPoint1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="newExtPoint2" />
        </parameters>
      </variant>
    </function>
    <function name="moveReferencePoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="targetPoint" />
          <parameter const="false" type="Qt::KeyboardModifiers" modifier="" name="modifiers" default="Qt::NoModifier" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="stretch">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="area" />
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="to2D">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RDimLinearEntity" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
      <super name="REntity" />
      <super name="RDimensionEntity" />
    </super_list>
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyProtected" />
    <property static="true" type="RPropertyTypeId" name="PropertyWorkingSet" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyLayer" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetype" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetypeScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineweight" />
    <property static="true" type="RPropertyTypeId" name="PropertyColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDisplayedColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDrawOrder" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddleOfTextX" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddleOfTextY" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddleOfTextZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyText" />
    <property static="true" type="RPropertyTypeId" name="PropertyUpperTolerance" />
    <property static="true" type="RPropertyTypeId" name="PropertyLowerTolerance" />
    <property static="true" type="RPropertyTypeId" name="PropertyMeasuredValue" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimscale" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimlfac" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtxt" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimgap" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimasz" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimexe" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimexo" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtad" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtih" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtsz" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimlunit" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimdec" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimdsep" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimzin" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimaunit" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimadec" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimazin" />
    <property static="true" type="RPropertyTypeId" name="PropertyArchTick" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimclrt" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimBlockName" />
    <property static="true" type="RPropertyTypeId" name="PropertyAutoTextPos" />
    <property static="true" type="RPropertyTypeId" name="PropertyFontName" />
    <property static="true" type="RPropertyTypeId" name="PropertyArrow1Flipped" />
    <property static="true" type="RPropertyTypeId" name="PropertyArrow2Flipped" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtLineFix" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtLineFixLength" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimensionLinePosX" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimensionLinePosY" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimensionLinePosZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionPoint1X" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionPoint1Y" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionPoint1Z" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionPoint2X" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionPoint2Y" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionPoint2Z" />
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getData">
      <variant return-type="RDimLinearData&amp;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setExtensionPoint1">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getExtensionPoint1">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setExtensionPoint2">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getExtensionPoint2">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="print" />
  </class>
  <class name="RDimOrdinateData">
    <super_list>
      <super name="REntityData" />
      <super name="RDimensionData" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RDimensionData" modifier="&amp;" name="dimData" />
          <parameter const="true" type="RVector" modifier="&amp;" name="leaderEndPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="definingPoint" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isSane">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="ignoreEmpty" />
        </parameters>
      </variant>
    </function>
    <function name="setLeaderEndPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getLeaderEndPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setOrigin">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getOrigin">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDefiningPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getDefiningPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setMeasuringXAxis">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setMeasuringYAxis">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isMeasuringXAxis">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getReferencePoints">
      <variant return-type="QList&lt;RRefPoint&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="hint" default="RS::RenderTop" />
        </parameters>
      </variant>
    </function>
    <function name="moveReferencePoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="targetPoint" />
          <parameter const="false" type="Qt::KeyboardModifiers" modifier="" name="modifiers" default="Qt::NoModifier" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="stretch">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="area" />
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="getMeasuredValue">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAutoLabel">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="to2D">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RDimOrdinateEntity" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
      <super name="REntity" />
      <super name="RDimensionEntity" />
    </super_list>
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyProtected" />
    <property static="true" type="RPropertyTypeId" name="PropertyWorkingSet" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyLayer" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetype" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetypeScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineweight" />
    <property static="true" type="RPropertyTypeId" name="PropertyColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDisplayedColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDrawOrder" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddleOfTextX" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddleOfTextY" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddleOfTextZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyText" />
    <property static="true" type="RPropertyTypeId" name="PropertyUpperTolerance" />
    <property static="true" type="RPropertyTypeId" name="PropertyLowerTolerance" />
    <property static="true" type="RPropertyTypeId" name="PropertyMeasuredValue" />
    <property static="true" type="RPropertyTypeId" name="PropertyFontName" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimscale" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimlfac" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimBlockName" />
    <property static="true" type="RPropertyTypeId" name="PropertyOriginX" />
    <property static="true" type="RPropertyTypeId" name="PropertyOriginY" />
    <property static="true" type="RPropertyTypeId" name="PropertyOriginZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyOrdinate" />
    <property static="true" type="RPropertyTypeId" name="PropertyLeaderEndPointX" />
    <property static="true" type="RPropertyTypeId" name="PropertyLeaderEndPointY" />
    <property static="true" type="RPropertyTypeId" name="PropertyLeaderEndPointZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyDefiningPointX" />
    <property static="true" type="RPropertyTypeId" name="PropertyDefiningPointY" />
    <property static="true" type="RPropertyTypeId" name="PropertyDefiningPointZ" />
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="RDimOrdinateData" modifier="&amp;" name="data" />
        </parameters>
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStaticPropertyTypeIds" static="true">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RDimOrdinateEntity*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getData">
      <variant return-type="RDimOrdinateData&amp;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setData">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDimOrdinateData" modifier="&amp;" name="d" />
        </parameters>
      </variant>
    </function>
    <function name="setLeaderEndPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getLeaderEndPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDefiningPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getDefiningPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setMeasuringXAxis">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setMeasuringYAxis">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isMeasuringXAxis">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="print" />
  </class>
  <class name="RDimRadialData">
    <super_list>
      <super name="REntityData" />
      <super name="RDimensionData" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RDimensionData" modifier="&amp;" name="dimData" />
          <parameter const="true" type="RVector" modifier="&amp;" name="chordPoint" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isSane">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCenter">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getCenter">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setChordPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getChordPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getReferencePoints">
      <variant return-type="QList&lt;RRefPoint&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="hint" default="RS::RenderTop" />
        </parameters>
      </variant>
    </function>
    <function name="moveReferencePoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="targetPoint" />
          <parameter const="false" type="Qt::KeyboardModifiers" modifier="" name="modifiers" default="Qt::NoModifier" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="getMeasuredValue">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAutoLabel">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="to2D">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RDimRadialEntity" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
      <super name="REntity" />
      <super name="RDimensionEntity" />
    </super_list>
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyProtected" />
    <property static="true" type="RPropertyTypeId" name="PropertyWorkingSet" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyLayer" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetype" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetypeScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineweight" />
    <property static="true" type="RPropertyTypeId" name="PropertyColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDisplayedColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDrawOrder" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddleOfTextX" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddleOfTextY" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddleOfTextZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyText" />
    <property static="true" type="RPropertyTypeId" name="PropertyUpperTolerance" />
    <property static="true" type="RPropertyTypeId" name="PropertyLowerTolerance" />
    <property static="true" type="RPropertyTypeId" name="PropertyMeasuredValue" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimscale" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimlfac" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtxt" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimgap" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimasz" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimexe" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimexo" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtad" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtih" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtsz" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimlunit" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimdec" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimdsep" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimzin" />
    <property static="true" type="RPropertyTypeId" name="PropertyArchTick" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimclrt" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimBlockName" />
    <property static="true" type="RPropertyTypeId" name="PropertyAutoTextPos" />
    <property static="true" type="RPropertyTypeId" name="PropertyFontName" />
    <property static="true" type="RPropertyTypeId" name="PropertyArrow1Flipped" />
    <property static="true" type="RPropertyTypeId" name="PropertyArrow2Flipped" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtLineFix" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtLineFixLength" />
    <property static="true" type="RPropertyTypeId" name="PropertyCenterPointX" />
    <property static="true" type="RPropertyTypeId" name="PropertyCenterPointY" />
    <property static="true" type="RPropertyTypeId" name="PropertyCenterPointZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyChordPointX" />
    <property static="true" type="RPropertyTypeId" name="PropertyChordPointY" />
    <property static="true" type="RPropertyTypeId" name="PropertyChordPointZ" />
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="RDimRadialData" modifier="&amp;" name="data" />
        </parameters>
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStaticPropertyTypeIds" static="true">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RDimRadialEntity*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getData">
      <variant return-type="RDimRadialData&amp;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setData">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDimRadialData" modifier="&amp;" name="d" />
        </parameters>
      </variant>
    </function>
    <function name="setChordPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getChordPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="print" />
  </class>
  <class name="RDimRotatedData">
    <super_list>
      <super name="REntityData" />
      <super name="RDimensionData" />
      <super name="RDimLinearData" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RDimensionData" modifier="&amp;" name="dimData" />
          <parameter const="true" type="RVector" modifier="&amp;" name="extensionPoint1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="extensionPoint2" />
          <parameter const="false" type="double" modifier="" name="rotation" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="ignoreEmpty" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isSane">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setRotation">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="r" />
        </parameters>
      </variant>
    </function>
    <function name="getRotation">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getReferencePoints">
      <variant return-type="QList&lt;RRefPoint&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="hint" default="RS::RenderTop" />
        </parameters>
      </variant>
    </function>
    <function name="moveReferencePoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="targetPoint" />
          <parameter const="false" type="Qt::KeyboardModifiers" modifier="" name="modifiers" default="Qt::NoModifier" />
        </parameters>
      </variant>
    </function>
    <function name="getDimPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="recomputeDefinitionPoint">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="oldExtPoint1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="oldExtPoint2" />
          <parameter const="true" type="RVector" modifier="&amp;" name="newExtPoint1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="newExtPoint2" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="getMeasuredValue">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAutoLabel">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RDimRotatedEntity" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
      <super name="REntity" />
      <super name="RDimensionEntity" />
      <super name="RDimLinearEntity" />
    </super_list>
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyProtected" />
    <property static="true" type="RPropertyTypeId" name="PropertyWorkingSet" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyLayer" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetype" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetypeScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineweight" />
    <property static="true" type="RPropertyTypeId" name="PropertyColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDisplayedColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDrawOrder" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddleOfTextX" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddleOfTextY" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddleOfTextZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyText" />
    <property static="true" type="RPropertyTypeId" name="PropertyUpperTolerance" />
    <property static="true" type="RPropertyTypeId" name="PropertyLowerTolerance" />
    <property static="true" type="RPropertyTypeId" name="PropertyMeasuredValue" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimscale" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimlfac" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtxt" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimgap" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimasz" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimexe" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimexo" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtad" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtih" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtsz" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimlunit" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimdec" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimdsep" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimzin" />
    <property static="true" type="RPropertyTypeId" name="PropertyArchTick" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimclrt" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimBlockName" />
    <property static="true" type="RPropertyTypeId" name="PropertyAutoTextPos" />
    <property static="true" type="RPropertyTypeId" name="PropertyFontName" />
    <property static="true" type="RPropertyTypeId" name="PropertyArrow1Flipped" />
    <property static="true" type="RPropertyTypeId" name="PropertyArrow2Flipped" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtLineFix" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtLineFixLength" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimensionLinePosX" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimensionLinePosY" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimensionLinePosZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionPoint1X" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionPoint1Y" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionPoint1Z" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionPoint2X" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionPoint2Y" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtensionPoint2Z" />
    <property static="true" type="RPropertyTypeId" name="PropertyAngle" />
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="RDimRotatedData" modifier="&amp;" name="data" />
        </parameters>
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStaticPropertyTypeIds" static="true">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RDimRotatedEntity*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getData">
      <variant return-type="RDimRotatedData&amp;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setData">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDimRotatedData" modifier="&amp;" name="d" />
        </parameters>
      </variant>
    </function>
    <function name="setExtensionPoint1">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getExtensionPoint1">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setExtensionPoint2">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getExtensionPoint2">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setRotation">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a" />
        </parameters>
      </variant>
    </function>
    <function name="getRotation">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="print" />
  </class>
  <class name="RDimStyle" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
      <super name="RDimStyleData" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="initDimX" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="RS::KnownVariable" modifier="" name="var" />
          <parameter const="false" type="RS::KnownVariableType" modifier="" name="type" />
        </parameters>
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RDimStyle*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="updateDocumentVariables">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="updateFromDocumentVariables">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" />
        </parameters>
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="render">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="REntityData" modifier="&amp;" name="entityData" />
          <parameter const="false" type="bool" modifier="" name="preview" />
          <parameter const="false" type="bool" modifier="" name="forceSelected" />
        </parameters>
      </variant>
    </function>
    -->
    <function name="hasProxy" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <!--
    <function name="setDimStyleProxy" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDimStyleProxy" modifier="*" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getDimStyleProxy" static="true">
      <variant return-type="RDimStyleProxy*" access="public">
        <parameters />
      </variant>
    </function>
    -->
  </class>
  <class name="RDimStyleData">
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="bool" modifier="" name="override" default="false" />
        </parameters>
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="initDefaults" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getVariantDefault" static="true">
      <variant return-type="QVariant" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="getDoubleDefault" static="true">
      <variant return-type="double" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="getIntDefault" static="true">
      <variant return-type="int" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="getBoolDefault" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="getColorDefault" static="true">
      <variant return-type="RColor" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="initFromSettings">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasOverride">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clear">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getVariableType" static="true">
      <variant return-type="RS::KnownVariableType" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="getVariant">
      <variant return-type="QVariant" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="setVariant">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="val" />
        </parameters>
      </variant>
    </function>
    <function name="getDouble">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="setDouble">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
          <parameter const="false" type="double" modifier="" name="val" />
        </parameters>
      </variant>
    </function>
    <function name="removeDouble">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="getInt">
      <variant return-type="int" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="setInt">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
          <parameter const="false" type="int" modifier="" name="val" />
        </parameters>
      </variant>
    </function>
    <function name="removeInt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="getBool">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="setBool">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
          <parameter const="false" type="bool" modifier="" name="val" />
        </parameters>
      </variant>
    </function>
    <function name="removeBool">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="getColor">
      <variant return-type="RColor" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="setColor">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
          <parameter const="true" type="RColor" modifier="&amp;" name="val" />
        </parameters>
      </variant>
    </function>
    <function name="removeColor">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RDimensionData" ownership="cpp">
    <super_list>
      <super name="REntityData" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="definitionPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="textPositionCenter" />
          <parameter const="false" type="RS::VAlign" modifier="" name="valign" />
          <parameter const="false" type="RS::HAlign" modifier="" name="halign" />
          <parameter const="false" type="RS::TextLineSpacingStyle" modifier="" name="lineSpacingStyle" />
          <parameter const="false" type="double" modifier="" name="lineSpacingFactor" />
          <parameter const="true" type="QString" modifier="&amp;" name="text" />
          <parameter const="true" type="QString" modifier="&amp;" name="fontName" />
          <parameter const="false" type="double" modifier="" name="textAngle" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" default="NULL" />
        </parameters>
      </variant>
    </constructor>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="ignoreEmpty" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="render">
      <variant return-type="void" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="updateBoundingBox">
      <variant return-type="void" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="box" />
        </parameters>
      </variant>
    </function>
    <function name="updateTextPositionCenter">
      <variant return-type="void" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="updateTextPositionSide">
      <variant return-type="void" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="updateTextData">
      <variant return-type="void" const="true" access="public">
        <parameters>
          <parameter const="true" type="RTextData" modifier="&amp;" name="d" />
        </parameters>
      </variant>
    </function>
    <function name="updateShapes">
      <variant return-type="void" const="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" modifier="&amp;" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="updateArrowPos1">
      <variant return-type="void" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="updateArrowPos2">
      <variant return-type="void" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="clearStyleOverrides">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getShapes">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="false" />
          <parameter const="false" type="bool" modifier="" name="segment" default="false" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="entityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getPointOnEntity">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isSane">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDefinitionPoint">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getDefinitionPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setText">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="t" />
        </parameters>
      </variant>
    </function>
    <function name="getText">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setUpperTolerance">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="t" />
        </parameters>
      </variant>
    </function>
    <function name="setLowerTolerance">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="t" />
        </parameters>
      </variant>
    </function>
    <function name="setTextPosition">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getTextPosition">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setFontName">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fn" />
        </parameters>
      </variant>
    </function>
    <function name="getFontName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimBlockName">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="bn" />
        </parameters>
      </variant>
    </function>
    <function name="getDimBlockName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasOverrides">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasOverride">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="getOverrides">
      <variant return-type="RDimStyleData" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimXVariant">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="setDimXDouble">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
          <parameter const="false" type="double" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="setDimXInt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
          <parameter const="false" type="int" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="setDimXBool">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
          <parameter const="false" type="bool" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="setDimXColor">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
          <parameter const="true" type="RColor" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getDimXVariant">
      <variant return-type="QVariant" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="getVariantOverride">
      <variant return-type="QVariant" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="getDimXDouble">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="getDoubleOverride">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="getDimXInt">
      <variant return-type="int" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="getIntOverride">
      <variant return-type="int" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="getDimXBool">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="getBoolOverride">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="getDimXColor">
      <variant return-type="RColor" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="getColorOverride">
      <variant return-type="RColor" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="getDimlfac">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimlfac">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="f" />
        </parameters>
      </variant>
    </function>
    <function name="getLinearFactor">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLinearFactor">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="f" />
        </parameters>
      </variant>
    </function>
    <function name="getDimscale">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimscale">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="f" />
        </parameters>
      </variant>
    </function>
    <function name="isArrow1Flipped">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setArrow1Flipped">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isArrow2Flipped">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setArrow2Flipped">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isExtLineFix">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setExtLineFix">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getExtLineFixLength">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setExtLineFixLength">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="adjustExtensionLineFixLength">
      <variant return-type="void" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLine" modifier="&amp;" name="extLine1" />
          <parameter const="false" type="RLine" modifier="&amp;" name="extLine2" />
          <parameter const="false" type="bool" modifier="" name="addDimExe" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="hasSpaceForArrows">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDistanceTo">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="range" default="0.0" />
          <parameter const="false" type="bool" modifier="" name="draft" default="false" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="intersectsWith">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
        </parameters>
      </variant>
    </function>
    <function name="getReferencePoints">
      <variant return-type="QList&lt;RRefPoint&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="hint" default="RS::RenderTop" />
        </parameters>
      </variant>
    </function>
    <function name="clickReferencePoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
        </parameters>
      </variant>
    </function>
    <function name="moveReferencePoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="targetPoint" />
          <parameter const="false" type="Qt::KeyboardModifiers" modifier="" name="modifiers" default="Qt::NoModifier" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
    </function>
    <function name="scaleVisualProperties">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="scaleFactor" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="getDimexo">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimexo">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getDimexe">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimexe">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getDimasz">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimasz">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getDimdli">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimdli">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getDimgap">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimgap">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getDimtxt">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimtxt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="t" />
        </parameters>
      </variant>
    </function>
    <function name="getDimlunit">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimlunit">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="getDimjust">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDimtad">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimtad">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getDimtih">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimtih">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getDimtsz">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimtsz">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="t" />
        </parameters>
      </variant>
    </function>
    <function name="getDimzin">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimzin">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getDimaunit">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimaunit">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getDimadec">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimadec">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getDimdec">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimdec">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getDimazin">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimazin">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getDimdsep">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimdsep">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getDimclrt">
      <variant return-type="RColor" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimclrt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RColor" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="useArchTick">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDimblk">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDimblkName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isDimXScaled">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="var" />
        </parameters>
      </variant>
    </function>
    <function name="hasCustomTextPosition">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCustomTextPosition">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getLineSpacingStyle">
      <variant return-type="RS::TextLineSpacingStyle" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLineSpacingFactor">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTextAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTextData">
      <variant return-type="RTextData&amp;" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="noRender" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="initTextData">
      <variant return-type="RTextData&amp;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMeasurement">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="resolveAutoMeasurement" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getMeasuredValue">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAutoLabel">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="formatLabel">
      <variant return-type="QString" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
        </parameters>
      </variant>
    </function>
    <function name="formatAngleLabel">
      <variant return-type="QString" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="textAngle" />
        </parameters>
      </variant>
    </function>
    <function name="update">
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDimensionBlockReference">
      <variant return-type="QSharedPointer&lt;RBlockReferenceEntity&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasDimensionBlockReference">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="to2D">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RDimensionEntity" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
      <super name="REntity" />
    </super_list>
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyProtected" />
    <property static="true" type="RPropertyTypeId" name="PropertyWorkingSet" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyLayer" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetype" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetypeScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineweight" />
    <property static="true" type="RPropertyTypeId" name="PropertyColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDisplayedColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDrawOrder" />
    <property static="true" type="RPropertyTypeId" name="PropertyDefinitionPointX" />
    <property static="true" type="RPropertyTypeId" name="PropertyDefinitionPointY" />
    <property static="true" type="RPropertyTypeId" name="PropertyDefinitionPointZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddleOfTextX" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddleOfTextY" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddleOfTextZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyText" />
    <property static="true" type="RPropertyTypeId" name="PropertyUpperTolerance" />
    <property static="true" type="RPropertyTypeId" name="PropertyLowerTolerance" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimBlockName" />
    <property static="true" type="RPropertyTypeId" name="PropertyAutoTextPos" />
    <property static="true" type="RPropertyTypeId" name="PropertyFontName" />
    <property static="true" type="RPropertyTypeId" name="PropertyArrow1Flipped" />
    <property static="true" type="RPropertyTypeId" name="PropertyArrow2Flipped" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtLineFix" />
    <property static="true" type="RPropertyTypeId" name="PropertyExtLineFixLength" />
    <property static="true" type="RPropertyTypeId" name="PropertyAutoLabel" />
    <property static="true" type="RPropertyTypeId" name="PropertyMeasuredValue" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimscale" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimlfac" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtxt" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimgap" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimasz" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimexe" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimexo" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtad" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtih" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtsz" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimlunit" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimdec" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimdsep" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimzin" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimaunit" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimadec" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimazin" />
    <property static="true" type="RPropertyTypeId" name="PropertyArchTick" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimclrt" />
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStaticPropertyTypeIds" static="true">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="exportEntity">
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RExporter" modifier="&amp;" name="e" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
          <parameter const="false" type="bool" modifier="" name="forceSelected" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="renderDimensionText" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RExporter" modifier="&amp;" name="e" />
          <parameter const="true" type="RDocument" modifier="*" name="doc" />
          <parameter const="false" type="RTextData" modifier="&amp;" name="textData" />
          <parameter const="false" type="bool" modifier="" name="isSelected" default="false" />
          <parameter const="false" type="bool" modifier="" name="forceSelected" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getData">
      <variant return-type="RDimensionData&amp;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clearStyleOverrides">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDefinitionPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getDefinitionPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setText">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="t" />
        </parameters>
      </variant>
    </function>
    <function name="getText">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMeasurement">
      <variant return-type="QString" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="resolveAutoMeasurement" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getTextData">
      <variant return-type="RTextData" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="updateBoundingBox">
      <variant return-type="void" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="b" />
        </parameters>
      </variant>
    </function>
    <function name="updateTextPositionCenter">
      <variant return-type="void" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="updateTextData">
      <variant return-type="void" const="true" access="public">
        <parameters>
          <parameter const="true" type="RTextData" modifier="&amp;" name="d" />
        </parameters>
      </variant>
    </function>
    <function name="updateShapes">
      <variant return-type="void" const="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" modifier="&amp;" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="setTextPosition">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getTextPosition">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setFontName">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fn" />
        </parameters>
      </variant>
    </function>
    <function name="getFontName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasCustomTextPosition">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCustomTextPosition">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getLineSpacingStyle">
      <variant return-type="RS::TextLineSpacingStyle" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLineSpacingFactor">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTextAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLinearFactor">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLinearFactor">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="f" />
        </parameters>
      </variant>
    </function>
    <function name="getDimscale">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimscale">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="f" />
        </parameters>
      </variant>
    </function>
    <function name="getDimBlockName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasDimensionBlockReference">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isArrow1Flipped">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setArrow1Flipped">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isArrow2Flipped">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setArrow2Flipped">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isExtLineFix">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setExtLineFix">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getExtLineFixLength">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setExtLineFixLength">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="hasOverride">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="getDimensionBlockNames" static="true">
      <variant return-type="QSet&lt;QString&gt;" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="doc" />
        </parameters>
      </variant>
    </function>
    <function name="print" />
  </class>
  <class name="RDirected" ownership="cpp" />
  <class name="RDockWidget" ownership="cpp">
    <super_list>
      <super name="QObject" />
      <super name="QWidget" />
      <super name="QDockWidget" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="title" />
          <parameter const="false" type="QWidget" modifier="*" name="parent" default="NULL" />
          <parameter const="false" type="Qt::WindowFlags" modifier="" name="flags" default="RDEFAULT_QT_WINDOWFLAGS" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="false" type="QWidget" modifier="*" name="parent" default="NULL" />
          <parameter const="false" type="Qt::WindowFlags" modifier="" name="flags" default="RDEFAULT_QT_WINDOWFLAGS" />
        </parameters>
      </variant>
    </constructor>
    <function name="shown">
      <variant return-type="void" access="public" signal="true">
        <parameters />
      </variant>
    </function>
    <function name="hidden">
      <variant return-type="void" access="public" signal="true">
        <parameters />
      </variant>
    </function>
    <function name="showEvent" />
    <function name="hideEvent" />
    <preproc plain="#ifdef Q_OS_MAC" />
    <preproc plain="#if (QT_VERSION&gt;=0x050601&amp;&amp;QT_VERSION&lt;=0x050602)||QT_VERSION&gt;=0x050F00" />
    <function name="closeEvent" />
    <preproc plain="#endif" />
    <preproc plain="#endif" />
    <function name="actionEvent" />
    <function name="event" />
  </class>
  <class name="RDocument" ownership="cpp">
    <!--
    <super_list>
      <super name="RRequireHeap" />
      <super name="RNonCopyable" />
    </super_list>
    -->
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RStorage" modifier="&amp;" name="storage" />
          <parameter const="false" type="RSpatialIndex" modifier="&amp;" name="spatialIndex" />
        </parameters>
      </variant>
    </constructor>
    <function name="init">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="beforeLoad" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="initLinetypes">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getDefaultLinetypes">
      <variant return-type="QList&lt;QSharedPointer&lt;RObject&gt;&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStorage">
      <variant return-type="RStorage&amp;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSpatialIndex">
      <variant return-type="RSpatialIndex&amp;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSpatialIndexForBlock">
      <variant return-type="RSpatialIndex*" const="true" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
    </function>
    <function name="getSpatialIndexForCurrentBlock">
      <variant return-type="RSpatialIndex*" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTransactionStack">
      <variant return-type="RTransactionStack&amp;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clear">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="beforeLoad" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="queryClosestXY">
      <variant return-type="REntity::Id" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="wcsPosition" />
          <parameter const="false" type="double" modifier="" name="range" />
          <parameter const="false" type="bool" modifier="" name="draft" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
          <parameter const="false" type="bool" modifier="" name="includeLockedLayers" default="true" />
          <parameter const="false" type="bool" modifier="" name="selectedOnly" default="false" />
        </parameters>
      </variant>
      <variant return-type="REntity::Id" access="public">
        <parameters>
          <parameter const="false" type="QSet&lt;REntity::Id&gt;" modifier="&amp;" name="candidates" />
          <parameter const="true" type="RVector" modifier="&amp;" name="wcsPosition" />
          <parameter const="false" type="double" modifier="" name="range" />
          <parameter const="false" type="bool" modifier="" name="draft" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="queryClosestXYWithIndices">
      <variant return-type="QPair&lt;REntity::Id,QSet&lt;int&gt;&gt;" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="wcsPosition" />
          <parameter const="false" type="double" modifier="" name="range" />
          <parameter const="false" type="bool" modifier="" name="draft" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
          <parameter const="false" type="bool" modifier="" name="includeLockedLayers" default="true" />
          <parameter const="false" type="bool" modifier="" name="selectedOnly" default="false" />
        </parameters>
      </variant>
      <variant return-type="QPair&lt;REntity::Id,QSet&lt;int&gt;&gt;" access="public">
        <parameters>
          <parameter const="false" type="QMap&lt;REntity::Id,QSet&lt;int&gt;&gt;" modifier="&amp;" name="candidates" />
          <parameter const="true" type="RVector" modifier="&amp;" name="wcsPosition" />
          <parameter const="false" type="double" modifier="" name="range" />
          <parameter const="false" type="bool" modifier="" name="draft" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    -->
    <function name="queryAllObjects">
      <variant return-type="QSet&lt;RObject::Id&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="querySelectedLayers">
      <variant return-type="QSet&lt;RObject::Id&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryAllVisibleEntities">
      <variant return-type="QSet&lt;REntity::Id&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryAllEntities">
      <variant return-type="QSet&lt;REntity::Id&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="undone" default="false" />
          <parameter const="false" type="bool" modifier="" name="allBlocks" default="false" />
          <parameter const="false" type="RS::EntityType" modifier="" name="type" default="RS::EntityAll" />
        </parameters>
      </variant>
      <variant return-type="QSet&lt;REntity::Id&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="undone" />
          <parameter const="false" type="bool" modifier="" name="allBlocks" />
          <parameter const="false" type="QList&lt;RS::EntityType&gt;" modifier="" name="types" />
        </parameters>
      </variant>
    </function>
    <function name="queryWorkingSetEntities">
      <variant return-type="QSet&lt;REntity::Id&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryAllUcs">
      <variant return-type="QSet&lt;RUcs::Id&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryAllLayers">
      <variant return-type="QSet&lt;RLayer::Id&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryAllLayerStates">
      <variant return-type="QSet&lt;RLayerState::Id&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryAllBlocks">
      <variant return-type="QSet&lt;RBlock::Id&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryAllLayoutBlocks">
      <variant return-type="QSet&lt;RBlock::Id&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="includeModelSpace" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="queryAllLayouts">
      <variant return-type="QSet&lt;RBlock::Id&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryAllViews">
      <variant return-type="QSet&lt;RView::Id&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryAllLinetypes">
      <variant return-type="QSet&lt;RLinetype::Id&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryLayerEntities">
      <variant return-type="QSet&lt;REntity::Id&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
          <parameter const="false" type="bool" modifier="" name="allBlocks" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="querySelectedLayerEntities">
      <variant return-type="QSet&lt;REntity::Id&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
          <parameter const="false" type="bool" modifier="" name="allBlocks" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="hasBlockEntities">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
    </function>
    <function name="queryBlockEntities">
      <variant return-type="QSet&lt;REntity::Id&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
    </function>
    <function name="queryLayerBlockEntities">
      <variant return-type="QSet&lt;REntity::Id&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
    </function>
    <function name="queryChildEntities">
      <variant return-type="QSet&lt;REntity::Id&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="parentId" />
          <parameter const="false" type="RS::EntityType" modifier="" name="type" default="RS::EntityAll" />
        </parameters>
      </variant>
    </function>
    <function name="hasChildEntities">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="parentId" />
        </parameters>
      </variant>
    </function>
    <function name="queryBlockReferences">
      <variant return-type="QSet&lt;REntity::Id&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
    </function>
    <function name="queryAllBlockReferences">
      <variant return-type="QSet&lt;REntity::Id&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryAllViewports">
      <variant return-type="QSet&lt;REntity::Id&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryContainedEntities">
      <variant return-type="QSet&lt;REntity::Id&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="box" />
        </parameters>
      </variant>
    </function>
    <function name="queryInfiniteEntities">
      <variant return-type="QSet&lt;REntity::Id&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryIntersectedEntitiesXYFast">
      <variant return-type="QSet&lt;REntity::Id&gt;" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="box" />
        </parameters>
      </variant>
    </function>
    <function name="queryIntersectedShapesXYFast">
      <variant return-type="QSet&lt;REntity::Id&gt;" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="box" />
          <parameter const="false" type="bool" modifier="" name="noInfiniteEntities" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="queryIntersectedEntitiesXY">
      <variant return-type="QSet&lt;REntity::Id&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="box" />
          <parameter const="false" type="bool" modifier="" name="checkBoundingBoxOnly" default="false" />
          <parameter const="false" type="bool" modifier="" name="includeLockedLayers" default="true" />
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" default="RBlock::INVALID_ID" />
          <parameter const="true" type="QList&lt;RS::EntityType&gt;" modifier="&amp;" name="filter" default="RDEFAULT_QLIST_RS_ENTITYTYPE" />
          <parameter const="false" type="bool" modifier="" name="selectedOnly" default="false" />
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" default="RLayer::INVALID_ID" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="queryIntersectedEntitiesXYWithIndex">
      <variant return-type="QMap&lt;REntity::Id,QSet&lt;int&gt;&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="box" />
          <parameter const="false" type="bool" modifier="" name="checkBoundingBoxOnly" default="false" />
          <parameter const="false" type="bool" modifier="" name="includeLockedLayers" default="true" />
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" default="RBlock::INVALID_ID" />
          <parameter const="true" type="QList&lt;RS::EntityType&gt;" modifier="&amp;" name="filter"
          default="RDEFAULT_QLIST_RS_ENTITYTYPE" />
          <parameter const="false" type="bool" modifier="" name="selectedOnly" default="false" />
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" default="RLayer::INVALID_ID" />
        </parameters>
      </variant>
    </function>
    <function name="queryIntersectedShapesXY">
      <variant return-type="QMap&lt;REntity::Id,QSet&lt;int&gt;&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="box" />
          <parameter const="false" type="bool" modifier="" name="checkBoundingBoxOnly" default="false" />
          <parameter const="false" type="bool" modifier="" name="includeLockedLayers" default="true" />
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" default="RBlock::INVALID_ID" />
          <parameter const="true" type="QList&lt;RS::EntityType&gt;" modifier="&amp;" name="filter"
          default="RDEFAULT_QLIST_RS_ENTITYTYPE" />
          <parameter const="false" type="bool" modifier="" name="selectedOnly" default="false" />
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" default="RLayer::INVALID_ID" />
        </parameters>
      </variant>
    </function>
    -->
    <function name="queryContainedEntitiesXY">
      <variant return-type="QSet&lt;REntity::Id&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="box" />
        </parameters>
      </variant>
    </function>
    <function name="querySelectedEntities">
      <variant return-type="QSet&lt;REntity::Id&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryConnectedEntities">
      <variant return-type="QSet&lt;REntity::Id&gt;" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::PointTolerance" />
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" default="RLayer::INVALID_ID" />
        </parameters>
      </variant>
    </function>
    <function name="queryPropertyEditorObjects">
      <variant return-type="QSet&lt;RObject::Id&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryDocumentVariables">
      <variant return-type="QSharedPointer&lt;RDocumentVariables&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryDocumentVariablesDirect">
      <variant return-type="QSharedPointer&lt;RDocumentVariables&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryDimStyle">
      <variant return-type="QSharedPointer&lt;RDimStyle&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryDimStyleDirect">
      <variant return-type="QSharedPointer&lt;RDimStyle&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryObject">
      <variant return-type="QSharedPointer&lt;RObject&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="RObject::Id" modifier="" name="objectId" />
        </parameters>
      </variant>
    </function>
    <function name="queryObjectDirect">
      <variant return-type="QSharedPointer&lt;RObject&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="RObject::Id" modifier="" name="objectId" />
        </parameters>
      </variant>
    </function>
    <function name="queryObjectCC">
      <variant return-type="RObject*" const="true" access="public">
        <parameters>
          <parameter const="false" type="RObject::Id" modifier="" name="objectId" />
        </parameters>
      </variant>
    </function>
    <function name="queryObjectByHandle">
      <variant return-type="QSharedPointer&lt;RObject&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="RObject::Handle" modifier="" name="objectHandle" />
        </parameters>
      </variant>
    </function>
    <function name="queryEntity">
      <variant return-type="QSharedPointer&lt;REntity&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
        </parameters>
      </variant>
    </function>
    <function name="queryEntityDirect">
      <variant return-type="QSharedPointer&lt;REntity&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
        </parameters>
      </variant>
    </function>
    <function name="queryVisibleEntityDirect">
      <variant return-type="QSharedPointer&lt;REntity&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
        </parameters>
      </variant>
    </function>
    <function name="queryUcs">
      <variant return-type="QSharedPointer&lt;RUcs&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="RUcs::Id" modifier="" name="ucsId" />
        </parameters>
      </variant>
      <variant return-type="QSharedPointer&lt;RUcs&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="ucsName" />
        </parameters>
      </variant>
    </function>
    <function name="queryLayer">
      <variant return-type="QSharedPointer&lt;RLayer&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
        </parameters>
      </variant>
      <variant return-type="QSharedPointer&lt;RLayer&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layerName" />
        </parameters>
      </variant>
    </function>
    <function name="queryLayerDirect">
      <variant return-type="QSharedPointer&lt;RLayer&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
        </parameters>
      </variant>
    </function>
    <function name="queryLayerState">
      <variant return-type="QSharedPointer&lt;RLayerState&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayerState::Id" modifier="" name="layerStateId" />
        </parameters>
      </variant>
      <variant return-type="QSharedPointer&lt;RLayerState&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layerStateName" />
        </parameters>
      </variant>
    </function>
    <function name="queryLayerStateDirect">
      <variant return-type="QSharedPointer&lt;RLayerState&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayerState::Id" modifier="" name="layerStateId" />
        </parameters>
      </variant>
    </function>
    <function name="queryLayout">
      <variant return-type="QSharedPointer&lt;RLayout&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayout::Id" modifier="" name="layoutId" />
        </parameters>
      </variant>
      <variant return-type="QSharedPointer&lt;RLayout&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layoutName" />
        </parameters>
      </variant>
    </function>
    <function name="queryLayoutDirect">
      <variant return-type="QSharedPointer&lt;RLayout&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayout::Id" modifier="" name="layoutId" />
        </parameters>
      </variant>
    </function>
    <function name="queryBlock">
      <variant return-type="QSharedPointer&lt;RBlock&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
      <variant return-type="QSharedPointer&lt;RBlock&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="blockName" />
        </parameters>
      </variant>
    </function>
    <function name="queryBlockDirect">
      <variant return-type="QSharedPointer&lt;RBlock&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
      <variant return-type="QSharedPointer&lt;RBlock&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="blockName" />
        </parameters>
      </variant>
    </function>
    <function name="queryView">
      <variant return-type="QSharedPointer&lt;RView&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="RView::Id" modifier="" name="viewId" />
        </parameters>
      </variant>
      <variant return-type="QSharedPointer&lt;RView&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="viewName" />
        </parameters>
      </variant>
    </function>
    <function name="queryLinetype">
      <variant return-type="QSharedPointer&lt;RLinetype&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLinetype::Id" modifier="" name="linetypeId" />
        </parameters>
      </variant>
      <variant return-type="QSharedPointer&lt;RLinetype&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="linetypeName" />
        </parameters>
      </variant>
    </function>
    <function name="countSelectedEntities">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clearSelection">
      <variant return-type="void" access="public">
        <parameters>
          <!--
          <parameter const="false" type="QSet&lt;REntity::Id&gt;" modifier="*" name="affectedEntities" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="selectAllEntities">
      <variant return-type="void" access="public">
        <parameters>
          <!--
          <parameter const="false" type="QSet&lt;REntity::Id&gt;" modifier="*" name="affectedEntities" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="selectEntity">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
          <parameter const="false" type="bool" modifier="" name="add" default="false" />
          <!--
          <parameter const="false" type="QSet&lt;REntity::Id&gt;" modifier="*" name="affectedEntities" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="deselectEntity">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
          <!--
          <parameter const="false" type="QSet&lt;REntity::Id&gt;" modifier="*" name="affectedEntities" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="selectEntities">
      <variant return-type="int" access="public">
        <parameters>
          <parameter const="true" type="QSet&lt;REntity::Id&gt;" modifier="&amp;" name="entityId" />
          <parameter const="false" type="bool" modifier="" name="add" default="false" />
          <!--
          <parameter const="false" type="QSet&lt;REntity::Id&gt;" modifier="*" name="affectedEntities" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="deselectEntities">
      <variant return-type="int" access="public">
        <parameters>
          <parameter const="true" type="QSet&lt;REntity::Id&gt;" modifier="&amp;" name="entityId" />
          <!--
          <parameter const="false" type="QSet&lt;REntity::Id&gt;" modifier="*" name="affectedEntities" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="isSelected">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
        </parameters>
      </variant>
    </function>
    <function name="isSelectedWorkingSet">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
        </parameters>
      </variant>
    </function>
    <function name="isLayerLocked">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
        </parameters>
      </variant>
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RLayer" modifier="&amp;" name="layer" />
        </parameters>
      </variant>
    </function>
    <function name="isParentLayerLocked">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
        </parameters>
      </variant>
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RLayer" modifier="&amp;" name="layer" />
        </parameters>
      </variant>
    </function>
    <function name="isEntity">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="RObject::Id" modifier="" name="objectId" />
        </parameters>
      </variant>
    </function>
    <function name="isEntityEditable">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
        </parameters>
      </variant>
    </function>
    <function name="isLayerOff">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
        </parameters>
      </variant>
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RLayer" modifier="&amp;" name="layer" />
        </parameters>
      </variant>
    </function>
    <function name="isLayerOffOrFrozen">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
        </parameters>
      </variant>
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RLayer" modifier="&amp;" name="layer" />
        </parameters>
      </variant>
    </function>
    <function name="isLayerFrozen">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
        </parameters>
      </variant>
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RLayer" modifier="&amp;" name="layer" />
        </parameters>
      </variant>
    </function>
    <function name="isLayerPlottable">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
        </parameters>
      </variant>
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RLayer" modifier="&amp;" name="layer" />
        </parameters>
      </variant>
    </function>
    <function name="isLayerSnappable">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
        </parameters>
      </variant>
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RLayer" modifier="&amp;" name="layer" />
        </parameters>
      </variant>
    </function>
    <function name="isParentLayerFrozen">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
        </parameters>
      </variant>
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RLayer" modifier="&amp;" name="layer" />
        </parameters>
      </variant>
    </function>
    <function name="isBlockFrozen">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
    </function>
    <function name="isLayoutBlock">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
    </function>
    <function name="isEntityLayerFrozen">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
        </parameters>
      </variant>
    </function>
    <function name="isEntityVisible">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="REntity" modifier="&amp;" name="entity" />
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" default="RBlock::INVALID_ID" />
        </parameters>
      </variant>
    </function>
    <function name="isParentLayerSnappable">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
        </parameters>
      </variant>
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RLayer" modifier="&amp;" name="layer" />
        </parameters>
      </variant>
    </function>
    <function name="isParentLayerPlottable">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
        </parameters>
      </variant>
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RLayer" modifier="&amp;" name="layer" />
        </parameters>
      </variant>
    </function>
    <function name="hasSelection">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="ignoreHiddenLayers" default="true" />
          <parameter const="false" type="bool" modifier="" name="ignoreEmpty" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getSelectionBox">
      <variant return-type="RBox" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEntitiesBox">
      <variant return-type="RBox" const="true" access="public">
        <parameters>
          <parameter const="false" type="QSet&lt;REntity::Id&gt;" modifier="&amp;" name="ids" />
        </parameters>
      </variant>
    </function>
    <function name="clearSpatialIndices">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="rebuildSpatialIndex">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="addToSpatialIndex">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;REntity&gt;" modifier="" name="entity" />
        </parameters>
      </variant>
    </function>
    <function name="blockContainsReferences">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
          <parameter const="false" type="RBlock::Id" modifier="" name="referencedBlockId" />
        </parameters>
      </variant>
    </function>
    <function name="removeBlockFromSpatialIndex">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
    </function>
    <function name="addBlockToSpatialIndex">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
          <parameter const="false" type="RObject::Id" modifier="" name="ignoreBlockId" />
        </parameters>
      </variant>
    </function>
    <function name="removeFromSpatialIndex">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;REntity&gt;" modifier="" name="entity" />
          <parameter const="true" type="QList&lt;RBox&gt;" modifier="&amp;" name="boundingBoxes" default="RDEFAULT_QLIST_RBOX" />
        </parameters>
      </variant>
    </function>
    <function name="updateAllEntities">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="undo">
      <variant return-type="QList&lt;RTransaction&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="redo">
      <variant return-type="QList&lt;RTransaction&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isUndoAvailable">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isRedoAvailable">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="startTransactionGroup">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTransactionGroup">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setAutoTransactionGroup">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getAutoTransactionGroup">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="resetTransactionStack">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setFileName">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fn" />
        </parameters>
      </variant>
    </function>
    <function name="getFileName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setFileVersion">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fv" />
        </parameters>
      </variant>
    </function>
    <function name="getFileVersion">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryCurrentLayer">
      <variant return-type="QSharedPointer&lt;RLayer&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCurrentLayer">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layerName" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getCurrentLayerId">
      <variant return-type="RLayer::Id" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCurrentLayerName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCurrentColor">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RColor" modifier="&amp;" name="color" />
        </parameters>
      </variant>
    </function>
    <function name="getCurrentColor">
      <variant return-type="RColor" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCurrentLineweight">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RLineweight::Lineweight" modifier="" name="lw" />
        </parameters>
      </variant>
    </function>
    <function name="getCurrentLineweight">
      <variant return-type="RLineweight::Lineweight" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCurrentLinetype">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RLinetype::Id" modifier="" name="ltId" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="name" />
        </parameters>
      </variant>
    </function>
    <function name="setCurrentLinetypePattern">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RLinetypePattern" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getCurrentLinetypeId">
      <variant return-type="RLinetype::Id" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCurrentLinetypePattern">
      <variant return-type="RLinetypePattern" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryCurrentBlock">
      <variant return-type="QSharedPointer&lt;RBlock&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCurrentBlock">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="blockName" />
        </parameters>
      </variant>
    </function>
    <function name="getCurrentBlockId">
      <variant return-type="RBlock::Id" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCurrentBlockName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCurrentViewport">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RObject::Id" modifier="" name="viewportId" />
        </parameters>
      </variant>
    </function>
    <function name="getCurrentViewportId">
      <variant return-type="RObject::Id" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasCurrentViewport">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="unsetCurrentViewport">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryCurrentView">
      <variant return-type="QSharedPointer&lt;RView&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCurrentView">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RView::Id" modifier="" name="viewId" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="viewName" />
        </parameters>
      </variant>
    </function>
    <function name="getCurrentViewId">
      <variant return-type="RView::Id" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTempBlockName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBlockName">
      <variant return-type="QString" const="true" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
    </function>
    <function name="getBlockNameFromHandle">
      <variant return-type="QString" const="true" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Handle" modifier="" name="blockHandle" />
        </parameters>
      </variant>
    </function>
    <function name="getBlockNameFromLayout">
      <variant return-type="QString" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layoutName" />
        </parameters>
      </variant>
      <variant return-type="QString" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayout::Id" modifier="" name="layoutId" />
        </parameters>
      </variant>
    </function>
    <function name="getBlockNames">
      <variant return-type="QSet&lt;QString&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="rxStr" default="RDEFAULT_QSTRING" />
        </parameters>
      </variant>
    </function>
    <function name="sortBlocks">
      <variant return-type="QList&lt;RBlock::Id&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RBlock::Id&gt;" modifier="&amp;" name="blockIds" />
        </parameters>
      </variant>
    </function>
    <function name="sortLayers">
      <variant return-type="QList&lt;RLayer::Id&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RLayer::Id&gt;" modifier="&amp;" name="layerIds" />
        </parameters>
      </variant>
    </function>
    <function name="getLayerName">
      <variant return-type="QString" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
        </parameters>
      </variant>
    </function>
    <function name="getLayerNames">
      <variant return-type="QSet&lt;QString&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="rxStr" default="RDEFAULT_QSTRING" />
        </parameters>
      </variant>
    </function>
    <function name="getLayerStateName">
      <variant return-type="QString" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayerState::Id" modifier="" name="layerStateId" />
        </parameters>
      </variant>
    </function>
    <function name="getLayerStateNames">
      <variant return-type="QSet&lt;QString&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="rxStr" default="RDEFAULT_QSTRING" />
        </parameters>
      </variant>
    </function>
    <function name="getLayoutName">
      <variant return-type="QString" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayout::Id" modifier="" name="layoutId" />
        </parameters>
      </variant>
    </function>
    <function name="getViewNames">
      <variant return-type="QSet&lt;QString&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasLayer">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layerName" />
        </parameters>
      </variant>
    </function>
    <function name="hasLayerStates">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasLayerState">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layerStateName" />
        </parameters>
      </variant>
    </function>
    <function name="hasBlock">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="blockName" />
        </parameters>
      </variant>
    </function>
    <function name="hasLayout">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layoutName" />
        </parameters>
      </variant>
    </function>
    <function name="hasView">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="viewName" />
        </parameters>
      </variant>
    </function>
    <function name="hasLinetype">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="linetypeName" />
        </parameters>
      </variant>
    </function>
    <function name="getLayerId">
      <variant return-type="RLayer::Id" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layerName" />
        </parameters>
      </variant>
    </function>
    <function name="getLayer0Id">
      <variant return-type="RLayer::Id" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLayerStateId">
      <variant return-type="RLayerState::Id" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layerStateName" />
        </parameters>
      </variant>
    </function>
    <function name="getBlockId">
      <variant return-type="RBlock::Id" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="blockName" />
        </parameters>
      </variant>
    </function>
    <function name="getBlockIdAuto">
      <variant return-type="RBlock::Id" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="blockLayoutName" />
        </parameters>
      </variant>
    </function>
    <function name="getModelSpaceBlockId">
      <variant return-type="RBlock::Id" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLinetypeId">
      <variant return-type="RLinetype::Id" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="linetypeName" />
        </parameters>
      </variant>
    </function>
    <function name="getLinetypeByLayerId">
      <variant return-type="RLinetype::Id" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLinetypeByBlockId">
      <variant return-type="RLinetype::Id" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLinetypeName">
      <variant return-type="QString" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLinetype::Id" modifier="" name="linetypeId" />
        </parameters>
      </variant>
    </function>
    <function name="getLinetypeDescription">
      <variant return-type="QString" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLinetype::Id" modifier="" name="linetypeId" />
        </parameters>
      </variant>
    </function>
    <function name="getLinetypeLabel">
      <variant return-type="QString" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLinetype::Id" modifier="" name="linetypeId" />
        </parameters>
      </variant>
    </function>
    <function name="getLinetypeNames">
      <variant return-type="QSet&lt;QString&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLinetypePatterns">
      <variant return-type="QList&lt;RLinetypePattern&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isByLayer">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLinetype::Id" modifier="" name="linetypeId" />
        </parameters>
      </variant>
    </function>
    <function name="isByBlock">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLinetype::Id" modifier="" name="linetypeId" />
        </parameters>
      </variant>
    </function>
    <function name="getMaxLineweight">
      <variant return-type="RLineweight::Lineweight" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getVariables">
      <variant return-type="QStringList" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setVariable">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="bool" modifier="" name="overwrite" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getVariable">
      <variant return-type="QVariant" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="defaultValue" default="RDEFAULT_QVARIANT" />
          <parameter const="false" type="bool" modifier="" name="useSettings" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="hasVariable">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="removeVariable">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="setKnownVariable">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
          <parameter const="true" type="RVector" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getKnownVariable">
      <variant return-type="QVariant" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="defaultValue" default="RDEFAULT_QVARIANT" />
        </parameters>
      </variant>
    </function>
    <function name="setUnit">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::Unit" modifier="" name="unit" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getUnit">
      <variant return-type="RS::Unit" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setMeasurement">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::Measurement" modifier="" name="m" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getMeasurement">
      <variant return-type="RS::Measurement" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isMetric">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimensionFont">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="f" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getDimensionFont">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLinetypeScale">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getLinetypeScale">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="formatLinear">
      <variant return-type="QString" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="value" />
        </parameters>
      </variant>
    </function>
    <function name="formatAngle">
      <variant return-type="QString" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="value" />
        </parameters>
      </variant>
    </function>
    <function name="setLinearFormat">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::LinearFormat" modifier="" name="f" />
        </parameters>
      </variant>
    </function>
    <function name="getLinearFormat">
      <variant return-type="RS::LinearFormat" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLinearPrecision">
      <variant return-type="int" access="public">
        <parameters />
      </variant>
    </function>
    <function name="showLeadingZeroes">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="showTrailingZeroes">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="showLeadingZeroesAngle">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="showTrailingZeroesAngle">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAngleFormat">
      <variant return-type="RS::AngleFormat" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAnglePrecision">
      <variant return-type="int" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDecimalSeparator">
      <variant return-type="char" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isModified">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLastModifiedDateTime">
      <variant return-type="QDateTime" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLastModified">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setModified">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="m" />
        </parameters>
      </variant>
    </function>
    <function name="copyVariablesFrom">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RDocument" modifier="&amp;" name="other" />
        </parameters>
      </variant>
    </function>
    <function name="addAutoVariable">
      <variant return-type="QString" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="value" />
        </parameters>
      </variant>
    </function>
    <function name="getAutoVariables">
      <variant return-type="QStringList" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="substituteAutoVariables">
      <variant return-type="QString" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="expression" />
        </parameters>
      </variant>
    </function>
    <function name="eval">
      <variant return-type="double" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="expression" />
          <!--
          <parameter const="false" type="bool" modifier="*" name="ok" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="isEditingWorkingSet">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setIgnoreWorkingSet">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="setNotifyListeners">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getNotifyListeners">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getClipboard" static="true">
      <variant return-type="RDocument&amp;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="dump">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RDocumentInterface" ownership="cpp">
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="&amp;" name="document" />
        </parameters>
      </variant>
    </constructor>
    <enum name="IoErrorCode">
      <key>IoErrorNoError</key>
      <key>IoErrorNoImporterFound</key>
      <key>IoErrorZeroSize</key>
      <key>IoErrorNotFound</key>
      <key>IoErrorPermission</key>
      <key>IoErrorGeneralImportError</key>
      <key>IoErrorGeneralImportUrlError</key>
    </enum>
    <function name="clearCaches">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDocument">
      <variant return-type="RDocument&amp;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStorage">
      <variant return-type="RStorage&amp;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getGraphicsScenes">
      <variant return-type="QList&lt;RGraphicsScene*&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getGraphicsViewWithFocus">
      <variant return-type="RGraphicsView*" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getGraphicsSceneWithFocus">
      <variant return-type="RGraphicsScene*" access="public">
        <parameters />
      </variant>
    </function>
    <function name="addCoordinateListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RCoordinateListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="notifyCoordinateListeners">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="addLayerListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RLayerListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="removeLayerListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RLayerListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="notifyLayerListeners">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QList&lt;RLayer::Id&gt;" modifier="&amp;" name="layerIds" />
        </parameters>
      </variant>
    </function>
    <function name="addTransactionListener">
      <variant return-type="int" access="public">
        <parameters>
          <parameter const="false" type="RTransactionListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="removeTransactionListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="key" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RTransactionListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="notifyTransactionListeners">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RTransaction" modifier="*" name="t" />
        </parameters>
      </variant>
    </function>
    <function name="clear">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="beforeLoad" default="false" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="getScriptHandler">
      <variant return-type="RScriptHandler*" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="extension" />
        </parameters>
      </variant>
    </function>
    -->
    <function name="isScriptRunning">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDefaultAction">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RAction" modifier="*" name="action" />
        </parameters>
      </variant>
    </function>
    <function name="getDefaultAction">
      <variant return-type="RAction*" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCurrentAction">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RAction" modifier="*" name="action" />
        </parameters>
      </variant>
    </function>
    <function name="terminateCurrentAction">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queueAction">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RAction" modifier="*" name="action" />
        </parameters>
      </variant>
    </function>
    <function name="killAllActions">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCurrentAction">
      <variant return-type="RAction*" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasCurrentAction">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCurrentStatefulAction">
      <variant return-type="RAction*" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasCurrentStatefulAction">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="suspend">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="resume">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setClickMode">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RAction::ClickMode" modifier="" name="m" />
        </parameters>
      </variant>
    </function>
    <function name="getClickMode">
      <variant return-type="RAction::ClickMode" access="public">
        <parameters />
      </variant>
    </function>
    <function name="terminateEvent">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RTerminateEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="keyPressEvent">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QKeyEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="keyReleaseEvent">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QKeyEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="mouseMoveEvent">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RMouseEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="mousePressEvent">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RMouseEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="mouseReleaseEvent">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RMouseEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="mouseDoubleClickEvent">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RMouseEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="coordinateEvent">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RCoordinateEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="coordinateEventPreview">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RCoordinateEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="commandEvent">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RCommandEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="commandEventPreview">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RCommandEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="wheelEvent">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RWheelEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="tabletEvent">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RTabletEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="swipeGestureEvent">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QSwipeGesture" modifier="&amp;" name="gesture" />
        </parameters>
      </variant>
    </function>
    <function name="panGestureEvent">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QPanGesture" modifier="&amp;" name="gesture" />
        </parameters>
      </variant>
    </function>
    <function name="pinchGestureEvent">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QPinchGesture" modifier="&amp;" name="gesture" />
        </parameters>
      </variant>
    </function>
    <function name="propertyChangeEvent">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RPropertyEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="ucsSetEvent">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="ucsName" />
        </parameters>
      </variant>
    </function>
    <function name="zoomChangeEvent">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RGraphicsView" modifier="&amp;" name="view" />
        </parameters>
      </variant>
    </function>
    <function name="enableUpdates">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="disableUpdates">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="enableRegeneration">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="disableRegeneration">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="enableMouseTracking">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="disableMouseTracking">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setAllowSnapInterruption">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="updateAllEntities">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="regenerateScenes">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QSet&lt;REntity::Id&gt;" modifier="&amp;" name="entityIds" />
          <parameter const="false" type="bool" modifier="" name="updateViews" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
          <parameter const="false" type="bool" modifier="" name="updateViews" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="undone" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="updateSelectionStatus">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QSet&lt;REntity::Id&gt;" modifier="&amp;" name="entityIds" />
          <parameter const="false" type="bool" modifier="" name="updateViews" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
          <parameter const="false" type="bool" modifier="" name="updateViews" />
        </parameters>
      </variant>
    </function>
    <function name="regenerateViews">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="force" default="false" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QSet&lt;REntity::Id&gt;" modifier="&amp;" name="entityIds" />
        </parameters>
      </variant>
    </function>
    <function name="repaintViews">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="registerScene">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RGraphicsScene" modifier="&amp;" name="scene" />
        </parameters>
      </variant>
    </function>
    <function name="unregisterScene">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RGraphicsScene" modifier="&amp;" name="scene" />
        </parameters>
      </variant>
    </function>
    <function name="setCursor">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QCursor" modifier="&amp;" name="cursor" />
          <parameter const="false" type="bool" modifier="" name="global" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="importUrl">
      <variant return-type="RDocumentInterface::IoErrorCode" access="public">
        <parameters>
          <parameter const="true" type="QUrl" modifier="&amp;" name="url" />
          <parameter const="true" type="QString" modifier="&amp;" name="nameFilter" default="&quot;&quot;" />
          <parameter const="false" type="bool" modifier="" name="notify" default="true" />
          <!--
          <parameter const="true" type="QVariantMap" modifier="&amp;" name="params" default="RDEFAULT_QVARIANTMAP" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="importFile">
      <variant return-type="RDocumentInterface::IoErrorCode" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fileName" />
          <parameter const="true" type="QString" modifier="&amp;" name="nameFilter" default="&quot;&quot;" />
          <parameter const="false" type="bool" modifier="" name="notify" default="true" />
          <parameter const="true" type="QVariantMap" modifier="&amp;" name="params" default="RDEFAULT_QVARIANTMAP" />
        </parameters>
      </variant>
    </function>
    <function name="getCorrectedFileName">
      <variant return-type="QString" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fileName" />
          <parameter const="true" type="QString" modifier="&amp;" name="fileVersion" />
        </parameters>
      </variant>
    </function>
    <function name="exportFile">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fileName" />
          <parameter const="true" type="QString" modifier="&amp;" name="fileVersion" default="&quot;&quot;" />
          <parameter const="false" type="bool" modifier="" name="resetModified" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="tagState">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="tag" default="&quot;&quot;" />
        </parameters>
      </variant>
    </function>
    <function name="undoToTag">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="tag" default="&quot;&quot;" />
        </parameters>
      </variant>
    </function>
    <function name="undo">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="redo">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="flushTransactions">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="flushRedo">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setSnap">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RSnap" modifier="*" name="snap" />
        </parameters>
      </variant>
    </function>
    <function name="getSnap">
      <variant return-type="RSnap*" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSnapStatus">
      <variant return-type="RSnap::Status" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setSnapRestriction">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RSnapRestriction" modifier="*" name="snapRestriction" />
        </parameters>
      </variant>
    </function>
    <function name="getSnapRestriction">
      <variant return-type="RSnapRestriction*" access="public">
        <parameters />
      </variant>
    </function>
    <function name="snap">
      <variant return-type="RVector" access="public">
        <parameters>
          <parameter const="false" type="RMouseEvent" modifier="&amp;" name="event" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="restrictOrtho">
      <variant return-type="RVector" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="position" />
          <parameter const="true" type="RVector" modifier="&amp;" name="relativeZero" />
          <parameter const="false" type="RS::OrthoMode" modifier="" name="mode" default="RS::Orthogonal" />
        </parameters>
      </variant>
    </function>
    <function name="getClosestEntity">
      <variant return-type="REntity::Id" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="position" />
          <parameter const="false" type="double" modifier="" name="range" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
          <parameter const="false" type="bool" modifier="" name="includeLockedLayers" default="true" />
          <parameter const="false" type="bool" modifier="" name="selectedOnly" default="false" />
        </parameters>
      </variant>
      <variant return-type="REntity::Id" access="public">
        <parameters>
          <parameter const="false" type="RInputEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="highlightEntity">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
        </parameters>
      </variant>
    </function>
    <function name="highlightReferencePoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RRefPoint" modifier="&amp;" name="position" />
        </parameters>
      </variant>
    </function>
    <function name="selectEntities">
      <variant return-type="int" access="public">
        <parameters>
          <parameter const="true" type="QSet&lt;REntity::Id&gt;" modifier="&amp;" name="entityIds" />
          <parameter const="false" type="bool" modifier="" name="add" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="selectEntity">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
          <parameter const="false" type="bool" modifier="" name="add" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="deselectEntities">
      <variant return-type="int" access="public">
        <parameters>
          <parameter const="true" type="QSet&lt;REntity::Id&gt;" modifier="&amp;" name="entityIds" />
        </parameters>
      </variant>
    </function>
    <function name="deselectEntity">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
        </parameters>
      </variant>
    </function>
    <function name="selectBoxXY">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="box" />
          <parameter const="false" type="bool" modifier="" name="add" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="selectAll">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="deselectAll">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clearSelection">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasSelection">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="addZoomBoxToPreview">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="box" />
        </parameters>
      </variant>
    </function>
    <function name="addShapeToPreview">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RShape" modifier="&amp;" name="shape" />
          <parameter const="true" type="RColor" modifier="&amp;" name="color" />
          <parameter const="true" type="QBrush" modifier="&amp;" name="brush" />
          <parameter const="false" type="RLineweight::Lineweight" modifier="" name="lineweight" />
          <parameter const="false" type="Qt::PenStyle" modifier="" name="style" />
          <parameter const="true" type="QList&lt;qreal&gt;" modifier="&amp;" name="dashValues" default="RDEFAULT_QLIST_QREAL" />
        </parameters>
      </variant>
    </function>
    <function name="addAuxShapeToPreview">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RShape" modifier="&amp;" name="shape" />
        </parameters>
      </variant>
    </function>
    <function name="addEntityToPreview">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="REntity" modifier="&amp;" name="entity" />
        </parameters>
      </variant>
    </function>
    <function name="addDrawableToPreview">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RGraphicsSceneDrawable" modifier="&amp;" name="drawable" />
        </parameters>
      </variant>
    </function>
    <function name="beginPreview">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="endPreview">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clearPreview">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isPreviewEmpty">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="keepPreview">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="showPropertiesOf">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="REntity" modifier="&amp;" name="entity" />
        </parameters>
      </variant>
    </function>
    <function name="clearProperties">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="zoomIn">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="zoomOut">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="autoZoom">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="margin" default="RDEFAULT_MIN1" />
        </parameters>
      </variant>
    </function>
    <function name="zoomToSelection">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="zoomTo">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="region" />
          <parameter const="false" type="int" modifier="" name="margin" default="0" />
        </parameters>
      </variant>
    </function>
    <function name="zoomPrevious">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="previewOperation">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="ROperation" modifier="*" name="operation" />
        </parameters>
      </variant>
    </function>
    <function name="applyOperation">
      <variant return-type="RTransaction" access="public">
        <parameters>
          <parameter const="false" type="ROperation" modifier="*" name="operation" />
        </parameters>
      </variant>
    </function>
    <function name="objectChangeEvent">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RTransaction" modifier="&amp;" name="transaction" />
        </parameters>
      </variant>
    </function>
    <function name="getRelativeZero">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLastPosition">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setRelativeZero">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="lockRelativeZero">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="unlockRelativeZero">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isRelativeZeroLocked">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="lockSnap">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="unlockSnap">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="toggleSnapLock">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isSnapLocked">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCursorPosition">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCursorPosition">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="setCursorOverride">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getCursorOverride">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="deleteTerminatedActions">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCurrentColor">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RColor" modifier="&amp;" name="color" />
        </parameters>
      </variant>
    </function>
    <function name="getCurrentColor">
      <variant return-type="RColor" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCurrentLineweight">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RLineweight::Lineweight" modifier="" name="lw" />
        </parameters>
      </variant>
    </function>
    <function name="getCurrentLineweight">
      <variant return-type="RLineweight::Lineweight" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCurrentLinetype">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RLinetype::Id" modifier="" name="ltId" />
        </parameters>
      </variant>
    </function>
    <function name="setCurrentLinetypePattern">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RLinetypePattern" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getCurrentLinetypeId">
      <variant return-type="RLinetype::Id" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCurrentLinetypePattern">
      <variant return-type="RLinetypePattern" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCurrentLayer">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RLayer" modifier="&amp;" name="layer" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layerName" />
        </parameters>
      </variant>
    </function>
    <function name="setCurrentBlock">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RBlock" modifier="&amp;" name="block" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="blockName" />
        </parameters>
      </variant>
    </function>
    <function name="setCurrentViewport">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RViewportEntity" modifier="&amp;" name="viewport" />
        </parameters>
      </variant>
    </function>
    <function name="unsetCurrentViewport">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCurrentView">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="viewName" />
        </parameters>
      </variant>
    </function>
    <function name="setCurrentUcs">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RUcs" modifier="&amp;" name="ucs" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="ucsName" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="getCurrentUcs">
      <variant return-type="RUcs" access="public">
        <parameters />
      </variant>
    </function>
    -->
    <function name="getCurrentUcsName">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLastKnownViewWithFocus">
      <variant return-type="RGraphicsView*" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLastKnownViewWithFocus">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RGraphicsView" modifier="*" name="view" />
        </parameters>
      </variant>
    </function>
    <function name="getClipboard" static="true">
      <variant return-type="RDocumentInterface&amp;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="deleteClipboard" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isClipboard">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isSuspended">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setNotifyListeners">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getNotifyListeners">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isDeleting">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="eval">
      <variant return-type="QVariant" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="ext" />
          <parameter const="true" type="QString" modifier="&amp;" name="script" />
        </parameters>
      </variant>
    </function>
    <function name="handleClickEvent" />
    <function name="previewClickEvent" />
  </class>
  <class name="RDocumentVariables" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
        </parameters>
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RDocumentVariables*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="clear">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCustomPropertyTypeIds">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setKnownVariable">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
          <parameter const="true" type="RVector" modifier="&amp;" name="value" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
          <parameter const="true" type="RColor" modifier="&amp;" name="value" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
        </parameters>
      </variant>
    </function>
    <function name="getKnownVariable">
      <variant return-type="QVariant" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="hasKnownVariable">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="getCurrentLayerId">
      <variant return-type="RLayer::Id" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCurrentLayerId">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="id" />
        </parameters>
      </variant>
    </function>
    <function name="getUnit">
      <variant return-type="RS::Unit" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setUnit">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::Unit" modifier="" name="u" />
        </parameters>
      </variant>
    </function>
    <function name="getMeasurement">
      <variant return-type="RS::Measurement" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setMeasurement">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::Measurement" modifier="" name="m" />
        </parameters>
      </variant>
    </function>
    <function name="getLinetypeScale">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLinetypeScale">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="getDimensionFont">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimensionFont">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="f" />
        </parameters>
      </variant>
    </function>
    <function name="addAutoVariable">
      <variant return-type="QString" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="value" />
        </parameters>
      </variant>
    </function>
    <function name="getAutoVariables">
      <variant return-type="QStringList" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <!--
    <function name="print">
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="QDebug" modifier="" name="dbg" />
        </parameters>
      </variant>
    </function>
    -->
  </class>
  <class name="RDxfServices">
    <enum name="Type">
      <key>Unknown</key>
      <key>String</key>
      <key>Int</key>
      <key>Float</key>
      <key>Vector</key>
    </enum>
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="reset">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSafeBlockName" static="true">
      <variant return-type="QString" static="true" access="public">
        <parameters>
          <parameter const="false" type="QString" modifier="&amp;" name="blockName" />
        </parameters>
      </variant>
    </function>
    <function name="fixBlockName">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QString" modifier="&amp;" name="blockName" />
        </parameters>
      </variant>
    </function>
    <function name="fixLayerName">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QString" modifier="&amp;" name="layerName" />
        </parameters>
      </variant>
    </function>
    <function name="fixFontName">
      <variant return-type="QString" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fontName" />
        </parameters>
      </variant>
    </function>
    <function name="fixVersion2String">
      <variant return-type="void" const="true" access="public">
        <parameters>
          <parameter const="false" type="QString" modifier="&amp;" name="str" />
        </parameters>
      </variant>
    </function>
    <function name="fixDimensionLabel">
      <variant return-type="void" const="true" access="public">
        <parameters>
          <parameter const="false" type="QString" modifier="&amp;" name="text" />
          <parameter const="false" type="QString" modifier="&amp;" name="uTol" />
          <parameter const="false" type="QString" modifier="&amp;" name="lTol" />
        </parameters>
      </variant>
    </function>
    <function name="detectVersion2Format">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fileName" />
        </parameters>
      </variant>
    </function>
    <function name="hasDIMZIN">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasDIMAZIN">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasInvalidEllipse">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getVersion2Compatibility">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getVersion3_1Compatibility">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMajorVersion">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMinorVersion">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPatchVersion">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getVersion2LayerName">
      <variant return-type="QString" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layerName" />
        </parameters>
      </variant>
    </function>
    <function name="getVersionBlockName">
      <variant return-type="QString" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="blockName" />
        </parameters>
      </variant>
    </function>
    <function name="getVersion2Font">
      <variant return-type="QString" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="handle" />
        </parameters>
      </variant>
    </function>
    <function name="getVersion2DimensionLabel">
      <variant return-type="QString" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="handle" />
        </parameters>
      </variant>
    </function>
    <function name="collectVersion2Info">
      <variant return-type="QString" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fileName" />
        </parameters>
      </variant>
    </function>
    <function name="getVersion2PatternAngle">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="angle" />
          <parameter const="true" type="QString" modifier="&amp;" name="patternName" />
        </parameters>
      </variant>
    </function>
    <function name="getVersion2PatternScale">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="scale" />
          <parameter const="true" type="QString" modifier="&amp;" name="patternName" />
        </parameters>
      </variant>
    </function>
    <function name="getVersion2PatternName">
      <variant return-type="QString" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="patternName" />
        </parameters>
      </variant>
    </function>
    <function name="fixVersion2HatchData">
      <variant return-type="void" const="true" access="public">
        <parameters>
          <parameter const="false" type="QString" modifier="&amp;" name="patternName" />
          <parameter const="false" type="double" modifier="&amp;" name="angle" />
          <parameter const="false" type="double" modifier="&amp;" name="scale" />
          <parameter const="false" type="bool" modifier="" name="solid" />
        </parameters>
      </variant>
    </function>
    <!--
    <preproc plain="#if QT_VERSION&gt;=0x060000" />
    <function name="getCodec">
      <variant return-type="QStringDecoder*" const="true" access="public">
        <parameters />
      </variant>
      <variant return-type="QTextCodec*" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCodec">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QStringDecoder" modifier="*" name="codec" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QTextCodec" modifier="*" name="codec" />
        </parameters>
      </variant>
    </function>
    <preproc plain="#else" />
    <preproc plain="#endif" />
    -->
    <!--
    <function name="attributesToColor" static="true">
      <variant return-type="RColor" static="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="color" />
          <parameter const="false" type="int" modifier="" name="color24" />
          <parameter const="true" type="double" modifier="" name="" />
          <parameter const="false" type="bool" modifier="" name="forLayer" default="false" />
        </parameters>
      </variant>
    </function>
    -->
    <!--
    <function name="numberToColor" static="true">
      <variant return-type="RColor" static="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="num" />
          <parameter const="true" type="double" modifier="" name="" />
          <parameter const="false" type="bool" modifier="" name="comp" default="false" />
          <parameter const="false" type="bool" modifier="" name="forLayer" default="false" />
        </parameters>
      </variant>
    </function>
    -->
    <function name="numberToColor24" static="true">
      <variant return-type="RColor" static="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="num" />
        </parameters>
      </variant>
    </function>
    <function name="numberToWeight" static="true">
      <variant return-type="RLineweight::Lineweight" static="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="num" />
        </parameters>
      </variant>
    </function>
    <function name="widthToNumber" static="true">
      <variant return-type="int" static="true" access="public">
        <parameters>
          <parameter const="false" type="RLineweight::Lineweight" modifier="" name="w" />
        </parameters>
      </variant>
    </function>
    <function name="colorToNumber24" static="true">
      <variant return-type="int" static="true" access="public">
        <parameters>
          <parameter const="true" type="RColor" modifier="&amp;" name="col" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="colorToNumber" static="true">
      <variant return-type="int" static="true" access="public">
        <parameters>
          <parameter const="true" type="RColor" modifier="&amp;" name="col" />
          <parameter const="true" type="double" modifier="" name="" />
        </parameters>
      </variant>
    </function>
    -->
    <function name="stringToVariable" static="true">
      <variant return-type="RS::KnownVariable" static="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="variableToString" static="true">
      <variant return-type="QString" static="true" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getCodeForVariable" static="true">
      <variant return-type="int" static="true" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getTypeForVariable" static="true">
      <variant return-type="RDxfServices::Type" static="true" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="isVariable2D" static="true">
      <variant return-type="bool" static="true" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="escapeUnicode" static="true">
      <variant return-type="QString" static="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="str" />
        </parameters>
      </variant>
    </function>
    <function name="parseUnicode" static="true">
      <variant return-type="QString" static="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="str" />
        </parameters>
      </variant>
    </function>
    <function name="autoFixLinetypePattern" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters>
          <parameter const="false" type="RLinetypePattern" modifier="&amp;" name="pattern" />
        </parameters>
      </variant>
    </function>
    <function name="getFileQCADVersion" static="true">
      <variant return-type="int" static="true" access="public">
        <parameters>
          <parameter const="true" type="RDocument" modifier="&amp;" name="doc" />
        </parameters>
      </variant>
    </function>
    <function name="initAci" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAci" static="true">
      <variant return-type="int" static="true" access="public">
        <parameters>
          <parameter const="true" type="RColor" modifier="&amp;" name="col" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="getColor" static="true">
      <variant return-type="RColor" static="true" access="public">
        <parameters>
          <parameter const="false" type="unsigned int" modifier="" name="index" />
        </parameters>
      </variant>
    </function>
    -->
    <preproc plain="#if QT_VERSION&gt;=0x060000" />
    <preproc plain="#else" />
    <preproc plain="#endif" />
  </class>
  <class name="REllipse" sharedpointer="true">
    <super_list>
      <super name="RShape" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
          <parameter const="true" type="RVector" modifier="&amp;" name="majorPoint" />
          <parameter const="false" type="double" modifier="" name="ratio" />
          <parameter const="false" type="double" modifier="" name="startParam" />
          <parameter const="false" type="double" modifier="" name="endParam" />
          <parameter const="false" type="bool" modifier="" name="reversed" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="createInscribed" static="true">
      <variant return-type="REllipse" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="p2" />
          <parameter const="true" type="RVector" modifier="&amp;" name="p3" />
          <parameter const="true" type="RVector" modifier="&amp;" name="p4" />
        </parameters>
      </variant>
    </function>
    <function name="getShapeType">
      <variant return-type="RShape::Type" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="REllipse*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isDirected">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setZ">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="z" />
        </parameters>
      </variant>
    </function>
    <function name="getVectorProperties">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDoubleProperties">
      <variant return-type="QList&lt;double&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBoolProperties">
      <variant return-type="QList&lt;bool&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMiddlePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCenterPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPointsWithDistanceToEnd">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="int" modifier="" name="from" default="RS::FromAny" />
        </parameters>
      </variant>
    </function>
    <function name="getPointCloud">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="segmentLength" />
        </parameters>
      </variant>
    </function>
    <function name="getVectorTo">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="moveStartPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="pos" />
          <parameter const="false" type="bool" modifier="" name="changeAngleOnly" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="moveEndPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="pos" />
          <parameter const="false" type="bool" modifier="" name="changeAngleOnly" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getFoci">
      <variant return-type="QList&lt;RVector&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCenter">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCenter">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="vector" />
        </parameters>
      </variant>
    </function>
    <function name="getMajorPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMinorPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setMajorPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="vector" />
        </parameters>
      </variant>
    </function>
    <function name="setMinorPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="switchMajorMinor">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRatio">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setRatio">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="radius" />
        </parameters>
      </variant>
    </function>
    <function name="getStartParam">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setStartParam">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="startParam" />
        </parameters>
      </variant>
    </function>
    <function name="getEndParam">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setEndParam">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="endParam" />
        </parameters>
      </variant>
    </function>
    <function name="getStartAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setStartAngle">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a" />
        </parameters>
      </variant>
    </function>
    <function name="angleToParam">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a" />
        </parameters>
      </variant>
    </function>
    <function name="getEndAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setEndAngle">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a" />
        </parameters>
      </variant>
    </function>
    <function name="getAngleLength">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="allowForZeroLength" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="isAngleWithinArc">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a" />
        </parameters>
      </variant>
    </function>
    <function name="isParamWithinArc">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a" />
        </parameters>
      </variant>
    </function>
    <function name="isReversed">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setReversed">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="reversed" />
        </parameters>
      </variant>
    </function>
    <function name="getDirection1">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection2">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSideOfPoint">
      <variant return-type="RS::Side" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="getStartPoint">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoint">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMajorRadius">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMinorRadius">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setAngle">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a" />
        </parameters>
      </variant>
    </function>
    <function name="isFullEllipse">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isCircular">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLength">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSimpsonLength">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="f1" />
          <parameter const="false" type="double" modifier="" name="f2" />
        </parameters>
      </variant>
    </function>
    <function name="contains">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getAngleAt">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="RS::From" modifier="" name="from" default="RS::FromStart" />
        </parameters>
      </variant>
    </function>
    <function name="getAngleAtPoint">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="pos" />
        </parameters>
      </variant>
    </function>
    <function name="getParamTo">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="pos" />
        </parameters>
      </variant>
    </function>
    <function name="getRadiusAt">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="param" />
        </parameters>
      </variant>
    </function>
    <function name="getPointAt">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="param" />
        </parameters>
      </variant>
    </function>
    <function name="getMiddlePoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="reverse">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTransformed">
      <variant return-type="QSharedPointer&lt;RShape&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QTransform" modifier="&amp;" name="transform" />
        </parameters>
      </variant>
    </function>
    <function name="getTrimEnd">
      <variant return-type="RS::Ending" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" />
        </parameters>
      </variant>
    </function>
    <function name="trimStartPoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="trimDist" />
        </parameters>
      </variant>
    </function>
    <function name="trimEndPoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="trimDist" />
        </parameters>
      </variant>
    </function>
    <function name="correctMajorMinor">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSweep">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBoxCorners">
      <variant return-type="QList&lt;RVector&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTangents">
      <variant return-type="QList&lt;RLine&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="approximateWithSplines">
      <variant return-type="QList&lt;RSpline&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="approximateWithArcs">
      <variant return-type="RPolyline" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="segments" />
        </parameters>
      </variant>
    </function>
    <function name="getOffsetShapes">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="int" modifier="" name="number" />
          <parameter const="false" type="RS::Side" modifier="" name="side" />
          <parameter const="true" type="RVector" modifier="&amp;" name="position" default="RVector::invalid" />
        </parameters>
      </variant>
    </function>
    <function name="splitAt">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="points" />
        </parameters>
      </variant>
    </function>
    <function name="hasProxy" static="true">
      <variant return-type="bool" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <!--
    <function name="setEllipseProxy" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters>
          <parameter const="false" type="REllipseProxy" modifier="*" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getEllipseProxy" static="true">
      <variant return-type="REllipseProxy*" static="true" access="public">
        <parameters />
      </variant>
    </function>
    -->
    <preproc plain="#if QT_VERSION&gt;=0x060000" />
    <function name="copy">
      <variant return-type="REllipse" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <preproc plain="#endif" />
    <!--
    <function name="print">
      <variant return-type="void" virtual="true" const="true" access="protected">
        <parameters>
          <parameter const="false" type="QDebug" modifier="" name="dbg" />
        </parameters>
      </variant>
    </function>
    -->
  </class>
  <class name="REllipseData">
    <super_list>
      <super name="REntityData" />
      <super name="REllipse" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
          <parameter const="true" type="RVector" modifier="&amp;" name="majorPoint" />
          <parameter const="false" type="double" modifier="" name="ratio" />
          <parameter const="false" type="double" modifier="" name="startParam" />
          <parameter const="false" type="double" modifier="" name="endParam" />
          <parameter const="false" type="bool" modifier="" name="reversed" default="false" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="REllipse" modifier="&amp;" name="ellipse" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEllipse">
      <variant return-type="REllipse" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="setZ">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="z" />
        </parameters>
      </variant>
    </function>
    <function name="to2D">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="ignoreEmpty" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getMiddlePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getCenterPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getArcReferencePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
        </parameters>
      </variant>
    </function>
    <function name="getPointsWithDistanceToEnd">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="int" modifier="" name="from" default="RS::FromAny" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getIntersectionPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="REntityData" modifier="&amp;" name="other" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="bool" modifier="" name="same" default="false" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="true" />
          <!--
          <parameter const="false" type="QList&lt;QPair&lt;RObject::Id,RObject::Id&gt;&gt;" modifier="*" name="entityIds" default="NULL" />
          -->
        </parameters>
      </variant>
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getVectorTo">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="getDistanceTo">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="range" default="0.0" />
          <parameter const="false" type="bool" modifier="" name="draft" default="false" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="intersectsWith">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="axis1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="axis2" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="flipHorizontal">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="flipVertical">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="stretch">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="area" />
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="getFoci">
      <variant return-type="QList&lt;RVector&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCenter">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMajorRadius">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMajorPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMinorPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setMinorPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getRatio">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStartParam">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndParam">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isFullEllipse">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getParamTo">
      <variant return-type="double" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="pos" />
        </parameters>
      </variant>
    </function>
    <function name="getLength">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSweep">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPointAt">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="angle" />
        </parameters>
      </variant>
    </function>
    <function name="getReferencePoints">
      <variant return-type="QList&lt;RRefPoint&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="hint" default="RS::RenderTop" />
        </parameters>
      </variant>
    </function>
    <function name="moveReferencePoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="targetPoint" />
          <parameter const="false" type="Qt::KeyboardModifiers" modifier="" name="modifiers" default="Qt::NoModifier" />
        </parameters>
      </variant>
    </function>
    <function name="reverse">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="castToShape">
      <variant return-type="RShape*" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getShapes">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="false" />
          <parameter const="false" type="bool" modifier="" name="segment" default="false" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="entityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
  </class>
  <class name="REllipseEntity" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
      <super name="REntity" />
    </super_list>
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyProtected" />
    <property static="true" type="RPropertyTypeId" name="PropertyWorkingSet" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyLayer" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetype" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetypeScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineweight" />
    <property static="true" type="RPropertyTypeId" name="PropertyColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDisplayedColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDrawOrder" />
    <property static="true" type="RPropertyTypeId" name="PropertyCenterX" />
    <property static="true" type="RPropertyTypeId" name="PropertyCenterY" />
    <property static="true" type="RPropertyTypeId" name="PropertyCenterZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyMajorPointX" />
    <property static="true" type="RPropertyTypeId" name="PropertyMajorPointY" />
    <property static="true" type="RPropertyTypeId" name="PropertyMajorPointZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyRatio" />
    <property static="true" type="RPropertyTypeId" name="PropertyStartParam" />
    <property static="true" type="RPropertyTypeId" name="PropertyEndParam" />
    <property static="true" type="RPropertyTypeId" name="PropertyStartAngle" />
    <property static="true" type="RPropertyTypeId" name="PropertyEndAngle" />
    <property static="true" type="RPropertyTypeId" name="PropertyReversed" />
    <property static="true" type="RPropertyTypeId" name="PropertyStartPointX" />
    <property static="true" type="RPropertyTypeId" name="PropertyStartPointY" />
    <property static="true" type="RPropertyTypeId" name="PropertyStartPointZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyEndPointX" />
    <property static="true" type="RPropertyTypeId" name="PropertyEndPointY" />
    <property static="true" type="RPropertyTypeId" name="PropertyEndPointZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyCircumference" />
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="REllipseData" modifier="&amp;" name="data" />
        </parameters>
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStaticPropertyTypeIds" static="true">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="REllipseEntity*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setShape">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="REllipse" modifier="&amp;" name="e" />
        </parameters>
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="exportEntity">
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RExporter" modifier="&amp;" name="e" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
          <parameter const="false" type="bool" modifier="" name="forceSelected" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="scaleNonUniform">
      <variant return-type="QSharedPointer&lt;REntity&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
    </function>
    <function name="getData">
      <variant return-type="REllipseData&amp;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCenter">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMajorPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMajorRadius">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMinorRadius">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRatio">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setRatio">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="ratio" />
        </parameters>
      </variant>
    </function>
    <function name="getStartAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStartParam">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setStartParam">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="param" />
        </parameters>
      </variant>
    </function>
    <function name="getEndAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndParam">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setEndParam">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="param" />
        </parameters>
      </variant>
    </function>
    <function name="getAngleLength">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAngleAt">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="RS::From" modifier="" name="from" />
        </parameters>
      </variant>
    </function>
    <function name="isReversed">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setReversed">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="reversed" />
        </parameters>
      </variant>
    </function>
    <function name="getStartPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isFullEllipse">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection1">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection2">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="reverse">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSideOfPoint">
      <variant return-type="RS::Side" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="getParamTo">
      <variant return-type="double" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="pos" />
        </parameters>
      </variant>
    </function>
    <function name="getTrimEnd">
      <variant return-type="RS::Ending" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" />
        </parameters>
      </variant>
    </function>
    <function name="trimStartPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="trimEndPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getLength">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSweep">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPointAt">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="angle" />
        </parameters>
      </variant>
    </function>
    <function name="approximateWithSplines">
      <variant return-type="QList&lt;RSpline&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="approximateWithArcs">
      <variant return-type="RPolyline" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="segments" />
        </parameters>
      </variant>
    </function>
    <function name="print" />
  </class>
  <class name="REntity" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
    </super_list>
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyProtected" />
    <property static="true" type="RPropertyTypeId" name="PropertyWorkingSet" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyLayer" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetype" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetypeScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineweight" />
    <property static="true" type="RPropertyTypeId" name="PropertyColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDisplayedColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDrawOrder" />
    <property static="true" type="RPropertyTypeId" name="PropertyParentId" />
    <property static="true" type="RPropertyTypeId" name="PropertyMinX" />
    <property static="true" type="RPropertyTypeId" name="PropertyMinY" />
    <property static="true" type="RPropertyTypeId" name="PropertyMaxX" />
    <property static="true" type="RPropertyTypeId" name="PropertyMaxY" />
    <property static="true" type="RPropertyTypeId" name="PropertySizeX" />
    <property static="true" type="RPropertyTypeId" name="PropertySizeY" />
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStaticPropertyTypeIds" static="true">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDocument">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
        </parameters>
      </variant>
    </function>
    <function name="clone">
      <variant return-type="REntity*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isPointType">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isComplex" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RS::EntityType" modifier="" name="type" />
        </parameters>
      </variant>
    </function>
    <function name="isDimension" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RS::EntityType" modifier="" name="type" />
        </parameters>
      </variant>
    </function>
    <function name="isTextBased" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RS::EntityType" modifier="" name="type" />
        </parameters>
      </variant>
    </function>
    <function name="getData">
      <variant return-type="REntityData&amp;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isSane">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isSelected">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setSelected">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isSelectedWorkingSet">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setSelectedWorkingSet">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isSelectable">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isUpdatesEnabled">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setUpdatesEnabled">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="cloneOnChange">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDrawOrder">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="drawOrder" />
        </parameters>
      </variant>
    </function>
    <function name="getDrawOrder">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLayerId">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
        </parameters>
      </variant>
    </function>
    <function name="setLayerName">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="n" />
        </parameters>
      </variant>
    </function>
    <function name="getLayerId">
      <variant return-type="RLayer::Id" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLayerName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setBlockId">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
    </function>
    <function name="getBlockId">
      <variant return-type="RBlock::Id" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBlockName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getParentId">
      <variant return-type="REntity::Id" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLinetypeId">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RLinetype::Id" modifier="" name="linetypeId" />
        </parameters>
      </variant>
    </function>
    <function name="setLinetypePattern">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RLinetypePattern" modifier="&amp;" name="linetypePattern" />
        </parameters>
      </variant>
    </function>
    <function name="getLinetypeId">
      <variant return-type="RLinetype::Id" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLinetypePattern">
      <variant return-type="RLinetypePattern" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLinetypeScale">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="linetypeScale" />
        </parameters>
      </variant>
    </function>
    <function name="getLinetypeScale">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLineweight">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RLineweight::Lineweight" modifier="" name="lineweight" />
        </parameters>
      </variant>
    </function>
    <function name="getLineweight">
      <variant return-type="RLineweight::Lineweight" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <!--
    <function name="getLineweightInUnits">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="true" type="QStack&lt;REntity*&gt;" modifier="&amp;" name="blockRefStack" />
        </parameters>
      </variant>
    </function>
    -->
    <function name="setColor">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RColor" modifier="&amp;" name="color" />
        </parameters>
      </variant>
    </function>
    <function name="getColor">
      <variant return-type="RColor" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDisplayColor">
      <variant return-type="RColor" access="public">
        <parameters />
      </variant>
    </function>
    <function name="copyAttributesFrom">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="REntity" modifier="*" name="entity" />
          <parameter const="false" type="bool" modifier="" name="copyBlockId" default="true" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="REntityData" modifier="&amp;" name="entityData" />
          <parameter const="false" type="bool" modifier="" name="copyBlockId" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="ignoreEmpty" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="to2D">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setZ">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="z" />
        </parameters>
      </variant>
    </function>
    <function name="getBoundingBoxes">
      <variant return-type="QList&lt;RBox&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="ignoreEmpty" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getHull">
      <variant return-type="RPolyline" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="getShapes">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="false" />
          <parameter const="false" type="bool" modifier="" name="segment" default="false" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="entityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getClosestSubEntityId">
      <variant return-type="RObject::Id" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="pos" />
          <parameter const="false" type="double" modifier="" name="range" default="RNANDOUBLE" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getClosestShape">
      <variant return-type="QSharedPointer&lt;RShape&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="pos" />
          <parameter const="false" type="double" modifier="" name="range" default="RNANDOUBLE" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="false" />
          <!--
          <parameter const="false" type="RObject::Id" modifier="*" name="subEntityId" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getClosestSimpleShape">
      <variant return-type="QSharedPointer&lt;RShape&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="pos" />
          <parameter const="false" type="double" modifier="" name="range" default="RNANDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="isInside">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="box" />
        </parameters>
      </variant>
    </function>
    <function name="isOnEntity">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="tolerance" default="RDEFAULT_TOLERANCE_1E_MIN4" />
        </parameters>
      </variant>
    </function>
    <function name="intersectsWith">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
        </parameters>
      </variant>
    </function>
    <function name="getDistanceTo">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="range" default="0.0" />
          <parameter const="false" type="bool" modifier="" name="draft" default="false" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="getVectorTo">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="getInternalReferencePoints">
      <variant return-type="QList&lt;RRefPoint&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="hint" default="RS::RenderTop" />
        </parameters>
      </variant>
    </function>
    <function name="getReferencePoints">
      <variant return-type="QList&lt;RRefPoint&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="hint" default="RS::RenderTop" />
        </parameters>
      </variant>
    </function>
    <function name="getPointOnEntity">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getMiddlePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getCenterPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;REntity::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getClosestPointOnEntity">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="double" modifier="" name="range" default="RNANDOUBLE" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <!--
          <parameter const="false" type="REntity::Id" modifier="*" name="subEntityId" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getPointsWithDistanceToEnd">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="int" modifier="" name="from" default="RS::FromAny" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getIntersectionPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="REntity" modifier="&amp;" name="other" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="true" />
          <!--
          <parameter const="false" type="QList&lt;QPair&lt;REntity::Id,REntity::Id&gt;&gt;" modifier="*" name="entityIds" default="NULL" />
          -->
        </parameters>
      </variant>
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getIntersectionPointsWithShape">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
        </parameters>
      </variant>
    </function>
    <function name="clickReferencePoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
        </parameters>
      </variant>
    </function>
    <function name="moveReferencePoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="targetPoint" />
          <parameter const="false" type="Qt::KeyboardModifiers" modifier="" name="modifiers" default="Qt::NoModifier" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="scaleFactor" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="scaleNonUniform">
      <variant return-type="QSharedPointer&lt;REntity&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="scaleVisualProperties">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="scaleFactor" />
        </parameters>
      </variant>
    </function>
    <function name="setViewportContext">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RViewportData" modifier="&amp;" name="" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="axis1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="axis2" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="flipHorizontal">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="flipVertical">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="stretch">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="area" />
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="update">
      <variant return-type="void" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="castToShape">
      <variant return-type="RShape*" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <!--
    <function name="castToConstShape">
      <variant return-type="const RShape*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    -->
    <function name="exportEntity">
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RExporter" modifier="&amp;" name="e" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
          <parameter const="false" type="bool" modifier="" name="forceSelected" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="setAutoUpdatesBlocked">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="isVisible">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" default="RBlock::INVALID_ID" />
        </parameters>
      </variant>
    </function>
    <function name="isEditable">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="allowInvisible" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="isInWorkingSet">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getComplexity">
      <variant return-type="int" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setParentId" />
    <function name="print" />
  </class>
  <class name="REntityData" ownership="cpp">
    <!--
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" default="NULL" />
        </parameters>
      </variant>
    </constructor>
    -->
    <function name="getDocument">
      <variant return-type="RDocument*" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDocument">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
        </parameters>
      </variant>
    </function>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isPointType">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isSane">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getShapes">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="false" />
          <parameter const="false" type="bool" modifier="" name="segment" default="false" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="entityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getClosestSubEntityId">
      <variant return-type="RObject::Id" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="pos" />
          <parameter const="false" type="double" modifier="" name="range" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" />
        </parameters>
      </variant>
    </function>
    <function name="getClosestShape">
      <variant return-type="QSharedPointer&lt;RShape&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="pos" />
          <parameter const="false" type="double" modifier="" name="range" default="RNANDOUBLE" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="false" />
          <!--
          <parameter const="false" type="RObject::Id" modifier="*" name="subEntityId" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <!--
    <function name="castToShape">
      <variant return-type="RShape*" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="castToConstShape">
      <variant return-type="const RShape*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    -->
    <function name="getBoundingBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="ignoreEmpty" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="copyAttributesFrom">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="REntityData" modifier="&amp;" name="entityData" />
          <parameter const="false" type="bool" modifier="" name="copyBlockId" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="to2D">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setZ">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="z" />
        </parameters>
      </variant>
    </function>
    <function name="getBoundingBoxes">
      <variant return-type="QList&lt;RBox&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="ignoreEmpty" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getHull">
      <variant return-type="RPolyline" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="isUpdatesEnabled">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setUpdatesEnabled">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="cloneOnChange">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isSelected">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setSelected">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isSelectedWorkingSet">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setSelectedWorkingSet">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getDrawOrder">
      <variant return-type="int" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDrawOrder">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="drawOrder" />
        </parameters>
      </variant>
    </function>
    <function name="setLayerId">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
        </parameters>
      </variant>
    </function>
    <function name="getLayerId">
      <variant return-type="RLayer::Id" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLayerName">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layerName" />
        </parameters>
      </variant>
    </function>
    <function name="getLayerName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setBlockId">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
    </function>
    <function name="getBlockId">
      <variant return-type="RBlock::Id" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setParentId">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RObject::Id" modifier="" name="parentId" />
        </parameters>
      </variant>
    </function>
    <function name="getParentId">
      <variant return-type="RObject::Id" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBlockName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLinetypeId">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RLinetype::Id" modifier="" name="linetypeId" />
        </parameters>
      </variant>
    </function>
    <function name="getLinetypeId">
      <variant return-type="RLinetype::Id" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLinetypePattern">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLinetypePattern" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getLinetypePattern">
      <variant return-type="RLinetypePattern" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLinetypeScale">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="linetypeScale" />
        </parameters>
      </variant>
    </function>
    <function name="getLinetypeScale">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLineweight">
      <variant return-type="RLineweight::Lineweight" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <!--
    <function name="getLineweightInUnits">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="true" type="QStack&lt;REntity*&gt;" modifier="&amp;" name="blockRefStack" />
        </parameters>
      </variant>
    </function>
    -->
    <function name="setLineweight">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RLineweight::Lineweight" modifier="" name="lineweight" />
        </parameters>
      </variant>
    </function>
    <function name="setColor">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RColor" modifier="&amp;" name="color" />
        </parameters>
      </variant>
    </function>
    <function name="getColor">
      <variant return-type="RColor" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDisplayColor">
      <variant return-type="RColor" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getInternalReferencePoints">
      <variant return-type="QList&lt;RRefPoint&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="hint" default="RS::RenderTop" />
        </parameters>
      </variant>
    </function>
    <function name="getReferencePoints">
      <variant return-type="QList&lt;RRefPoint&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="hint" default="RS::RenderTop" />
        </parameters>
      </variant>
    </function>
    <function name="getPointOnEntity">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getMiddlePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getCenterPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getArcReferencePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
        </parameters>
      </variant>
    </function>
    <function name="getPointsWithDistanceToEnd">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="int" modifier="" name="from" default="RS::FromAny" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getClosestPointOnEntity">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="double" modifier="" name="range" default="RNANDOUBLE" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <!--
          <parameter const="false" type="RObject::Id" modifier="*" name="subEntityId" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getIntersectionPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="REntityData" modifier="&amp;" name="other" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="bool" modifier="" name="same" default="false" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="true" />
          <!--
          <parameter const="false" type="QList&lt;QPair&lt;RObject::Id,RObject::Id&gt;&gt;" modifier="*" name="entityIds" default="NULL" />
          -->
        </parameters>
      </variant>
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getVectorTo">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="getDistanceTo">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="range" default="0.0" />
          <parameter const="false" type="bool" modifier="" name="draft" default="false" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="isInside">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="box" />
        </parameters>
      </variant>
    </function>
    <function name="isOnEntity">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="tolerance" default="RDEFAULT_TOLERANCE_1E_MIN4" />
        </parameters>
      </variant>
    </function>
    <function name="intersectsWith">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
        </parameters>
      </variant>
    </function>
    <function name="clickReferencePoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
        </parameters>
      </variant>
    </function>
    <function name="moveReferencePoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="targetPoint" />
          <parameter const="false" type="Qt::KeyboardModifiers" modifier="" name="modifiers" default="Qt::NoModifier" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="scaleVisualProperties">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="scaleFactor" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="axis1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="axis2" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="flipHorizontal">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="flipVertical">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="stretch">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="area" />
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="update">
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setAutoUpdatesBlocked">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getDefaultDrawOrder" static="true">
      <variant return-type="int" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="REntityExportListener" ownership="cpp">
    <function name="registerCustomProperty">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="title" />
          <parameter const="true" type="QString" modifier="&amp;" name="regExp" />
        </parameters>
      </variant>
    </function>
    <function name="checkCustomProperty">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="REntity" modifier="*" name="e" />
        </parameters>
      </variant>
    </function>
    <function name="exportEntity">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RExporter" modifier="*" name="exporter" />
          <parameter const="false" type="REntity" modifier="*" name="entity" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="REntityPickEvent" ownership="cpp">
    <super_list>
      <super name="RInputEvent" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
          <parameter const="true" type="RVector" modifier="&amp;" name="position" />
          <parameter const="false" type="RGraphicsScene" modifier="&amp;" name="s" />
          <parameter const="false" type="RGraphicsView" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </constructor>
    <function name="getEntityId">
      <variant return-type="REntity::Id" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setModifiers">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="Qt::KeyboardModifiers" modifier="" name="m" />
        </parameters>
      </variant>
    </function>
    <function name="getModifiers">
      <variant return-type="Qt::KeyboardModifiers" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="REventFilter" ownership="cpp">
    <super_list>
      <super name="QObject" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QEvent::Type" modifier="" name="type" default="QEvent::None" />
          <parameter const="false" type="bool" modifier="" name="forward" default="true" />
        </parameters>
      </variant>
    </constructor>
    <function name="eventFilter" />
  </class>
  <class name="REventHandler" ownership="cpp">
    <super_list>
      <super name="QObject" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QWidget" modifier="*" name="widget" default="NULL" />
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" default="NULL" />
        </parameters>
      </variant>
    </constructor>
    <function name="isUrl" static="true">
      <variant return-type="bool" static="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="urlString" />
        </parameters>
      </variant>
    </function>
    <function name="getUrlsFromMimeData" static="true">
      <variant return-type="QList&lt;QUrl&gt;" static="true" access="public">
        <parameters>
          <parameter const="false" type="QMimeData" modifier="*" name="mimeData" />
        </parameters>
      </variant>
    </function>
    <function name="drawInfoLabel">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QPainter" modifier="*" name="painter" />
          <parameter const="true" type="RTextLabel" modifier="&amp;" name="textLabel" />
        </parameters>
      </variant>
    </function>
    <function name="drawSnapLabel">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QPainter" modifier="*" name="painter" />
          <parameter const="true" type="RVector" modifier="&amp;" name="pos" />
          <parameter const="true" type="RVector" modifier="&amp;" name="posRestriction" />
          <parameter const="true" type="QString" modifier="&amp;" name="text" />
        </parameters>
      </variant>
    </function>
    <function name="dragEnter">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QDragEnterEvent" modifier="*" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="updateTextLabel">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QPainter" modifier="*" name="painter" />
          <parameter const="true" type="RTextLabel" modifier="&amp;" name="textLabel" />
        </parameters>
      </variant>
    </function>
    <function name="updateSnapInfo">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QPainter" modifier="*" name="painter" />
          <parameter const="false" type="RSnap" modifier="*" name="snap" />
          <parameter const="false" type="RSnapRestriction" modifier="*" name="restriction" />
        </parameters>
      </variant>
    </function>
    <function name="viewportChanged">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="horizontalScrolled">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="pos" />
        </parameters>
      </variant>
    </function>
    <function name="verticalScrolled">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="pos" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RExplodable">
    <!--
    <function name="getExploded">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="segments" default="RDEFAULT_MIN1" />
        </parameters>
      </variant>
    </function>
    -->
  </class>
  <class name="RExportListener">
    <function name="preExportEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
    <function name="postExportEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
    <function name="endOfExportEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RExporter" modifier="*" name="exporter" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RExporter" ownership="cpp">
    <!--
    <constructor>
      <variant>
        <parameters />
      </variant>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="&amp;" name="document" />
          <parameter const="false" type="RMessageHandler" modifier="*" name="messageHandler" default="NULL" />
          <parameter const="false" type="RProgressHandler" modifier="*" name="progressHandler" default="NULL" />
        </parameters>
      </variant>
    </constructor>
    -->
    <function name="init" />
    <function name="getErrorMessage">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLayerSource">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="ls" />
        </parameters>
      </variant>
    </function>
    <function name="setBlockSource">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="bs" />
        </parameters>
      </variant>
    </function>
    <function name="getDocument">
      <variant return-type="RDocument&amp;" const="true" virtual="true" overridable="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setProjectionRenderingHint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getProjectionRenderingHint">
      <variant return-type="RS::ProjectionRenderingHint" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setClipping">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getClipping">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPen">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QPen" modifier="&amp;" name="pen" />
        </parameters>
      </variant>
    </function>
    <function name="getPen">
      <variant return-type="QPen" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RPainterPath" modifier="&amp;" name="path" />
        </parameters>
      </variant>
      <variant return-type="QPen" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setBrush">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QBrush" modifier="&amp;" name="brush" />
        </parameters>
      </variant>
    </function>
    <function name="getBrush">
      <variant return-type="QBrush" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RPainterPath" modifier="&amp;" name="path" />
        </parameters>
      </variant>
      <variant return-type="QBrush" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getColor">
      <variant return-type="RColor" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RColor" modifier="&amp;" name="unresolvedColor" />
        </parameters>
      </variant>
      <variant return-type="RColor" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="resolve" />
        </parameters>
      </variant>
    </function>
    <function name="setEntityAttributes">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="forceSelected" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="setStyle">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="Qt::PenStyle" modifier="" name="penStyle" />
        </parameters>
      </variant>
    </function>
    <function name="setBrushStyle">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="Qt::BrushStyle" modifier="" name="brushStyle" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="setDashPattern">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QVector&lt;qreal&gt;" modifier="&amp;" name="dashes" />
        </parameters>
      </variant>
    </function>
    -->
    <function name="setColor">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="float" modifier="" name="r" />
          <parameter const="false" type="float" modifier="" name="g" />
          <parameter const="false" type="float" modifier="" name="b" />
          <parameter const="false" type="float" modifier="" name="a" default="1.0f" />
        </parameters>
      </variant>
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="true" type="RColor" modifier="&amp;" name="color" />
        </parameters>
      </variant>
    </function>
    <function name="setLineweight">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="RLineweight::Lineweight" modifier="" name="weight" />
        </parameters>
      </variant>
    </function>
    <function name="setLinetypeId">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RLinetype::Id" modifier="" name="ltId" />
        </parameters>
      </variant>
    </function>
    <function name="setLinetypePattern">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLinetypePattern" modifier="&amp;" name="ltPattern" />
        </parameters>
      </variant>
    </function>
    <function name="getLinetypePattern">
      <variant return-type="RLinetypePattern" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBlockRefOrEntity">
      <variant return-type="REntity*" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBlockRefOrEntityId">
      <variant return-type="REntity::Id" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEntity">
      <variant return-type="REntity*" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCurrentBlockRef">
      <variant return-type="REntity*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCurrentViewport">
      <variant return-type="RViewportEntity*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <!--
    <function name="getBlockRefViewportStack">
      <variant return-type="QStack&lt;REntity*&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    -->
    <function name="isEntitySelected">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isPatternContinuous">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLinetypePattern" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="startExport">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="endExport">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="exportDocument">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="exportDocumentSettings">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="exportDocumentSetting">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="true" type="QString" modifier="&amp;" name="dictionaryName" default="&quot;QCAD_OBJECTS&quot;" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="exportIntListWithName">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="dictionaryName" />
          <parameter const="true" type="QString" modifier="&amp;" name="name" />
          <parameter const="true" type="QString" modifier="&amp;" name="listName" />
          <parameter const="false" type="QList&lt;int64_t&gt;" modifier="&amp;" name="values" />
        </parameters>
      </variant>
    </function>
    -->
    <function name="exportLayers">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="exportLayerStates">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="exportBlocks">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="exportViews">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="exportLinetypes">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="exportLayer">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer" modifier="&amp;" name="" />
        </parameters>
      </variant>
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
        </parameters>
      </variant>
    </function>
    <function name="exportLayerState">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RLayerState" modifier="&amp;" name="" />
        </parameters>
      </variant>
    </function>
    <function name="exportBlock">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="RBlock" modifier="&amp;" name="" />
        </parameters>
      </variant>
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
    </function>
    <function name="exportView">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RView" modifier="&amp;" name="" />
        </parameters>
      </variant>
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RView::Id" modifier="" name="viewId" />
        </parameters>
      </variant>
    </function>
    <function name="exportLinetype">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RLinetype" modifier="&amp;" name="" />
        </parameters>
      </variant>
    </function>
    <function name="exportEntities">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="allBlocks" default="true" />
          <parameter const="false" type="bool" modifier="" name="undone" default="false" />
          <parameter const="false" type="bool" modifier="" name="invisible" default="false" />
        </parameters>
      </variant>
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="QSet&lt;REntity::Id&gt;" modifier="&amp;" name="entityIds" />
          <parameter const="false" type="bool" modifier="" name="allBlocks" default="true" />
        </parameters>
      </variant>
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="box" />
        </parameters>
      </variant>
    </function>
    <function name="exportEntity">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="REntity" modifier="&amp;" name="entity" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
          <parameter const="false" type="bool" modifier="" name="allBlocks" default="true" />
          <parameter const="false" type="bool" modifier="" name="forceSelected" default="false" />
        </parameters>
      </variant>
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
          <parameter const="false" type="bool" modifier="" name="allBlocks" default="true" />
          <parameter const="false" type="bool" modifier="" name="forceSelected" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getEntityLayer">
      <variant return-type="QSharedPointer&lt;RLayer&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="REntity" modifier="&amp;" name="entity" />
        </parameters>
      </variant>
    </function>
    <function name="isVisible">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="REntity" modifier="&amp;" name="entity" />
        </parameters>
      </variant>
    </function>
    <function name="startEntity">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="" />
        </parameters>
      </variant>
    </function>
    <function name="endEntity">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="exportCurrentEntity">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
          <parameter const="false" type="bool" modifier="" name="forceSelected" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="unexportEntity">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
        </parameters>
      </variant>
    </function>
    <function name="exportShapes">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" modifier="&amp;" name="shapes" />
        </parameters>
      </variant>
    </function>
    <function name="exportShape">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;RShape&gt;" modifier="" name="shape" />
        </parameters>
      </variant>
    </function>
    <function name="exportShapeSegment">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;RShape&gt;" modifier="" name="shape" />
          <parameter const="false" type="double" modifier="" name="angle" />
        </parameters>
      </variant>
    </function>
    <function name="exportLine">
      <variant return-type="double" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="line" />
          <parameter const="false" type="double" modifier="" name="offset" default="RNANDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="exportLinetypeShape">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="QList&lt;RPainterPath&gt;" modifier="&amp;" name="pps" />
          <parameter const="true" type="RLine" modifier="&amp;" name="line" />
          <parameter const="false" type="double" modifier="" name="total" />
          <parameter const="false" type="double" modifier="" name="length" />
          <parameter const="false" type="double" modifier="" name="angle" />
          <parameter const="true" type="RVector" modifier="&amp;" name="cursor" />
        </parameters>
      </variant>
    </function>
    <function name="exportLineSegment">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="line" />
          <parameter const="false" type="double" modifier="" name="angle" default="RNANDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="exportXLine">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RXLine" modifier="&amp;" name="xLine" />
        </parameters>
      </variant>
    </function>
    <function name="exportRay">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RRay" modifier="&amp;" name="ray" />
        </parameters>
      </variant>
    </function>
    <function name="exportPoint">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="true" type="RPoint" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="exportCircle">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="true" type="RCircle" modifier="&amp;" name="circle" />
        </parameters>
      </variant>
    </function>
    <function name="exportArc">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="true" type="RArc" modifier="&amp;" name="arc" />
          <parameter const="false" type="double" modifier="" name="offset" default="RNANDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="exportArcSegment">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="true" type="RArc" modifier="&amp;" name="arc" />
          <parameter const="false" type="bool" modifier="" name="allowForZeroLength" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="exportEllipse">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="true" type="REllipse" modifier="&amp;" name="ellipse" />
          <parameter const="false" type="double" modifier="" name="offset" default="RNANDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="exportPolyline">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="polyline" />
          <parameter const="false" type="bool" modifier="" name="polylineGen" default="true" />
          <parameter const="false" type="double" modifier="" name="offset" default="RNANDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="exportSpline">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="true" type="RSpline" modifier="&amp;" name="spline" />
          <parameter const="false" type="double" modifier="" name="offset" default="RNANDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="exportSplineSegment">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RSpline" modifier="&amp;" name="spline" />
        </parameters>
      </variant>
    </function>
    <function name="exportExplodable">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RExplodable" modifier="&amp;" name="explodable" />
          <parameter const="false" type="double" modifier="" name="offset" default="RNANDOUBLE" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="exportPainterPathSource">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RPainterPathSource" modifier="&amp;" name="pathSource" />
          <parameter const="false" type="double" modifier="" name="z" default="0.0" />
        </parameters>
      </variant>
    </function>
    -->
    <function name="exportPainterPaths">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RPainterPath&gt;" modifier="&amp;" name="paths" />
          <parameter const="false" type="double" modifier="" name="angle" />
          <parameter const="true" type="RVector" modifier="&amp;" name="pos" />
        </parameters>
      </variant>
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RPainterPath&gt;" modifier="&amp;" name="paths" />
          <parameter const="false" type="double" modifier="" name="z" default="0.0" />
        </parameters>
      </variant>
    </function>
    <function name="exportBoundingBoxPaths">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RPainterPath&gt;" modifier="&amp;" name="paths" />
        </parameters>
      </variant>
    </function>
    <function name="exportImage">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="true" type="RImageData" modifier="&amp;" name="image" />
          <parameter const="false" type="bool" modifier="" name="forceSelected" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="exportText">
      <variant return-type="QList&lt;RPainterPath&gt;" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="true" type="RTextBasedData" modifier="&amp;" name="text" />
          <parameter const="false" type="bool" modifier="" name="forceSelected" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="exportClipRectangle">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="clipRectangle" />
          <parameter const="false" type="bool" modifier="" name="forceSelected" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="exportTransform">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="true" type="RTransform" modifier="&amp;" name="t" />
        </parameters>
      </variant>
    </function>
    <function name="exportEndTransform">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="exportThickPolyline">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="polyline" />
        </parameters>
      </variant>
    </function>
    <function name="exportQuad">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="p2" />
          <parameter const="true" type="RVector" modifier="&amp;" name="p3" />
          <parameter const="true" type="RVector" modifier="&amp;" name="p4" />
        </parameters>
      </variant>
    </function>
    <function name="exportVerticalQuad">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="p2" />
          <parameter const="false" type="double" modifier="" name="height" />
        </parameters>
      </variant>
    </function>
    <function name="exportBox">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="box" />
        </parameters>
      </variant>
    </function>
    <function name="exportTriangle">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="true" type="RTriangle" modifier="&amp;" name="triangle" />
        </parameters>
      </variant>
    </function>
    <function name="exportRectangle">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="p2" />
        </parameters>
      </variant>
    </function>
    <function name="getLineTypePatternScale">
      <variant return-type="double" virtual="true" const="true" overridable="true" access="public">
        <parameters>
          <parameter const="true" type="RLinetypePattern" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="isTextRenderedAsText">
      <variant return-type="bool" virtual="true" const="true" overridable="true" access="public">
        <parameters />
      </variant>
    </function>
    <!--
    <function name="getEntityStack">
      <variant return-type="QStack&lt;REntity*&gt;" access="public">
        <parameters />
      </variant>
    </function>
    -->
    <function name="pushEntity">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="REntity" modifier="*" name="e" />
        </parameters>
      </variant>
    </function>
    <function name="popEntity">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDraftMode">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="toggleDraftMode">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDraftMode">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setTwoColorSelectedMode">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getTwoColorSelectedMode">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setScreenBasedLinetypes">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="toggleScreenBasedLinetypes">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getScreenBasedLinetypes">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isVisualExporter">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setVisualExporter">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getExportInvisible">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setExportInvisible">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getPixelSizeHint">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCurrentPixelSizeHint">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPixelSizeHint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getPixelUnit">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPixelUnit">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getPixelWidth">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPixelWidth">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="setEnablePatterns">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RFaceData">
    <super_list>
      <super name="RSolidData" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="p2" />
          <parameter const="true" type="RVector" modifier="&amp;" name="p3" />
          <parameter const="true" type="RVector" modifier="&amp;" name="p4" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RFaceEntity" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
      <super name="REntity" />
    </super_list>
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyProtected" />
    <property static="true" type="RPropertyTypeId" name="PropertyWorkingSet" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyLayer" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetype" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetypeScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineweight" />
    <property static="true" type="RPropertyTypeId" name="PropertyColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDisplayedColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDrawOrder" />
    <property static="true" type="RPropertyTypeId" name="PropertyPoint1X" />
    <property static="true" type="RPropertyTypeId" name="PropertyPoint1Y" />
    <property static="true" type="RPropertyTypeId" name="PropertyPoint1Z" />
    <property static="true" type="RPropertyTypeId" name="PropertyPoint2X" />
    <property static="true" type="RPropertyTypeId" name="PropertyPoint2Y" />
    <property static="true" type="RPropertyTypeId" name="PropertyPoint2Z" />
    <property static="true" type="RPropertyTypeId" name="PropertyPoint3X" />
    <property static="true" type="RPropertyTypeId" name="PropertyPoint3Y" />
    <property static="true" type="RPropertyTypeId" name="PropertyPoint3Z" />
    <property static="true" type="RPropertyTypeId" name="PropertyPoint4X" />
    <property static="true" type="RPropertyTypeId" name="PropertyPoint4Y" />
    <property static="true" type="RPropertyTypeId" name="PropertyPoint4Z" />
    <property static="true" type="RPropertyTypeId" name="PropertyLength" />
    <property static="true" type="RPropertyTypeId" name="PropertyTotalLength" />
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="RFaceData" modifier="&amp;" name="data" />
        </parameters>
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStaticPropertyTypeIds" static="true">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RFaceEntity*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="exportEntity">
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RExporter" modifier="&amp;" name="e" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
          <parameter const="false" type="bool" modifier="" name="forceSelected" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getData">
      <variant return-type="RFaceData&amp;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getVertexAt">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="countVertices">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStartPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection1">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection2">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="reverse">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTrimEnd">
      <variant return-type="RS::Ending" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" />
        </parameters>
      </variant>
    </function>
    <function name="trimStartPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="trimEndPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getLength">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getExploded">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="print" />
  </class>
  <class name="RFileCache">
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getContents" static="true">
      <variant return-type="QString" static="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fileName" />
          <parameter const="false" type="bool" modifier="" name="forceReload" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getBuffer" static="true">
      <variant return-type="QBuffer*" static="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fileName" />
          <parameter const="false" type="bool" modifier="" name="forceReload" default="false" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RFileExporter" ownership="cpp">
    <super_list>
      <super name="RExporter" />
    </super_list>
    <!--
    <constructor>
      <variant>
        <parameters />
      </variant>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="&amp;" name="document" />
          <parameter const="false" type="RMessageHandler" modifier="*" name="messageHandler" default="NULL" />
          <parameter const="false" type="RProgressHandler" modifier="*" name="progressHandler" default="NULL" />
        </parameters>
      </variant>
    </constructor>
    -->
    <function name="getCorrectedFileName">
      <variant return-type="QString" virtual="true" pure-virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fileName" />
          <parameter const="true" type="QString" modifier="&amp;" name="nameFilter" />
        </parameters>
      </variant>
    </function>
    <function name="exportFile">
      <variant return-type="bool" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fileName" />
          <parameter const="true" type="QString" modifier="&amp;" name="nameFilter" />
          <parameter const="false" type="bool" modifier="" name="setFileName" default="true" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RFileExporterAdapter" ownership="cpp" inheritable="true">
    <super_list>
      <super name="RExporter" />
      <super name="RFileExporter" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="&amp;" name="document" />
          <parameter const="false" type="RMessageHandler" modifier="*" name="messageHandler" default="NULL" />
          <parameter const="false" type="RProgressHandler" modifier="*" name="progressHandler" default="NULL" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getCorrectedFileName">
      <variant return-type="QString" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fileName" />
          <parameter const="true" type="QString" modifier="&amp;" name="nameFilter" />
        </parameters>
      </variant>
    </function>
    <function name="exportFile">
      <variant return-type="bool" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fileName" />
          <parameter const="true" type="QString" modifier="&amp;" name="nameFilter" />
          <parameter const="false" type="bool" modifier="" name="setFileName" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="exportPoint">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="true" type="RPoint" modifier="&amp;" name="" />
        </parameters>
      </variant>
    </function>
    <function name="exportArcSegment">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="true" type="RArc" modifier="&amp;" name="" />
          <parameter const="false" type="bool" modifier="" name="" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="exportLineSegment">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="" />
          <parameter const="false" type="double" modifier="" name="" default="RNANDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="exportTriangle">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="true" type="RTriangle" modifier="&amp;" name="" />
        </parameters>
      </variant>
    </function>
    <function name="exportXLine">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="true" type="RXLine" modifier="&amp;" name="" />
        </parameters>
      </variant>
    </function>
    <function name="getLineTypePatternScale">
      <variant return-type="double" virtual="true" const="true" overridable="true" access="public">
        <parameters>
          <parameter const="true" type="RLinetypePattern" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RFileExporterFactory" ownership="cpp">
    <function name="getFilterStrings">
      <variant return-type="QStringList" virtual="true" pure-virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="canExport">
      <variant return-type="int" virtual="true" pure-virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fileName" />
          <parameter const="true" type="QString" modifier="&amp;" name="nameFilter" default="&quot;&quot;" />
        </parameters>
      </variant>
    </function>
    <function name="instantiate">
      <variant return-type="RFileExporter*" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="&amp;" name="document" />
          <!--
          <parameter const="false" type="RMessageHandler" modifier="*" name="messageHandler" default="NULL" />
          <parameter const="false" type="RProgressHandler" modifier="*" name="progressHandler" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RFileExporterFactoryAdapter" ownership="cpp">
    <super_list>
      <super name="RFileExporterFactory" />
    </super_list>
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getFilterStrings">
      <variant return-type="QStringList" virtual="true" overridable="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="canExport">
      <variant return-type="int" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fileName" />
          <parameter const="true" type="QString" modifier="&amp;" name="nameFilter" default="&quot;&quot;" />
        </parameters>
      </variant>
    </function>
    <function name="instantiate">
      <variant return-type="RFileExporter*" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="&amp;" name="document" />
          <!--
          <parameter const="false" type="RMessageHandler" modifier="*" name="messageHandler" default="NULL" />
          <parameter const="false" type="RProgressHandler" modifier="*" name="progressHandler" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RFileExporterRegistry">
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="registerFileExporter" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters>
          <parameter const="false" type="RFileExporterFactory" modifier="*" name="factory" />
          <parameter const="false" type="bool" modifier="" name="prepend" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="unregisterFileExporter" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters>
          <parameter const="false" type="RFileExporterFactory" modifier="*" name="factory" />
        </parameters>
      </variant>
    </function>
    <function name="getFileExporter" static="true">
      <variant return-type="RFileExporter*" static="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fileName" />
          <parameter const="true" type="QString" modifier="&amp;" name="nameFilter" />
          <parameter const="false" type="RDocument" modifier="&amp;" name="document" />
          <!--
          <parameter const="false" type="RMessageHandler" modifier="*" name="messageHandler" default="NULL" />
          <parameter const="false" type="RProgressHandler" modifier="*" name="progressHandler" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getFilterStrings" static="true">
      <variant return-type="QStringList" static="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RFileImporter" ownership="cpp">
    <super_list>
      <super name="RImporter" />
    </super_list>
    <!--
    <constructor>
      <variant>
        <parameters />
      </variant>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="&amp;" name="document" />
          <parameter const="false" type="RMessageHandler" modifier="*" name="messageHandler" default="NULL" />
          <parameter const="false" type="RProgressHandler" modifier="*" name="progressHandler" default="NULL" />
        </parameters>
      </variant>
    </constructor>
    -->
    <function name="importFile">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fileName" />
          <parameter const="true" type="QString" modifier="&amp;" name="nameFilter" />
          <parameter const="true" type="QVariantMap" modifier="&amp;" name="params" default="RDEFAULT_QVARIANTMAP" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RFileImporterAdapter" ownership="cpp">
    <super_list>
      <super name="RImporter" />
      <super name="RFileImporter" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="&amp;" name="document" />
          <parameter const="false" type="RMessageHandler" modifier="*" name="messageHandler" default="NULL" />
          <parameter const="false" type="RProgressHandler" modifier="*" name="progressHandler" default="NULL" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="importFile">
      <variant return-type="bool" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fileName" />
          <parameter const="true" type="QString" modifier="&amp;" name="nameFilter" />
          <parameter const="true" type="QVariantMap" modifier="&amp;" name="params" default="RDEFAULT_QVARIANTMAP" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RFileImporterFactory" ownership="cpp">
    <function name="getFilterStrings">
      <variant return-type="QStringList" virtual="true" pure-virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="canImport">
      <variant return-type="int" virtual="true" pure-virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fileName" />
          <parameter const="true" type="QString" modifier="&amp;" name="nameFilter" default="&quot;&quot;" />
        </parameters>
      </variant>
    </function>
    <function name="instantiate">
      <variant return-type="RFileImporter*" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="&amp;" name="document" />
          <!--
          <parameter const="false" type="RMessageHandler" modifier="*" name="messageHandler" default="NULL" />
          <parameter const="false" type="RProgressHandler" modifier="*" name="progressHandler" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RFileImporterFactoryAdapter" ownership="cpp">
    <super_list>
      <super name="RFileImporterFactory" />
    </super_list>
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getFilterStrings">
      <variant return-type="QStringList" virtual="true" overridable="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="canImport">
      <variant return-type="int" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fileName" />
          <parameter const="true" type="QString" modifier="&amp;" name="nameFilter" default="&quot;&quot;" />
        </parameters>
      </variant>
    </function>
    <function name="instantiate">
      <variant return-type="RFileImporter*" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="&amp;" name="document" />
          <parameter const="false" type="RMessageHandler" modifier="*" name="messageHandler" default="NULL" />
          <parameter const="false" type="RProgressHandler" modifier="*" name="progressHandler" default="NULL" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RFileImporterRegistry">
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="registerFileImporter" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters>
          <parameter const="false" type="RFileImporterFactory" modifier="*" name="factory" />
        </parameters>
      </variant>
    </function>
    <function name="unregisterFileImporter" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters>
          <parameter const="false" type="RFileImporterFactory" modifier="*" name="factory" />
        </parameters>
      </variant>
    </function>
    <function name="getFileImporter" static="true">
      <variant return-type="RFileImporter*" static="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fileName" />
          <parameter const="true" type="QString" modifier="&amp;" name="nameFilter" />
          <parameter const="false" type="RDocument" modifier="&amp;" name="document" />
          <!--
          <parameter const="false" type="RMessageHandler" modifier="*" name="messageHandler" default="NULL" />
          <parameter const="false" type="RProgressHandler" modifier="*" name="progressHandler" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getFilterStrings" static="true">
      <variant return-type="QStringList" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasFileImporter" static="true">
      <variant return-type="bool" static="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fileName" />
          <parameter const="true" type="QString" modifier="&amp;" name="nameFilter" />
        </parameters>
      </variant>
    </function>
    <function name="getFilterExtensions" static="true">
      <variant return-type="QStringList" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getFilterExtensionPatterns" static="true">
      <variant return-type="QStringList" static="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RFileSystemModel" ownership="cpp">
    <super_list>
      <super name="QObject" />
      <super name="QAbstractItemModel" />
      <super name="QFileSystemModel" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QObject" modifier="*" name="parent" default="0" />
        </parameters>
      </variant>
    </constructor>
    <function name="setRootPath">
      <variant return-type="QModelIndex" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="newPath" />
        </parameters>
      </variant>
    </function>
    <function name="rootPath">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="pathIndex">
      <variant return-type="QModelIndex" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="path" />
          <parameter const="false" type="int" modifier="" name="column" default="0" />
        </parameters>
      </variant>
    </function>
    <function name="index">
      <variant return-type="QModelIndex" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="row" />
          <parameter const="false" type="int" modifier="" name="column" />
          <parameter const="true" type="QModelIndex" modifier="&amp;" name="parent" default="RDEFAULT_QMODELINDEX" />
        </parameters>
      </variant>
    </function>
    <function name="filePath">
      <variant return-type="QString" const="true" access="public">
        <parameters>
          <parameter const="true" type="QModelIndex" modifier="&amp;" name="index" />
        </parameters>
      </variant>
    </function>
    <function name="setFilter">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QDir::Filters" modifier="" name="filters" />
        </parameters>
      </variant>
    </function>
    <function name="isDir">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="QModelIndex" modifier="&amp;" name="index" />
        </parameters>
      </variant>
    </function>
    <function name="setHeaderData">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="section" />
          <parameter const="false" type="Qt::Orientation" modifier="" name="orientation" />
          <parameter const="true" type="QString" modifier="&amp;" name="value" />
          <parameter const="false" type="int" modifier="" name="role" default="Qt::EditRole" />
        </parameters>
      </variant>
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="section" />
          <parameter const="false" type="Qt::Orientation" modifier="" name="orientation" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="int" modifier="" name="role" default="Qt::EditRole" />
        </parameters>
      </variant>
    </function>
    <function name="rowCount">
      <variant return-type="int" const="true" access="public">
        <parameters>
          <parameter const="true" type="QModelIndex" modifier="&amp;" name="parent" default="RDEFAULT_QMODELINDEX" />
        </parameters>
      </variant>
    </function>
    <function name="setIconProvider">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QFileIconProvider" modifier="*" name="provider" />
        </parameters>
      </variant>
    </function>
    <function name="setNameFilter">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="filter" />
        </parameters>
      </variant>
    </function>
    <function name="setNameFilters">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QStringList" modifier="&amp;" name="filters" />
        </parameters>
      </variant>
    </function>
    <function name="setNameFilterDisables">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="enable" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="setItemData">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="QModelIndex" modifier="&amp;" name="index" />
          <parameter const="true" type="QMap&lt;int,QVariant&gt;" modifier="&amp;" name="roles" />
        </parameters>
      </variant>
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="QModelIndex" modifier="&amp;" name="index" />
          <parameter const="false" type="Qt::ItemDataRole" modifier="" name="role" />
          <parameter const="true" type="QString" modifier="&amp;" name="value" />
        </parameters>
      </variant>
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="QModelIndex" modifier="&amp;" name="index" />
          <parameter const="false" type="Qt::ItemDataRole" modifier="" name="role" />
          <parameter const="true" type="QColor" modifier="&amp;" name="value" />
        </parameters>
      </variant>
    </function>
    -->
    <!--
    <function name="itemData">
      <variant return-type="QMap&lt;int,QVariant&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="QModelIndex" modifier="&amp;" name="index" />
        </parameters>
      </variant>
    </function>
    -->
    <function name="canFetchMore">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="QModelIndex" modifier="&amp;" name="parent" />
        </parameters>
      </variant>
    </function>
    <function name="fetchMore">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QModelIndex" modifier="&amp;" name="parent" />
        </parameters>
      </variant>
    </function>
    <function name="data">
      <variant return-type="QVariant" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QModelIndex" modifier="&amp;" name="index" />
          <parameter const="false" type="int" modifier="" name="role" default="Qt::DisplayRole" />
        </parameters>
      </variant>
    </function>
    <function name="removeRow">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="row" />
          <parameter const="true" type="QModelIndex" modifier="&amp;" name="parent" default="QModelIndex()" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RFlowLayout" ownership="cpp">
    <super_list>
      <super name="QObject" />
      <super name="QLayoutItem" />
      <super name="QLayout" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QWidget" modifier="*" name="parent" />
          <parameter const="false" type="int" modifier="" name="margin" default="RDEFAULT_MIN1" />
          <parameter const="false" type="int" modifier="" name="hSpacing" default="RDEFAULT_MIN1" />
          <parameter const="false" type="int" modifier="" name="vSpacing" default="RDEFAULT_MIN1" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="false" type="int" modifier="" name="margin" default="RDEFAULT_MIN1" />
          <parameter const="false" type="int" modifier="" name="hSpacing" default="RDEFAULT_MIN1" />
          <parameter const="false" type="int" modifier="" name="vSpacing" default="RDEFAULT_MIN1" />
        </parameters>
      </variant>
    </constructor>
    <function name="setIconSize">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QSize" modifier="&amp;" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="setListViewMode">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="addItem">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QLayoutItem" modifier="*" name="item" />
        </parameters>
      </variant>
    </function>
    <function name="horizontalSpacing">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="verticalSpacing">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="expandingDirections">
      <variant return-type="Qt::Orientations" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasHeightForWidth">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="heightForWidth">
      <variant return-type="int" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="" />
        </parameters>
      </variant>
    </function>
    <function name="count">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="itemAt">
      <variant return-type="QLayoutItem*" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="index" />
        </parameters>
      </variant>
    </function>
    <function name="minimumSize">
      <variant return-type="QSize" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setGeometry">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QRect" modifier="&amp;" name="rect" />
        </parameters>
      </variant>
    </function>
    <function name="sizeHint">
      <variant return-type="QSize" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="takeAt">
      <variant return-type="QLayoutItem*" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="index" />
        </parameters>
      </variant>
    </function>
    <function name="insertAction">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="index" />
          <parameter const="false" type="QAction" modifier="*" name="action" />
        </parameters>
      </variant>
    </function>
    <function name="indexOf">
      <variant return-type="int" const="true" access="public">
        <parameters>
          <parameter const="false" type="QAction" modifier="*" name="action" />
        </parameters>
      </variant>
      <variant return-type="int" const="true" access="public">
        <parameters>
          <parameter const="false" type="QWidget" modifier="*" name="widget" />
        </parameters>
      </variant>
    </function>
    <function name="invalidate">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="doLayout" />
    <function name="smartSpacing" />
  </class>
  <class name="RFocusListener" ownership="cpp">
    <function name="updateFocus">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="di" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RFocusListenerAdapter" ownership="cpp" inheritable="true">
    <super_list>
      <super name="QObject" />
      <super name="RFocusListener" />
    </super_list>
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="updateFocus">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="di" />
        </parameters>
      </variant>
    </function>
    <function name="focusUpdated">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="di" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RFont">
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fileName" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="isValid">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getFileName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEncoding">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getNames">
      <variant return-type="const QStringList" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAuthors">
      <variant return-type="const QStringList" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLetterSpacing">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getWordSpacing">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLineSpacingFactor">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAuxLinePositions">
      <variant return-type="QList&lt;double&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAuxLinePositionsString">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="load">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isLoaded">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <!--
    <function name="getGlyphMap">
      <variant return-type="QMap&lt;QChar,RPainterPath&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    -->
    <function name="getGlyphNames">
      <variant return-type="QList&lt;QChar&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getGlyph">
      <variant return-type="RPainterPath" const="true" access="public">
        <parameters>
          <parameter const="true" type="QChar" modifier="&amp;" name="ch" />
          <parameter const="false" type="bool" modifier="" name="draft" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getShapeNames">
      <variant return-type="QList&lt;QString&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getShape">
      <variant return-type="RPainterPath" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="name" />
        </parameters>
      </variant>
    </function>
    <function name="getShapeName">
      <variant return-type="QString" const="true" access="public">
        <parameters>
          <parameter const="true" type="QChar" modifier="&amp;" name="ch" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RFontChooserWidget">
    <super_list>
      <super name="QObject" />
      <super name="QWidget" />
    </super_list>
    <property type="QFont" name="chosenFont" read="getChosenFont" write="setChosenFont" />
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QWidget" modifier="*" name="parent" default="0" />
        </parameters>
      </variant>
    </constructor>
    <function name="getChosenFont">
      <variant return-type="QFont" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setChosenFont">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QFont" modifier="&amp;" name="font" />
        </parameters>
      </variant>
    </function>
    <function name="getSize">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setSize">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="size" />
        </parameters>
      </variant>
    </function>
    <function name="getLabel">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLabel">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="valueChanged">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="true" type="QFont" modifier="&amp;" name="font" />
        </parameters>
      </variant>
    </function>
    <function name="chosenFontChanged">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QFont" modifier="&amp;" name="font" />
        </parameters>
      </variant>
    </function>
    <function name="sizeChanged">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="index" />
        </parameters>
      </variant>
    </function>
    <function name="resizeEvent">
      <variant return-type="void" access="protected">
        <parameters>
          <parameter const="false" type="QResizeEvent" modifier="*" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="updateSizeCombo" />
  </class>
  <class name="RFontList">
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="initSubstitutions" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="uninit" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getNames" static="true">
      <variant return-type="QStringList" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSubName" static="true">
      <variant return-type="QString" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="resName" />
        </parameters>
      </variant>
    </function>
    <function name="get" static="true">
      <variant return-type="RFont*" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="resName" />
          <parameter const="false" type="bool" modifier="" name="substitute" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="isCadFont" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fontName" />
          <parameter const="true" type="QString" modifier="&amp;" name="fontFile" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RGraphicsScene" ownership="cpp">
    <super_list>
      <super name="RExporter" />
    </super_list>
    <function name="getDocumentInterface">
      <variant return-type="RDocumentInterface&amp;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getGraphicsViews">
      <variant return-type="QList&lt;RGraphicsView*&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clear">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="exportDocumentSettings">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="regenerate">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="QSet&lt;REntity::Id&gt;" modifier="&amp;" name="affectedEntities" />
          <parameter const="false" type="bool" modifier="" name="updateViews" />
        </parameters>
      </variant>
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="undone" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="updateSelectionStatus">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="QSet&lt;REntity::Id&gt;" modifier="&amp;" name="affectedEntities" />
          <parameter const="false" type="bool" modifier="" name="updateViews" />
        </parameters>
      </variant>
    </function>
    <function name="regenerateViews">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="force" default="false" />
        </parameters>
      </variant>
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="QSet&lt;RObject::Id&gt;" modifier="&amp;" name="affectedEntities" />
        </parameters>
      </variant>
    </function>
    <function name="repaintViews">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCursor">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QCursor" modifier="&amp;" name="cursor" />
        </parameters>
      </variant>
    </function>
    <function name="handleTerminateEvent">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RTerminateEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="handleKeyPressEvent">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QKeyEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="handleKeyReleaseEvent">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QKeyEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="handleMouseMoveEvent">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RMouseEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="handleMousePressEvent">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RMouseEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="handleMouseReleaseEvent">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RMouseEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="handleMouseDoubleClickEvent">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RMouseEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="handleWheelEvent">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RWheelEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="handleTabletEvent">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RTabletEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="handleSwipeGestureEvent">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QSwipeGesture" modifier="&amp;" name="gesture" />
        </parameters>
      </variant>
    </function>
    <function name="handlePanGestureEvent">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QPanGesture" modifier="&amp;" name="gesture" />
        </parameters>
      </variant>
    </function>
    <function name="handlePinchGestureEvent">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QPinchGesture" modifier="&amp;" name="gesture" />
        </parameters>
      </variant>
    </function>
    <function name="registerView">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RGraphicsView" modifier="*" name="view" />
          <parameter const="false" type="bool" modifier="" name="regen" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="unregisterView">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RGraphicsView" modifier="*" name="view" />
        </parameters>
      </variant>
    </function>
    <function name="beginPreview">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="endPreview">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clearPreview">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isPreviewEmpty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="addToPreview">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
          <parameter const="false" type="QList&lt;RGraphicsSceneDrawable&gt;" modifier="&amp;" name="drawables" />
        </parameters>
      </variant>
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
          <parameter const="false" type="RGraphicsSceneDrawable" modifier="&amp;" name="drawable" />
        </parameters>
      </variant>
    </function>
    <function name="beginNoColorMode">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="endNoColorMode">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getNoColorMode">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getHighlightedReferencePoint">
      <variant return-type="RRefPoint" access="public">
        <parameters />
      </variant>
    </function>
    <function name="highlightEntity">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="REntity" modifier="&amp;" name="entity" />
        </parameters>
      </variant>
    </function>
    <function name="highlightReferencePoint">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RRefPoint" modifier="&amp;" name="position" />
        </parameters>
      </variant>
    </function>
    <function name="selectReferencePoints">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="box" />
          <parameter const="false" type="bool" modifier="" name="add" />
        </parameters>
      </variant>
    </function>
    <function name="exportCurrentEntity">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
          <parameter const="false" type="bool" modifier="" name="forceSelected" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="unexportEntity">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
        </parameters>
      </variant>
    </function>
    <function name="countReferencePoints">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <!--
    <function name="getReferencePoints">
      <variant return-type="QMap&lt;REntity::Id,QList&lt;RRefPoint&gt;&gt;&amp;" access="public">
        <parameters />
      </variant>
    </function>
    -->
    <function name="hasSelectedReferencePoints">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="dump">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="exportReferencePoints" />
  </class>
  <class name="RGraphicsSceneDrawable">
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RPainterPath" modifier="&amp;" name="pp" />
          <parameter const="true" type="RVector" modifier="&amp;" name="os" default="RVector::nullVector" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RImageData" modifier="&amp;" name="img" />
          <parameter const="true" type="RVector" modifier="&amp;" name="os" default="RVector::nullVector" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RTextBasedData" modifier="&amp;" name="txt" />
          <parameter const="true" type="RVector" modifier="&amp;" name="os" default="RVector::nullVector" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RTransform" modifier="&amp;" name="tf" />
          <parameter const="true" type="RVector" modifier="&amp;" name="os" default="RVector::nullVector" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RGraphicsSceneDrawable" modifier="&amp;" name="other" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <enum name="Type">
      <key>Invalid</key>
      <key>PainterPath</key>
      <key>PainterPathRay</key>
      <key>PainterPathXLine</key>
      <key>Image</key>
      <key>Text</key>
      <key>Transform</key>
      <key>EndTransform</key>
    </enum>
    <enum name="Mode">
      <key>NoMode</key>
      <key>NoPlot</key>
      <key>PixelUnit</key>
      <key>WorkingSet</key>
    </enum>
    <function name="createFromPainterPath" static="true">
      <variant return-type="RGraphicsSceneDrawable" access="public">
        <parameters>
          <parameter const="true" type="RPainterPath" modifier="&amp;" name="pp" />
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" default="RVector::nullVector" />
        </parameters>
      </variant>
    </function>
    <function name="createFromImage" static="true">
      <variant return-type="RGraphicsSceneDrawable" access="public">
        <parameters>
          <parameter const="true" type="RImageData" modifier="&amp;" name="img" />
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" default="RVector::nullVector" />
        </parameters>
      </variant>
    </function>
    <function name="createFromText" static="true">
      <variant return-type="RGraphicsSceneDrawable" access="public">
        <parameters>
          <parameter const="true" type="RTextBasedData" modifier="&amp;" name="txt" />
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" default="RVector::nullVector" />
        </parameters>
      </variant>
    </function>
    <function name="createFromTransform" static="true">
      <variant return-type="RGraphicsSceneDrawable" access="public">
        <parameters>
          <parameter const="true" type="RTransform" modifier="&amp;" name="transform" />
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" default="RVector::nullVector" />
        </parameters>
      </variant>
    </function>
    <function name="createEndTransform" static="true">
      <variant return-type="RGraphicsSceneDrawable" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="uninit">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getType">
      <variant return-type="RGraphicsSceneDrawable::Type" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isPainterPath">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isText">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isImage">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setMode">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RGraphicsSceneDrawable::Mode" modifier="" name="mode" />
          <parameter const="false" type="bool" modifier="" name="on" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getMode">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="RGraphicsSceneDrawable::Mode" modifier="" name="mode" />
        </parameters>
      </variant>
    </function>
    <function name="setNoPlot">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getNoPlot">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPixelUnit">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getPixelUnit">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setWorkingSet">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isWorkingSet">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPainterPath">
      <variant return-type="RPainterPath&amp;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getImage">
      <variant return-type="RImageData&amp;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getText">
      <variant return-type="RTextBasedData&amp;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTransform">
      <variant return-type="RTransform&amp;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getOffset">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setOffset">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="o" />
        </parameters>
      </variant>
    </function>
    <function name="getDocument">
      <variant return-type="RDocument*" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setSelected">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="setHighlighted">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RGraphicsSceneQt" ownership="cpp">
    <super_list>
      <super name="RExporter" />
      <super name="RGraphicsScene" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="&amp;" name="documentInterface" />
        </parameters>
      </variant>
    </constructor>
    <function name="getGraphicsView">
      <variant return-type="RGraphicsViewImage*" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clear">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="updateSelectionStatus">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="QSet&lt;REntity::Id&gt;" modifier="&amp;" name="affectedEntities" />
          <parameter const="false" type="bool" modifier="" name="updateViews" />
        </parameters>
      </variant>
    </function>
    <function name="clearPreview">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="exportEntities">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="allBlocks" default="true" />
          <parameter const="false" type="bool" modifier="" name="undone" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="exportEntitiesThread">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="threadId" />
          <parameter const="false" type="QList&lt;REntity::Id&gt;" modifier="&amp;" name="list" />
          <parameter const="false" type="int" modifier="" name="start" />
          <parameter const="false" type="int" modifier="" name="end" />
        </parameters>
      </variant>
    </function>
    <function name="exportEntityThread">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="threadId" />
          <parameter const="false" type="REntity::Id" modifier="" name="id" />
        </parameters>
      </variant>
    </function>
    <function name="beginPath">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="endPath">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="transformAndApplyPatternPath">
      <variant return-type="void" const="true" access="public">
        <parameters>
          <parameter const="false" type="RPainterPath" modifier="&amp;" name="path" />
        </parameters>
      </variant>
    </function>
    <function name="unexportEntity">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
        </parameters>
      </variant>
    </function>
    <function name="exportPoint">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RPoint" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="exportLine">
      <variant return-type="double" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="line" />
          <parameter const="false" type="double" modifier="" name="offset" default="RNANDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="exportArc">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RArc" modifier="&amp;" name="arc" />
          <parameter const="false" type="double" modifier="" name="offset" default="RNANDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="exportThickPolyline">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="polyline" />
        </parameters>
      </variant>
    </function>
    <function name="exportPolyline">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="polyline" />
          <parameter const="false" type="bool" modifier="" name="polylineGen" default="true" />
          <parameter const="false" type="double" modifier="" name="offset" default="RNANDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="exportPolylineFill">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="polyline" />
        </parameters>
      </variant>
    </function>
    <function name="exportSpline">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RSpline" modifier="&amp;" name="spline" />
          <parameter const="false" type="double" modifier="" name="offset" default="RNANDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="exportArcSegment">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RArc" modifier="&amp;" name="arc" />
          <parameter const="false" type="bool" modifier="" name="allowForZeroLength" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="exportLineSegment">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="line" />
          <parameter const="false" type="double" modifier="" name="angle" default="RNANDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="exportXLine">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RXLine" modifier="&amp;" name="xLine" />
        </parameters>
      </variant>
    </function>
    <function name="exportRay">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RRay" modifier="&amp;" name="ray" />
        </parameters>
      </variant>
    </function>
    <function name="exportTriangle">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RTriangle" modifier="&amp;" name="triangle" />
        </parameters>
      </variant>
    </function>
    <function name="exportRectangle">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="p2" />
        </parameters>
      </variant>
    </function>
    <function name="exportPainterPaths">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RPainterPath&gt;" modifier="&amp;" name="paths" />
          <parameter const="false" type="double" modifier="" name="z" default="0.0" />
        </parameters>
      </variant>
    </function>
    <function name="exportImage">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RImageData" modifier="&amp;" name="image" />
          <parameter const="false" type="bool" modifier="" name="forceSelected" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="exportText">
      <variant return-type="QList&lt;RPainterPath&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RTextBasedData" modifier="&amp;" name="text" />
          <parameter const="false" type="bool" modifier="" name="forceSelected" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="exportClipRectangle">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="clipRectangles" />
          <parameter const="false" type="bool" modifier="" name="forceSelected" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="exportTransform">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RTransform" modifier="&amp;" name="t" />
        </parameters>
      </variant>
    </function>
    <function name="exportEndTransform">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLineTypePatternScale">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RLinetypePattern" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="highlightEntity">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="REntity" modifier="&amp;" name="entity" />
        </parameters>
      </variant>
    </function>
    <function name="deleteDrawables">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDrawablesList">
      <variant return-type="QList&lt;RGraphicsSceneDrawable&gt;" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
        </parameters>
      </variant>
    </function>
    <function name="hasPreview">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPreviewEntityIds">
      <variant return-type="QList&lt;REntity::Id&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <!--
    <function name="getPreviewDrawables">
      <variant return-type="QList&lt;RGraphicsSceneDrawable&gt;*" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
        </parameters>
      </variant>
    </function>
    -->
    <function name="addToPreview">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
          <parameter const="false" type="QList&lt;RGraphicsSceneDrawable&gt;" modifier="&amp;" name="drawables" />
        </parameters>
      </variant>
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
          <parameter const="false" type="RGraphicsSceneDrawable" modifier="&amp;" name="drawable" />
        </parameters>
      </variant>
    </function>
    <function name="addTextToPreview">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RTextBasedData" modifier="&amp;" name="text" />
        </parameters>
      </variant>
    </function>
    <function name="hasClipRectangleFor">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getClipRectangle">
      <variant return-type="RBox" const="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="addDrawable">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
          <parameter const="false" type="RGraphicsSceneDrawable" modifier="&amp;" name="drawable" />
          <parameter const="false" type="bool" modifier="" name="draft" default="false" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="startEntity">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="topLevelEntity" />
        </parameters>
      </variant>
    </function>
    <function name="getScreenBasedLinetypes">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="dump">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RGraphicsView" ownership="cpp">
    <!--
    <super_list>
      <super name="RNonCopyable" />
    </super_list>
    -->
    <enum name="ColorMode">
      <key>FullColor</key>
      <key>GrayScale</key>
      <key>BlackWhite</key>
    </enum>
    <function name="setViewportNumber">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="n" />
        </parameters>
      </variant>
    </function>
    <function name="getViewportNumber">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clear">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clearCaches">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDisplayOnlyCurrentUcs">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="setScene">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RGraphicsScene" modifier="*" name="scene" />
          <parameter const="false" type="bool" modifier="" name="regen" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getScene">
      <variant return-type="RGraphicsScene*" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDocument">
      <variant return-type="RDocument*" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDocumentInterface">
      <variant return-type="RDocumentInterface*" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="mapFromView">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
          <parameter const="false" type="double" modifier="" name="z" default="0.0" />
        </parameters>
      </variant>
    </function>
    <function name="mapToView">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="box" />
        </parameters>
      </variant>
    </function>
    <function name="mapDistanceFromView">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="d" />
        </parameters>
      </variant>
    </function>
    <function name="mapDistanceToView">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="d" />
        </parameters>
      </variant>
    </function>
    <function name="mapCornersFromView">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMinimum">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMaximum">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="handleTerminateEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RTerminateEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="handleKeyPressEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="QKeyEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="handleKeyReleaseEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="QKeyEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="simulateMouseMoveEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="handleMouseMoveEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RMouseEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="handleMousePressEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RMouseEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="handleMouseReleaseEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RMouseEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="handleMouseDoubleClickEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RMouseEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="handleWheelEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RWheelEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="handleTabletEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RTabletEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="handleSwipeGestureEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="QSwipeGesture" modifier="&amp;" name="gesture" />
        </parameters>
      </variant>
    </function>
    <function name="handlePanGestureEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="QPanGesture" modifier="&amp;" name="gesture" />
        </parameters>
      </variant>
    </function>
    <function name="handlePinchGestureEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="QPinchGesture" modifier="&amp;" name="gesture" />
        </parameters>
      </variant>
    </function>
    <function name="giveFocus">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasFocus">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="removeFocus">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="viewportChangeEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="saveViewport">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="restoreViewport">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="zoomIn">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
          <parameter const="false" type="double" modifier="" name="factor" default="1.2" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="zoomOut">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
          <parameter const="false" type="double" modifier="" name="factor" default="1.2" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="zoom">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
          <parameter const="false" type="double" modifier="" name="factor" />
        </parameters>
      </variant>
    </function>
    <function name="zoomTo">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="window" />
          <parameter const="false" type="int" modifier="" name="margin" default="0" />
        </parameters>
      </variant>
    </function>
    <function name="zoomPrevious">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="autoZoom">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="margin" default="RDEFAULT_MIN1" />
          <parameter const="false" type="bool" modifier="" name="ignoreEmpty" default="false" />
          <parameter const="false" type="bool" modifier="" name="ignoreLineweight" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="zoomToSelection">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="margin" default="RDEFAULT_MIN1" />
        </parameters>
      </variant>
    </function>
    <function name="zoomToEntities">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="QSet&lt;REntity::Id&gt;" modifier="&amp;" name="ids" />
          <parameter const="false" type="int" modifier="" name="margin" default="RDEFAULT_MIN1" />
        </parameters>
      </variant>
    </function>
    <function name="centerToPoint">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="centerToBox">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="box" />
        </parameters>
      </variant>
    </function>
    <function name="pan">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="delta" />
          <parameter const="false" type="bool" modifier="" name="regen" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="startPan">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getFactor">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="includeStepFactor" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="setFactor">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="f" />
          <parameter const="false" type="bool" modifier="" name="regen" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getOffset">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="includeStepOffset" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="setOffset">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
          <parameter const="false" type="bool" modifier="" name="regen" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="regenerate">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="force" default="false" />
        </parameters>
      </variant>
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="QSet&lt;REntity::Id&gt;" modifier="&amp;" name="affectedEntities" />
        </parameters>
      </variant>
    </function>
    <function name="repaintView">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getWidth">
      <variant return-type="int" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getHeight">
      <variant return-type="int" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isActive">
      <variant return-type="int" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSignalsBlocked">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setSignalsBlocked">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="setNavigationAction">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RAction" modifier="*" name="action" />
        </parameters>
      </variant>
    </function>
    <function name="getGrid">
      <variant return-type="RGrid*" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setGrid">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RGrid" modifier="*" name="g" />
        </parameters>
      </variant>
    </function>
    <function name="setGridVisible">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isGridVisible">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="paintGridPoint">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="" />
        </parameters>
      </variant>
    </function>
    <function name="paintGridLine">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="" />
        </parameters>
      </variant>
    </function>
    <function name="getCursor">
      <variant return-type="QCursor" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCursor">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="Qt::CursorShape" modifier="" name="" />
        </parameters>
      </variant>
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QCursor" modifier="&amp;" name="" />
        </parameters>
      </variant>
    </function>
    <function name="getClosestReferencePoint">
      <variant return-type="RRefPoint" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="screenPosition" />
          <parameter const="false" type="int" modifier="" name="range" />
        </parameters>
      </variant>
      <variant return-type="RRefPoint" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
          <parameter const="true" type="RVector" modifier="&amp;" name="screenPosition" />
        </parameters>
      </variant>
    </function>
    <function name="getClosestEntity">
      <variant return-type="REntity::Id" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="screenPosition" />
          <parameter const="false" type="int" modifier="" name="range" />
          <parameter const="false" type="int" modifier="" name="strictRange" />
          <parameter const="false" type="bool" modifier="" name="includeLockedLayers" default="true" />
          <parameter const="false" type="bool" modifier="" name="selectedOnly" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="setBackgroundColor">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QColor" modifier="&amp;" name="col" />
        </parameters>
      </variant>
    </function>
    <function name="getBackgroundColor">
      <variant return-type="QColor" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMargin">
      <variant return-type="int" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setMargin">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="m" />
        </parameters>
      </variant>
    </function>
    <function name="setExporting">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isExporting">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isPrintingOrExporting">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPrinting">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isPrinting">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPrintPreview">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isPrintPreview">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPrintPointSize">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="setColorMode">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RGraphicsView::ColorMode" modifier="" name="cm" />
        </parameters>
      </variant>
    </function>
    <function name="getColorMode">
      <variant return-type="RGraphicsView::ColorMode" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setHairlineMode">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getHairlineMode">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setHairlineMinimumMode">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getHairlineMinimumMode">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTextLabels">
      <variant return-type="QList&lt;RTextLabel&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clearTextLabels">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="addTextLabel">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RTextLabel" modifier="&amp;" name="textLabel" />
        </parameters>
      </variant>
    </function>
    <function name="getLastKnownMousePosition">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCurrentStepScaleFactor">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCurrentStepScaleFactor">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="f" />
        </parameters>
      </variant>
    </function>
    <function name="getCurrentStepOffset">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCurrentStepOffset">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="setTextHeightThresholdOverride">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getTextHeightThresholdOverride">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="updateTextHeightThreshold">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isPathVisible">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RPainterPath" modifier="&amp;" name="path" />
        </parameters>
      </variant>
    </function>
    <function name="setAntialiasing">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="val" />
        </parameters>
      </variant>
    </function>
    <function name="getAntialiasing">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDevicePixelRatio">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isShared">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="registerForFocus">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setWidget">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QWidget" modifier="*" name="w" />
        </parameters>
      </variant>
    </function>
    <function name="getWidget">
      <variant return-type="QWidget*" const="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RGraphicsViewImage" ownership="cpp">
    <super_list>
      <super name="QObject" />
      <super name="RGraphicsView" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QObject" modifier="*" name="parent" default="NULL" />
        </parameters>
      </variant>
    </constructor>
    <function name="getNumThreads">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setNumThreads">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="n" />
        </parameters>
      </variant>
    </function>
    <function name="clear">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setViewportNumber">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="n" />
        </parameters>
      </variant>
    </function>
    <function name="getViewportNumber">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setNavigationAction">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RAction" modifier="*" name="action" />
        </parameters>
      </variant>
    </function>
    <function name="getBox">
      <variant return-type="RBox" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="autoZoom">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="margin" default="RDEFAULT_MIN1" />
          <parameter const="false" type="bool" modifier="" name="ignoreEmpty" default="false" />
          <parameter const="false" type="bool" modifier="" name="ignoreLineweight" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="zoomTo">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="window" />
          <parameter const="false" type="int" modifier="" name="margin" default="0" />
        </parameters>
      </variant>
    </function>
    <function name="zoom">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
          <parameter const="false" type="double" modifier="" name="factor" />
        </parameters>
      </variant>
    </function>
    <function name="pan">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="delta" />
          <parameter const="false" type="bool" modifier="" name="regen" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="centerToBox">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="box" />
        </parameters>
      </variant>
    </function>
    <function name="centerToPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="setGrid">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RGrid" modifier="*" name="grid" />
        </parameters>
      </variant>
    </function>
    <function name="getGrid">
      <variant return-type="RGrid*" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getFactor">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="includeStepFactor" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="setFactor">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="f" />
          <parameter const="false" type="bool" modifier="" name="regen" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getOffset">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="includeStepOffset" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="setOffset">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
          <parameter const="false" type="bool" modifier="" name="regen" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getBackgroundColor">
      <variant return-type="QColor" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setMargin">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="m" />
        </parameters>
      </variant>
    </function>
    <function name="setColorMode">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RGraphicsView::ColorMode" modifier="" name="cm" />
        </parameters>
      </variant>
    </function>
    <function name="setHairlineMode">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getHairlineMode">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setHairlineMinimumMode">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getHairlineMinimumMode">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setAntialiasing">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getAntialiasing">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getScene">
      <variant return-type="RGraphicsScene*" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDocument">
      <variant return-type="RDocument*" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDocumentInterface">
      <variant return-type="RDocumentInterface*" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setExporting">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isExporting">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isPrintingOrExporting">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPrinting">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isPrinting">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPrintPreview">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isPrintPreview">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPrintPointSize">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="simulateMouseMoveEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setTextHeightThresholdOverride">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getTextHeightThresholdOverride">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isGridVisible">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setGridVisible">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="setScene">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RGraphicsSceneQt" modifier="*" name="scene" />
          <parameter const="false" type="bool" modifier="" name="regen" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="setBackgroundColor">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QColor" modifier="&amp;" name="col" />
        </parameters>
      </variant>
    </function>
    <function name="regenerate">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="force" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="repaintView">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="updateImage">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="giveFocus">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasFocus">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="removeFocus">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="saveViewport">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="restoreViewport">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="mapFromView">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
          <parameter const="false" type="double" modifier="" name="z" default="0.0" />
        </parameters>
      </variant>
    </function>
    <function name="mapToView">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="mapDistanceFromView">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="d" />
        </parameters>
      </variant>
    </function>
    <function name="mapDistanceToView">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="d" />
        </parameters>
      </variant>
    </function>
    <function name="getWidth">
      <variant return-type="int" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getHeight">
      <variant return-type="int" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="resizeImage">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="w" />
          <parameter const="false" type="int" modifier="" name="h" />
        </parameters>
      </variant>
    </function>
    <function name="paintGridPoint">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="ucsPosition" />
        </parameters>
      </variant>
    </function>
    <function name="paintGridLine">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="ucsPosition" />
        </parameters>
      </variant>
    </function>
    <function name="setPaintOrigin">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="val" />
        </parameters>
      </variant>
    </function>
    <function name="setPanOptimization">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getPanOptimization">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="paintEntities">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="QPainter" modifier="*" name="painter" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" />
        </parameters>
      </variant>
    </function>
    <function name="paintEntitiesMulti">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" />
        </parameters>
      </variant>
    </function>
    <function name="paintEntitiesThread">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="threadId" />
          <parameter const="true" type="QList&lt;REntity::Id&gt;" modifier="&amp;" name="list" />
          <parameter const="false" type="int" modifier="" name="start" />
          <parameter const="false" type="int" modifier="" name="end" />
        </parameters>
      </variant>
    </function>
    <function name="paintEntityThread">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="threadId" />
          <parameter const="false" type="REntity::Id" modifier="" name="id" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="paintOverlay">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="QPainter" modifier="*" name="painter" />
        </parameters>
      </variant>
    </function>
    <function name="getBuffer">
      <variant return-type="QImage" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTransform">
      <variant return-type="QTransform" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="emitUpdateSnapInfo">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RSnap" modifier="*" name="snap" />
          <parameter const="false" type="RSnapRestriction" modifier="*" name="restriction" />
        </parameters>
      </variant>
    </function>
    <function name="emitUpdateTextLabel">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RTextLabel" modifier="&amp;" name="textLabel" />
        </parameters>
      </variant>
    </function>
    <function name="clearBackground">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="addToBackground">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RGraphicsSceneDrawable" modifier="&amp;" name="drawable" />
        </parameters>
      </variant>
    </function>
    <function name="setBackgroundTransform">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="bgFactor" />
          <parameter const="true" type="RVector" modifier="&amp;" name="bgOffset" />
        </parameters>
      </variant>
    </function>
    <function name="clearOverlay">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="overlayId" />
          <parameter const="false" type="RObject::Id" modifier="" name="objectId" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="overlayId" />
        </parameters>
      </variant>
    </function>
    <function name="addToOverlay">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="overlayId" />
          <parameter const="false" type="RObject::Id" modifier="" name="objectId" />
          <parameter const="true" type="RGraphicsSceneDrawable" modifier="&amp;" name="drawable" />
        </parameters>
      </variant>
    </function>
    <function name="setColorCorrectionOverride">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getColorCorrectionOverride">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setMinimumLineweight">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="lw" />
        </parameters>
      </variant>
    </function>
    <function name="getMinimumLineweight">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setMaximumLineweight">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="lw" />
        </parameters>
      </variant>
    </function>
    <function name="getMaximumLineweight">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPaintOffset">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="getPaintOffset">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isAlphaEnabled">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setAlphaEnabled">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="viewportChanged">
      <variant return-type="void" access="public" signal="true">
        <parameters />
      </variant>
    </function>
    <function name="updateSnapInfo">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="QPainter" modifier="*" name="painter" />
          <parameter const="false" type="RSnap" modifier="*" name="snap" />
          <parameter const="false" type="RSnapRestriction" modifier="*" name="restriction" />
        </parameters>
      </variant>
    </function>
    <function name="updateTextLabel">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="QPainter" modifier="*" name="painter" />
          <parameter const="true" type="RTextLabel" modifier="&amp;" name="textLabel" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="getTextLayoutsPainterPaths" />
    <function name="applyMinimumLineweight" />
    <function name="applyColorCorrection" />
    <function name="applyColorMode" />
    <function name="getPointSize" />
    <function name="drawDot" />
    <function name="drawPlus" />
    <function name="drawEx" />
    <function name="drawVBar" />
    <function name="drawCircle" />
    <function name="drawSquare" />
    <function name="paintImage" />
    <function name="paintText" />
    <function name="paintOrigin" />
    <function name="paintReferencePoint" />
    <function name="paintErase" />
    <function name="paintGrid" />
    <function name="paintMetaGrid" />
    <function name="paintCursor" />
    <function name="paintRelativeZero" />
    <function name="paintDocument" />
    <function name="paintBackground" />
    <function name="initPainter" />
    <function name="invalidate" />
    <function name="updateGraphicsBuffer" />
    <function name="updateTransformation" />
    -->
  </class>
  <class name="RGraphicsViewQt" ownership="cpp" inheritable="true">
    <super_list>
      <super name="QObject" />
      <super name="QWidget" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QWidget" modifier="*" name="parent" default="NULL" />
          <parameter const="false" type="bool" modifier="" name="showFocus" default="true" />
        </parameters>
      </variant>
    </constructor>
    <function name="setImageView">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RGraphicsViewImage" modifier="*" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getImageView">
      <variant return-type="RGraphicsViewImage*" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="disableGestures">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="removeFocus">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getWidth">
      <variant return-type="int" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getHeight">
      <variant return-type="int" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRect">
      <variant return-type="QRect" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSignalsBlocked">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setSignalsBlocked">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getCursor">
      <variant return-type="QCursor" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCursor">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="Qt::CursorShape" modifier="" name="cursorShape" />
        </parameters>
      </variant>
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QCursor" modifier="&amp;" name="cursor" />
        </parameters>
      </variant>
    </function>
    <function name="setFocusFrameWidget">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QFrame" modifier="*" name="w" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="viewportChangeEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="emitUpdateSnapInfo">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RSnap" modifier="*" name="snap" />
          <parameter const="false" type="RSnapRestriction" modifier="*" name="restriction" />
        </parameters>
      </variant>
    </function>
    <function name="emitUpdateTextLabel">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RTextLabel" modifier="&amp;" name="textLabel" />
        </parameters>
      </variant>
    </function>
    -->
    <function name="simulateMouseMoveEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <!--
    <function name="getDevicePixelRatio">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    -->
    <!--
    <function name="registerForFocus">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    -->
    <function name="drop">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="QDropEvent" modifier="*" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="dragEnter">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="QDragEnterEvent" modifier="*" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="sizeHint">
      <variant return-type="QSize" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="mouseMoveEvent">
      <variant return-type="void" virtual="true" access="protected">
        <parameters>
          <parameter const="false" type="QMouseEvent" modifier="*" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="paintEvent">
      <variant return-type="void" virtual="true" access="protected">
        <parameters>
          <parameter const="false" type="QPaintEvent" modifier="*" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="resizeEvent">
      <variant return-type="void" virtual="true" overridable="true" access="protected">
        <parameters>
          <parameter const="false" type="QResizeEvent" modifier="*" name="event" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="event" />
    <function name="gestureEvent" />
    <function name="focusInEvent" />
    <function name="focusOutEvent" />
    <function name="tabletEvent" />
    -->
    <!--
    <function name="mousePressEvent" />
    <function name="mouseReleaseEvent" />
    <function name="mouseDoubleClickEvent" />
    <function name="wheelEvent" />
    -->
    <!--
    <function name="keyPressEvent" />
    <function name="keyReleaseEvent" />
    <function name="dragEnterEvent" />
    <function name="dropEvent" />
    -->
  </class>
  <class name="RGrid" ownership="cpp">
    <!--
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RGraphicsView" modifier="&amp;" name="view" />
        </parameters>
      </variant>
    </constructor>
    -->
    <function name="clearCache">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="snapToGrid">
      <variant return-type="RVector" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="positionUcs" />
        </parameters>
      </variant>
    </function>
    <function name="update">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="force" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="paint">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="paintMetaGrid">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="paintCursor">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="pos" />
        </parameters>
      </variant>
    </function>
    <function name="paintRuler">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RRuler" modifier="&amp;" name="ruler" />
          <parameter const="false" type="qreal" modifier="" name="devicePixelRatio" default="1.0" />
        </parameters>
      </variant>
    </function>
    <function name="getInfoText">
      <variant return-type="QString" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isIsometric">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getProjection">
      <variant return-type="RS::IsoProjectionType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getViewportNumber">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDocument">
      <variant return-type="RDocument*" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setVisible">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isVisible">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RGuiAction" ownership="cpp">
    <super_list>
      <super name="QObject" />
      <super name="RFocusListener" />
      <super name="RTransactionListener" />
      <super name="RSelectionListener" />
      <super name="QAction" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="oriText" />
          <parameter const="false" type="QObject" modifier="*" name="parent" default="0" />
        </parameters>
      </variant>
    </constructor>
    <function name="setText">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="oriText" />
        </parameters>
      </variant>
    </function>
    <function name="initTexts">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="init">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="formatToolTip" static="true">
      <variant return-type="QString" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="oriText" />
          <parameter const="true" type="QString" modifier="&amp;" name="shortcut" />
        </parameters>
      </variant>
    </function>
    <function name="getToolTip">
      <variant return-type="QString" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="oriText" />
          <parameter const="true" type="QString" modifier="&amp;" name="shortcut" />
        </parameters>
      </variant>
    </function>
    <function name="addShortcut">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QKeySequence" modifier="&amp;" name="shortcut" />
        </parameters>
      </variant>
    </function>
    <function name="removeShortcuts">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setShortcut">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QKeySequence" modifier="&amp;" name="shortcut" />
        </parameters>
      </variant>
    </function>
    <function name="setDefaultShortcut">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QKeySequence" modifier="&amp;" name="shortcut" />
        </parameters>
      </variant>
    </function>
    <function name="setShortcuts">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;QKeySequence&gt;" modifier="&amp;" name="shortcuts" />
        </parameters>
      </variant>
    </function>
    <function name="setShortcutsFromStrings">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QStringList" modifier="&amp;" name="shortcuts" />
        </parameters>
      </variant>
    </function>
    <function name="getShortcuts">
      <variant return-type="QList&lt;QKeySequence&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDefaultShortcuts">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;QKeySequence&gt;" modifier="&amp;" name="shortcuts" />
        </parameters>
      </variant>
    </function>
    <function name="getDefaultShortcuts">
      <variant return-type="QList&lt;QKeySequence&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setShortcutText">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="oriText" />
        </parameters>
      </variant>
    </function>
    <function name="getShortcutText">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getShortcutsString">
      <variant return-type="QString" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="separator" default="&quot;,&quot;" />
          <parameter const="false" type="QKeySequence::SequenceFormat" modifier="" name="format" default="QKeySequence::PortableText" />
        </parameters>
      </variant>
    </function>
    <function name="setGroupSortOrderStatic" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QAction" modifier="*" name="a" />
          <parameter const="false" type="int" modifier="" name="sortOrder" />
        </parameters>
      </variant>
    </function>
    <function name="setGroupSortOrderOverrideStatic" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QAction" modifier="*" name="a" />
          <parameter const="true" type="QString" modifier="&amp;" name="widgetName" />
          <parameter const="false" type="int" modifier="" name="sortOrder" />
        </parameters>
      </variant>
    </function>
    <function name="getGroupSortOrderStatic" static="true">
      <variant return-type="int" access="public">
        <parameters>
          <parameter const="true" type="QAction" modifier="*" name="a" />
          <parameter const="true" type="QWidget" modifier="*" name="w" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="setSortOrderStatic" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QAction" modifier="*" name="a" />
          <parameter const="false" type="int" modifier="" name="sortOrder" />
        </parameters>
      </variant>
    </function>
    <function name="setSortOrderOverrideStatic" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QAction" modifier="*" name="a" />
          <parameter const="true" type="QString" modifier="&amp;" name="widgetName" />
          <parameter const="false" type="int" modifier="" name="sortOrder" />
        </parameters>
      </variant>
    </function>
    <function name="getSortOrderStatic" static="true">
      <variant return-type="int" access="public">
        <parameters>
          <parameter const="true" type="QAction" modifier="*" name="a" />
          <parameter const="true" type="QWidget" modifier="*" name="w" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="setGroupSortOrder">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="sortOrder" />
        </parameters>
      </variant>
    </function>
    <function name="setGroupSortOrderOverride">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="widgetName" />
          <parameter const="false" type="int" modifier="" name="sortOrder" />
        </parameters>
      </variant>
    </function>
    <function name="getGroupSortOrder">
      <variant return-type="int" const="true" access="public">
        <parameters>
          <parameter const="true" type="QWidget" modifier="*" name="w" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="setSortOrder">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="sortOrder" />
        </parameters>
      </variant>
    </function>
    <function name="setSortOrderOverride">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="widgetName" />
          <parameter const="false" type="int" modifier="" name="sortOrder" />
        </parameters>
      </variant>
    </function>
    <function name="getSortOrder">
      <variant return-type="int" const="true" access="public">
        <parameters>
          <parameter const="true" type="QWidget" modifier="*" name="w" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="addToMenu">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QMenu" modifier="*" name="menu" />
        </parameters>
      </variant>
    </function>
    <function name="addToToolBar">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QToolBar" modifier="*" name="tb" />
        </parameters>
      </variant>
    </function>
    <function name="fixSeparators" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QWidget" modifier="*" name="w" />
        </parameters>
      </variant>
    </function>
    <function name="addSeparatorToWidget" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QAction" modifier="*" name="a" />
          <parameter const="false" type="QWidget" modifier="*" name="w" />
        </parameters>
      </variant>
    </function>
    <function name="addToWidget" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QAction" modifier="*" name="a" />
          <parameter const="false" type="QWidget" modifier="*" name="w" />
        </parameters>
      </variant>
    </function>
    <function name="removeFromWidget" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QAction" modifier="*" name="a" />
          <parameter const="false" type="QWidget" modifier="*" name="w" />
        </parameters>
      </variant>
    </function>
    <function name="updateIcons" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="updateIcon">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setIcon">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="iconFile" />
        </parameters>
      </variant>
    </function>
    <function name="disableIcon">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isIconDisabled">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setToolTip">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="tip" />
        </parameters>
      </variant>
    </function>
    <function name="setStatusTip">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="tip" />
        </parameters>
      </variant>
    </function>
    <function name="setEnabled">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="setEnabledOverride">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
          <parameter const="false" type="int" modifier="" name="override" />
        </parameters>
      </variant>
    </function>
    <function name="setChecked">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="triggerGroupDefault" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="group" />
        </parameters>
      </variant>
    </function>
    <function name="triggerGroupDefaults" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isChecked">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setForceGlobal">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getForceGlobal">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setRequiresDocument">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getRequiresDocument">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setRequiresSelection">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getRequiresSelection">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setRequiresUndoableTransaction">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getRequiresUndoableTransaction">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setRequiresRedoableTransaction">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getRequiresRedoableTransaction">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setOverride">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isOverride">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setAllowInterrupt">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAllowInterrupt">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setNoState">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="checkable" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="hasNoState">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setToggleable">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="isToggleable">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setUniqueGroup">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="ug" />
        </parameters>
      </variant>
    </function>
    <function name="getUniqueGroup">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMainCommand">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCommands">
      <variant return-type="QStringList" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDefaultCommands">
      <variant return-type="QStringList" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDefaultCommands">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QStringList" modifier="&amp;" name="cmds" />
        </parameters>
      </variant>
    </function>
    <function name="setCommands">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QStringList" modifier="&amp;" name="cmds" />
        </parameters>
      </variant>
    </function>
    <function name="setScriptFile">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="sf" />
          <parameter const="false" type="bool" modifier="" name="isSecondary" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getScriptFile">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getScriptClass">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setGroup">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="title" />
        </parameters>
      </variant>
    </function>
    <function name="getGroup">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setGroupDefault">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isGroupDefault">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getActions" static="true">
      <variant return-type="QList&lt;RGuiAction*&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="triggerByCommand" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="cmd" />
        </parameters>
      </variant>
    </function>
    <function name="triggerByShortcut" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="sc" />
        </parameters>
      </variant>
    </function>
    <function name="getByScriptFile" static="true">
      <variant return-type="RGuiAction*" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="scriptFile" />
        </parameters>
      </variant>
    </function>
    <function name="getByClassName" static="true">
      <variant return-type="RGuiAction*" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="className" />
        </parameters>
      </variant>
    </function>
    <function name="getByCommand" static="true">
      <variant return-type="RGuiAction*" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="command" />
        </parameters>
      </variant>
    </function>
    <function name="triggerByScriptFile" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="scriptFile" />
        </parameters>
      </variant>
    </function>
    <function name="getAvailableCommands" static="true">
      <variant return-type="QStringList" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="start" />
          <parameter const="false" type="bool" modifier="" name="primaryOnly" default="false" />
        </parameters>
      </variant>
      <variant return-type="QStringList" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="primaryOnly" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="clear" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="updateTransactionListener">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="setCurrentBlock">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
        </parameters>
      </variant>
    </function>
    <function name="updateSelectionListener">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
    <function name="updateFocus">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
    <function name="addArgument">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="arg" />
        </parameters>
      </variant>
    </function>
    <function name="getArguments">
      <variant return-type="QStringList" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clearArguments">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setWidgetNamesStatic" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QAction" modifier="*" name="a" />
          <parameter const="true" type="QStringList" modifier="&amp;" name="widgetNames" />
        </parameters>
      </variant>
    </function>
    <function name="getWidgetNamesStatic" static="true">
      <variant return-type="QStringList" access="public">
        <parameters>
          <parameter const="true" type="QAction" modifier="*" name="a" />
        </parameters>
      </variant>
    </function>
    <function name="setWidgetNames">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QStringList" modifier="&amp;" name="widgetNames" />
        </parameters>
      </variant>
    </function>
    <function name="getWidgetNames">
      <variant return-type="QStringList" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="slotTrigger">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="command" default="QString()" />
        </parameters>
      </variant>
    </function>
    <function name="postTriggered">
      <variant return-type="void" access="public" signal="true">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RHatchData">
    <super_list>
      <super name="REntityData" />
      <!--
      <super name="RPainterPathSource" />
      -->
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="bool" modifier="" name="solid" />
          <parameter const="false" type="double" modifier="" name="scaleFactor" />
          <parameter const="false" type="double" modifier="" name="angle" />
          <parameter const="true" type="QString" modifier="&amp;" name="patternName" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RHatchData" modifier="&amp;" name="other" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clearBoundary">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasCustomPattern">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCustomPattern">
      <variant return-type="RPattern" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCustomPattern">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RPattern" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="cloneOnChange">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="ignoreEmpty" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getPointOnEntity">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDistanceTo">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="range" default="0.0" />
          <parameter const="false" type="bool" modifier="" name="draft" default="false" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="intersectsWith">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
        </parameters>
      </variant>
    </function>
    <function name="getReferencePoints">
      <variant return-type="QList&lt;RRefPoint&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="hint" default="RS::RenderTop" />
        </parameters>
      </variant>
    </function>
    <function name="moveReferencePoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="targetPoint" />
          <parameter const="false" type="Qt::KeyboardModifiers" modifier="" name="modifiers" default="Qt::NoModifier" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="stretch">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="area" />
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="castToShape">
      <variant return-type="RShape*" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getShapes">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="false" />
          <parameter const="false" type="bool" modifier="" name="segment" default="false" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="entityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getExploded">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isSolid">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setSolid">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getScale">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setScale">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="getAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setAngle">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a" />
        </parameters>
      </variant>
    </function>
    <function name="getOriginPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setOriginPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="op" />
          <parameter const="false" type="bool" modifier="" name="clearCustom" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getPatternName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPatternName">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="n" />
        </parameters>
      </variant>
    </function>
    <function name="getTransparency">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setTransparency">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="t" />
        </parameters>
      </variant>
    </function>
    <function name="clearCustomPattern">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="newLoop">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="cancelLoop">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="addBoundary">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;RShape&gt;" modifier="" name="shape" />
          <parameter const="false" type="bool" modifier="" name="addAutoLoops" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="addBoundaryShape">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;RShape&gt;" modifier="" name="shape" />
          <parameter const="false" type="int" modifier="" name="loop" />
        </parameters>
      </variant>
    </function>
    <function name="getBoundaryPath">
      <variant return-type="RPainterPath" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="pixelSizeHint" default="RDEFAULT_MIN1" />
        </parameters>
      </variant>
    </function>
    <function name="getPainterPaths">
      <variant return-type="QList&lt;RPainterPath&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="draft" default="false" />
          <parameter const="false" type="double" modifier="" name="pixelSizeHint" default="RDEFAULT_MIN1" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="getBoundary">
      <variant return-type="QList&lt;QList&lt;QSharedPointer&lt;RShape&gt;&gt;&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    -->
    <!--
    <function name="getBoundaryElementsAt">
      <variant return-type="QPair&lt;QSharedPointer&lt;RShape&gt;,QSharedPointer&lt;RShape&gt;&gt;" const="true"
      access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="index" />
          <parameter const="false" type="int" modifier="&amp;" name="internalIndex" />
        </parameters>
      </variant>
    </function>
    -->
    <function name="update">
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="order">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLoopCount">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLoopBoundary">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="index" />
        </parameters>
      </variant>
    </function>
    <function name="getBoundaryAsPolylines">
      <variant return-type="QList&lt;RPolyline&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="segmentLength" />
        </parameters>
      </variant>
    </function>
    <function name="autoCloseLoops">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getComplexity">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPattern">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RPattern" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getColor">
      <variant return-type="RColor" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasProxy" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <!--
    <function name="setHatchProxy" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RHatchProxy" modifier="*" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getHatchProxy" static="true">
      <variant return-type="RHatchProxy*" access="public">
        <parameters />
      </variant>
    </function>
    -->
  </class>
  <class name="RHatchEntity" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
      <super name="REntity" />
    </super_list>
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyProtected" />
    <property static="true" type="RPropertyTypeId" name="PropertyWorkingSet" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyLayer" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetype" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetypeScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineweight" />
    <property static="true" type="RPropertyTypeId" name="PropertyColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDisplayedColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDrawOrder" />
    <property static="true" type="RPropertyTypeId" name="PropertySolid" />
    <property static="true" type="RPropertyTypeId" name="PropertyTransparency" />
    <property static="true" type="RPropertyTypeId" name="PropertyPatternName" />
    <property static="true" type="RPropertyTypeId" name="PropertyEntityPattern" />
    <property static="true" type="RPropertyTypeId" name="PropertyScaleFactor" />
    <property static="true" type="RPropertyTypeId" name="PropertyAngle" />
    <property static="true" type="RPropertyTypeId" name="PropertyOriginX" />
    <property static="true" type="RPropertyTypeId" name="PropertyOriginY" />
    <property static="true" type="RPropertyTypeId" name="PropertyVertexNX" />
    <property static="true" type="RPropertyTypeId" name="PropertyVertexNY" />
    <property static="true" type="RPropertyTypeId" name="PropertyVertexNZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyLength" />
    <property static="true" type="RPropertyTypeId" name="PropertyTotalLength" />
    <property static="true" type="RPropertyTypeId" name="PropertyArea" />
    <property static="true" type="RPropertyTypeId" name="PropertyTotalArea" />
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="RHatchData" modifier="&amp;" name="data" />
        </parameters>
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStaticPropertyTypeIds" static="true">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RHatchEntity*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setData">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RHatchData" modifier="&amp;" name="d" />
        </parameters>
      </variant>
    </function>
    <function name="hasCustomPattern">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCustomPattern">
      <variant return-type="RPattern" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCustomPattern">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RPattern" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="setBoundaryVector">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="RObject::XYZ" modifier="" name="xyz" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="bool" modifier="" name="condition" />
        </parameters>
      </variant>
    </function>
    <function name="setComponent">
      <variant return-type="RVector" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
          <parameter const="false" type="double" modifier="" name="v" />
          <parameter const="false" type="RObject::XYZ" modifier="" name="xyz" />
        </parameters>
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="exportEntity">
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RExporter" modifier="&amp;" name="e" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
          <parameter const="false" type="bool" modifier="" name="forceSelected" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getData">
      <variant return-type="RHatchData&amp;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPainterPaths">
      <variant return-type="QList&lt;RPainterPath&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="draft" default="false" />
          <parameter const="false" type="double" modifier="" name="pixelSizeHint" default="0.0" />
        </parameters>
      </variant>
    </function>
    <function name="getComplexity">
      <variant return-type="int" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="newLoop">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="addBoundary">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;RShape&gt;" modifier="" name="shape" />
        </parameters>
      </variant>
    </function>
    <function name="getLoopCount">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isSolid">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setSolid">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getScale">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setScale">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="getAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setAngle">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a" />
        </parameters>
      </variant>
    </function>
    <function name="getOriginPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setOriginPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="op" />
        </parameters>
      </variant>
    </function>
    <function name="getPatternName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPatternName">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="n" />
        </parameters>
      </variant>
    </function>
    <function name="getTransparency">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setTransparency">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="t" />
        </parameters>
      </variant>
    </function>
    <function name="clearCustomPattern">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLoopBoundary">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="index" />
        </parameters>
      </variant>
    </function>
    <function name="getBoundaryAsPolylines">
      <variant return-type="QList&lt;RPolyline&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="segmentLength" />
        </parameters>
      </variant>
    </function>
    <function name="getShapes">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="false" />
          <parameter const="false" type="bool" modifier="" name="segment" default="false" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="entityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getExploded">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setViewportContext">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RViewportData" modifier="&amp;" name="origin" />
        </parameters>
      </variant>
    </function>
    <function name="print" />
  </class>
  <class name="RImageData">
    <super_list>
      <super name="REntityData" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fileName" />
          <parameter const="true" type="RVector" modifier="&amp;" name="insertionPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="uVector" />
          <parameter const="true" type="RVector" modifier="&amp;" name="vVector" />
          <parameter const="false" type="int" modifier="" name="brightness" />
          <parameter const="false" type="int" modifier="" name="contrast" />
          <parameter const="false" type="int" modifier="" name="fade" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RImageData" modifier="&amp;" name="other" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="ignoreEmpty" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getPointOnEntity">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDistanceTo">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="range" default="0.0" />
          <parameter const="false" type="bool" modifier="" name="draft" default="false" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="intersectsWith">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
        </parameters>
      </variant>
    </function>
    <function name="getReferencePoints">
      <variant return-type="QList&lt;RRefPoint&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="hint" default="RS::RenderTop" />
        </parameters>
      </variant>
    </function>
    <function name="moveReferencePoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="targetPoint" />
          <parameter const="false" type="Qt::KeyboardModifiers" modifier="" name="modifiers" default="Qt::NoModifier" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="castToShape">
      <variant return-type="RShape*" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getShapes">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="false" />
          <parameter const="false" type="bool" modifier="" name="segment" default="false" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="entityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getFileName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setFileName">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fn" />
        </parameters>
      </variant>
    </function>
    <function name="getInsertionPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setInsertionPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="ip" />
        </parameters>
      </variant>
    </function>
    <function name="getAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setAngle">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a" />
        </parameters>
      </variant>
    </function>
    <function name="getUVector">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setUVector">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getVVector">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setVVector">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="setWidth">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="w" />
          <parameter const="false" type="bool" modifier="" name="keepRatio" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="setHeight">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="h" />
          <parameter const="false" type="bool" modifier="" name="keepRatio" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getWidth">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getHeight">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPixelWidth">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPixelHeight">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBrightness">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setBrightness">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getContrast">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setContrast">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getFade">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setFade">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getImage">
      <variant return-type="QImage" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="load">
      <variant return-type="void" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="reload">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getScaleVector">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="mapToImage">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="mapFromImage">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getCornersPx">
      <variant return-type="QList&lt;RVector&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCorners">
      <variant return-type="QList&lt;RVector&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEdges">
      <variant return-type="QList&lt;RLine&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RImageEntity" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
      <super name="REntity" />
    </super_list>
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyProtected" />
    <property static="true" type="RPropertyTypeId" name="PropertyWorkingSet" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyLayer" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetype" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetypeScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineweight" />
    <property static="true" type="RPropertyTypeId" name="PropertyColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDisplayedColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDrawOrder" />
    <property static="true" type="RPropertyTypeId" name="PropertyFileName" />
    <property static="true" type="RPropertyTypeId" name="PropertyInsertionPointX" />
    <property static="true" type="RPropertyTypeId" name="PropertyInsertionPointY" />
    <property static="true" type="RPropertyTypeId" name="PropertyInsertionPointZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyUX" />
    <property static="true" type="RPropertyTypeId" name="PropertyUY" />
    <property static="true" type="RPropertyTypeId" name="PropertyVX" />
    <property static="true" type="RPropertyTypeId" name="PropertyVY" />
    <property static="true" type="RPropertyTypeId" name="PropertyScaleFactorX" />
    <property static="true" type="RPropertyTypeId" name="PropertyScaleFactorY" />
    <property static="true" type="RPropertyTypeId" name="PropertyAngle" />
    <property static="true" type="RPropertyTypeId" name="PropertyWidth" />
    <property static="true" type="RPropertyTypeId" name="PropertyHeight" />
    <property static="true" type="RPropertyTypeId" name="PropertyFade" />
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="RImageData" modifier="&amp;" name="data" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RImageEntity" modifier="&amp;" name="other" />
        </parameters>
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStaticPropertyTypeIds" static="true">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RImageEntity*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="exportEntity">
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RExporter" modifier="&amp;" name="e" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
          <parameter const="false" type="bool" modifier="" name="forceSelected" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getData">
      <variant return-type="RImageData&amp;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getFileName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setFileName">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fn" />
        </parameters>
      </variant>
    </function>
    <function name="getInsertionPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setInsertionPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="ip" />
        </parameters>
      </variant>
    </function>
    <function name="getUVector">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getVVector">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBrightness">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getContrast">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getFade">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setWidth">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="w" />
          <parameter const="false" type="bool" modifier="" name="keepRatio" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="setHeight">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="h" />
          <parameter const="false" type="bool" modifier="" name="keepRatio" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="setAngle">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a" />
        </parameters>
      </variant>
    </function>
    <function name="getWidth">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getHeight">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPixelWidth">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPixelHeight">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="print" />
  </class>
  <class name="RImportListener" ownership="cpp">
    <function name="preImportEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
    <function name="postImportEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RImporter" ownership="cpp">
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="&amp;" name="document" />
          <!--
          <parameter const="false" type="RMessageHandler" modifier="*" name="messageHandler" default="NULL" />
          <parameter const="false" type="RProgressHandler" modifier="*" name="progressHandler" default="NULL" />
          -->
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="startImport">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="endImport">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="importObjectP">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;RObject&gt;" modifier="" name="object" />
        </parameters>
      </variant>
    </function>
    <function name="importObject">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RObject" modifier="*" name="object" />
        </parameters>
      </variant>
    </function>
    <function name="setCurrentBlockId">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="id" />
        </parameters>
      </variant>
    </function>
    <function name="getCurrentBlockId">
      <variant return-type="RBlock::Id" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDocument">
      <variant return-type="RDocument&amp;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDocument">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="d" />
        </parameters>
      </variant>
    </function>
    <function name="setKnownVariable">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
          <parameter const="true" type="RVector" modifier="&amp;" name="value" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RInputEvent" ownership="cpp">
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="position" />
          <parameter const="false" type="RGraphicsScene" modifier="&amp;" name="s" />
          <parameter const="false" type="RGraphicsView" modifier="&amp;" name="v" />
          <parameter const="false" type="qreal" modifier="" name="devicePixelRatio" default="1.0" />
        </parameters>
      </variant>
    </constructor>
    <function name="getModelPosition">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setModelPosition">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getCursorPosition">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCursorPosition">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getScreenPosition">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setScreenPosition">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getGraphicsView">
      <variant return-type="RGraphicsView&amp;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getGraphicsScene">
      <variant return-type="RGraphicsScene&amp;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RInterTransactionListener" ownership="cpp">
    <function name="updateInterTransactionListener">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RInterTransactionListenerAdapter" ownership="cpp">
    <super_list>
      <super name="QObject" />
      <super name="RInterTransactionListener" />
    </super_list>
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="updateInterTransactionListener">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="doc" default="NULL" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="transactionInProgress">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="doc" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RKeyListener" ownership="cpp">
    <function name="keyPressed">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="QKeyEvent" modifier="*" name="e" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RKeyListenerAdapter" ownership="cpp">
    <super_list>
      <super name="QObject" />
      <super name="RKeyListener" />
    </super_list>
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="keyPressed">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="QKeyEvent" modifier="*" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="keyPressEvent">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="QKeyEvent" modifier="*" name="event" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RLayer" sharedpointer="true">
    <super_list>
      <super name="RObject" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="QString" modifier="&amp;" name="name" />
          <parameter const="false" type="bool" modifier="" name="frozen" default="false" />
          <parameter const="false" type="bool" modifier="" name="locked" default="false" />
          <parameter const="true" type="RColor" modifier="&amp;" name="color" default="Qt::black" />
          <parameter const="false" type="RLinetype::Id" modifier="" name="linetypeId" default="RLinetype::INVALID_ID" />
          <parameter const="false" type="RLineweight::Lineweight" modifier="" name="lineweight" default="RLineweight::Weight000" />
          <parameter const="false" type="bool" modifier="" name="off" default="false" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RLayer" modifier="&amp;" name="other" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RLayer*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getParentLayerId">
      <variant return-type="RLayer::Id" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setName">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="n" />
        </parameters>
      </variant>
    </function>
    <function name="isOffOrFrozen">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isOff">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setOff">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isFrozen">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setFrozen">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isLocked">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLocked">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isCollapsed">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCollapsed">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isPlottable">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPlottable">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isSnappable">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setSnappable">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isOffIsFreeze">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setOffIsFreeze">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getColor">
      <variant return-type="RColor" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setColor">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RColor" modifier="&amp;" name="c" />
        </parameters>
      </variant>
    </function>
    <function name="getLinetypeId">
      <variant return-type="RLinetype::Id" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLinetypeId">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RLinetype::Id" modifier="" name="lt" />
        </parameters>
      </variant>
    </function>
    <function name="getLineweight">
      <variant return-type="RLineweight::Lineweight" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLineweight">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RLineweight::Lineweight" modifier="" name="lw" />
        </parameters>
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="hasChildLayers">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getChildLayerNames">
      <variant return-type="QList&lt;QString&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="recursive" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getParentLayerName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getShortLayerName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLayerNameHierarchy">
      <variant return-type="QList&lt;QString&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isChildLayerOf">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layerName" />
        </parameters>
      </variant>
    </function>
    <function name="getHierarchySeparator" static="true">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasChildLayersStatic" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RDocument" modifier="*" name="doc" />
          <parameter const="true" type="QString" modifier="&amp;" name="layerName" />
        </parameters>
      </variant>
    </function>
    <function name="getChildLayerNamesStatic" static="true">
      <variant return-type="QList&lt;QString&gt;" access="public">
        <parameters>
          <parameter const="true" type="RDocument" modifier="*" name="doc" />
          <parameter const="true" type="QString" modifier="&amp;" name="layerName" />
          <parameter const="false" type="bool" modifier="" name="recursive" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getParentLayerNameStatic" static="true">
      <variant return-type="QString" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layerName" />
        </parameters>
      </variant>
    </function>
    <function name="getShortLayerNameStatic" static="true">
      <variant return-type="QString" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layerName" />
        </parameters>
      </variant>
    </function>
    <function name="getLayerNameHierarchyStatic" static="true">
      <variant return-type="QList&lt;QString&gt;" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layerName" />
        </parameters>
      </variant>
    </function>
    <function name="isChildLayerOfStatic" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layerName" />
          <parameter const="true" type="QString" modifier="&amp;" name="parentLayerName" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RLayerListener" ownership="cpp">
    <function name="updateLayers">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
          <parameter const="false" type="QList&lt;RLayer::Id&gt;" modifier="&amp;" name="layerIds" />
        </parameters>
      </variant>
    </function>
    <function name="setCurrentLayer">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
          <parameter const="false" type="RLayer::Id" modifier="" name="previousLayerId" />
        </parameters>
      </variant>
    </function>
    <function name="clearLayers">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RLayerListenerAdapter" ownership="cpp">
    <super_list>
      <super name="QObject" />
      <super name="RLayerListener" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QObject" modifier="*" name="parent" default="NULL" />
        </parameters>
      </variant>
    </constructor>
    <function name="updateLayers">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
          <parameter const="false" type="QList&lt;RLayer::Id&gt;" modifier="&amp;" name="layerIds" />
        </parameters>
      </variant>
    </function>
    <function name="setCurrentLayer">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
          <parameter const="false" type="RLayer::Id" modifier="" name="previousLayerId" />
        </parameters>
      </variant>
    </function>
    <function name="clearLayers">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="layersUpdated">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
          <parameter const="false" type="QList&lt;int&gt;" modifier="" name="layerIds" />
        </parameters>
      </variant>
    </function>
    <function name="currentLayerSet">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
          <parameter const="false" type="int" modifier="" name="previousLayerId" />
        </parameters>
      </variant>
    </function>
    <function name="layersCleared">
      <variant return-type="void" access="public" signal="true">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RLayerState" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="QString" modifier="&amp;" name="name" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RLayerState*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="mustAlwaysClone">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setName">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="n" />
        </parameters>
      </variant>
    </function>
    <function name="getDescription">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDescription">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="d" />
        </parameters>
      </variant>
    </function>
    <function name="getCurrentLayerName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCurrentLayerName">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="addLayer">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;RLayer&gt;" modifier="" name="layer" />
        </parameters>
      </variant>
    </function>
    <function name="getLayers">
      <variant return-type="QList&lt;QSharedPointer&lt;RLayer&gt;&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLayerNames">
      <variant return-type="QStringList" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLayer">
      <variant return-type="QSharedPointer&lt;RLayer&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layerName" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RLayout" sharedpointer="true">
    <super_list>
      <super name="RObject" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="QString" modifier="&amp;" name="name" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RLayout*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setName">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="n" />
        </parameters>
      </variant>
    </function>
    <function name="getTabOrder">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setTabOrder">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="to" />
        </parameters>
      </variant>
    </function>
    <function name="setMinLimits">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="minLimits" />
        </parameters>
      </variant>
    </function>
    <function name="getMinLimits">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setMaxLimits">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="maxLimits" />
        </parameters>
      </variant>
    </function>
    <function name="getMaxLimits">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setInsertionBase">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="insertionBase" />
        </parameters>
      </variant>
    </function>
    <function name="getInsertionBase">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setMinExtents">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="minExtents" />
        </parameters>
      </variant>
    </function>
    <function name="getMinExtents">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setMaxExtents">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="maxExtents" />
        </parameters>
      </variant>
    </function>
    <function name="getMaxExtents">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPlotPaperMarginLeftMM">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="setPlotPaperMarginBottomMM">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="setPlotPaperMarginRightMM">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="setPlotPaperMarginTopMM">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="setPlotPaperSize">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="setPlotOrigin">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="setPlotWindowAreaMin">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="setPlotWindowAreaMax">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="setNumeratorCustomScale">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="setDenominatorCustomScale">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="setPlotPaperUnits">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RLayout::PlotPaperUnits" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="setPlotRotation">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RLayout::PlotRotation" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="setPlotType">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RLayout::PlotType" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="setUseStandardScale">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="setStandardScale">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="setStandardScaleType">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RLayout::StandardScaleType" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="setCanonicalMediaName">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getPlotPaperMarginLeftMM">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPlotPaperMarginBottomMM">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPlotPaperMarginRightMM">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPlotPaperMarginTopMM">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPlotPaperSize">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPlotOrigin">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPlotWindowAreaMin">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPlotWindowAreaMax">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getNumeratorCustomScale">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDenominatorCustomScale">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPlotPaperUnits">
      <variant return-type="RLayout::PlotPaperUnits" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPlotRotation">
      <variant return-type="RLayout::PlotRotation" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPlotType">
      <variant return-type="RLayout::PlotType" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getUseStandardScale">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStandardScale">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStandardScaleType">
      <variant return-type="RLayout::StandardScaleType" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCanonicalMediaName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="print" />
  </class>
  <class name="RLeaderData">
    <super_list>
      <super name="REntityData" />
      <super name="RPolyline" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="polyline" />
          <parameter const="false" type="bool" modifier="" name="arrowHead" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="castToShape">
      <variant return-type="RShape*" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDimasz">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="scale" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="setDimasz">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getDimscale">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimscale">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="f" />
        </parameters>
      </variant>
    </function>
    <function name="scaleVisualProperties">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="scaleFactor" />
        </parameters>
      </variant>
    </function>
    <function name="setArrowHead">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="hasArrowHead">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="canHaveArrowHead">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="updateArrowHead">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStartPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="countVertices">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="countSegments">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="appendVertex">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="vertex" />
        </parameters>
      </variant>
    </function>
    <function name="getReferencePoints">
      <variant return-type="QList&lt;RRefPoint&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="hint" default="RS::RenderTop" />
        </parameters>
      </variant>
    </function>
    <function name="moveReferencePoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="targetPoint" />
          <parameter const="false" type="Qt::KeyboardModifiers" modifier="" name="modifiers" default="Qt::NoModifier" />
        </parameters>
      </variant>
    </function>
    <function name="getExploded">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="segments" default="RDEFAULT_MIN1" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
    </function>
    <function name="stretch">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="area" />
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="getShapes">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="false" />
          <parameter const="false" type="bool" modifier="" name="segment" default="false" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="entityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getArrowShape">
      <variant return-type="RTriangle" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDimLeaderBlockId">
      <variant return-type="REntity::Id" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimLeaderBlockId">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="id" />
        </parameters>
      </variant>
    </function>
    <function name="update">
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clearStyleOverrides">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RLeaderEntity" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
      <super name="REntity" />
    </super_list>
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyProtected" />
    <property static="true" type="RPropertyTypeId" name="PropertyWorkingSet" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyLayer" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetype" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetypeScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineweight" />
    <property static="true" type="RPropertyTypeId" name="PropertyColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDisplayedColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDrawOrder" />
    <property static="true" type="RPropertyTypeId" name="PropertyArrowHead" />
    <property static="true" type="RPropertyTypeId" name="PropertySplineShaped" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimLeaderBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyVertexNX" />
    <property static="true" type="RPropertyTypeId" name="PropertyVertexNY" />
    <property static="true" type="RPropertyTypeId" name="PropertyVertexNZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimscale" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimasz" />
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="RLeaderData" modifier="&amp;" name="data" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RLeaderEntity" modifier="&amp;" name="other" />
        </parameters>
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStaticPropertyTypeIds" static="true">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RLeaderEntity*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getData">
      <variant return-type="RLeaderData&amp;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setData">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RLeaderData" modifier="&amp;" name="d" />
        </parameters>
      </variant>
    </function>
    <function name="setArrowHead">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="hasArrowHead">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clear">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="normalize">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="countVertices">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="appendVertex">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="vertex" />
          <parameter const="false" type="double" modifier="" name="bulge" default="0.0" />
        </parameters>
      </variant>
    </function>
    <function name="prependVertex">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="vertex" />
          <parameter const="false" type="double" modifier="" name="bulge" default="0.0" />
        </parameters>
      </variant>
    </function>
    <function name="insertVertex">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="index" />
          <parameter const="true" type="RVector" modifier="&amp;" name="vertex" />
        </parameters>
      </variant>
    </function>
    <function name="getVertexAt">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="setVertexAt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="removeLastVertex">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="removeVertex">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="index" />
        </parameters>
      </variant>
    </function>
    <function name="countSegments">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSegmentAt">
      <variant return-type="QSharedPointer&lt;RShape&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="getBulgeAt">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="setBulgeAt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
          <parameter const="false" type="double" modifier="" name="b" />
        </parameters>
      </variant>
    </function>
    <function name="getDirection1">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection2">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStartPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setClosed">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isClosed">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDimscale">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimscale">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getDimasz">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="scale" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="setDimasz">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getExploded">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDimLeaderBlockId">
      <variant return-type="REntity::Id" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimLeaderBlockId">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="id" />
        </parameters>
      </variant>
    </function>
    <function name="clearStyleOverrides">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="exportEntity">
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RExporter" modifier="&amp;" name="e" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
          <parameter const="false" type="bool" modifier="" name="forceSelected" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="print" />
  </class>
  <class name="RLine" sharedpointer="true">
    <super_list>
      <super name="RShape" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="double" modifier="" name="x1" />
          <parameter const="false" type="double" modifier="" name="y1" />
          <parameter const="false" type="double" modifier="" name="x2" />
          <parameter const="false" type="double" modifier="" name="y2" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="startPoint" />
          <parameter const="false" type="double" modifier="" name="angle" />
          <parameter const="false" type="double" modifier="" name="distance" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="startPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="endPoint" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <property type="RVector" name="startPoint" read="getStartPoint" write="setStartPoint" />
    <property type="RVector" name="endPoint" read="getEndPoint" write="setEndPoint" />
    <function name="getShapeType">
      <variant return-type="RShape::Type" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RLine*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isDirected">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setZ">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="z" />
        </parameters>
      </variant>
    </function>
    <function name="getVectorProperties">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMiddlePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCenterPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPointsWithDistanceToEnd">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="int" modifier="" name="from" default="RS::FromAny" />
        </parameters>
      </variant>
    </function>
    <function name="getPointCloud">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="segmentLength" />
        </parameters>
      </variant>
    </function>
    <function name="getAngleAt">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="RS::From" modifier="" name="from" default="RS::FromStart" />
        </parameters>
      </variant>
    </function>
    <function name="getVectorTo">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="getStartPoint">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setStartPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="vector" />
        </parameters>
      </variant>
    </function>
    <function name="getEndPoint">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setEndPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="vector" />
        </parameters>
      </variant>
    </function>
    <function name="getMiddlePoint">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLength">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLength">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="l" />
          <parameter const="false" type="bool" modifier="" name="fromStart" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="setAngle">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a" />
        </parameters>
      </variant>
    </function>
    <function name="isParallel">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="line" />
        </parameters>
      </variant>
    </function>
    <function name="isVertical">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="isHorizontal">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="getDirection1">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection2">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSideOfPoint">
      <variant return-type="RS::Side" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="clipToXY">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="box" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="flipHorizontal">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="flipVertical">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="reverse">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="stretch">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="area" />
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="moveTo">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="dest" />
        </parameters>
      </variant>
    </function>
    <function name="getTransformed">
      <variant return-type="QSharedPointer&lt;RShape&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QTransform" modifier="&amp;" name="transform" />
        </parameters>
      </variant>
    </function>
    <function name="getTrimEnd">
      <variant return-type="RS::Ending" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" />
        </parameters>
      </variant>
    </function>
    <function name="trimStartPoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="trimDist" />
        </parameters>
      </variant>
    </function>
    <function name="trimEndPoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="trimDist" />
        </parameters>
      </variant>
    </function>
    <function name="getDistanceFromStart">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getOffsetShapes">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="int" modifier="" name="number" />
          <parameter const="false" type="RS::Side" modifier="" name="side" />
          <parameter const="true" type="RVector" modifier="&amp;" name="position" default="RVector::invalid" />
        </parameters>
      </variant>
    </function>
    <function name="splitAt">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="points" />
        </parameters>
      </variant>
    </function>
    <function name="print" />
    <preproc plain="#if QT_VERSION&gt;=0x060000" />
    <function name="copy">
      <variant return-type="RLine" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <preproc plain="#endif" />
  </class>
  <class name="RLineData">
    <super_list>
      <super name="REntityData" />
      <super name="RLine" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="startPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="endPoint" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="line" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLine">
      <variant return-type="RLine" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="setZ">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="z" />
        </parameters>
      </variant>
    </function>
    <function name="to2D">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="ignoreEmpty" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getMiddlePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getCenterPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getArcReferencePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
        </parameters>
      </variant>
    </function>
    <function name="getPointsWithDistanceToEnd">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="int" modifier="" name="from" default="RS::FromAny" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getIntersectionPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="REntityData" modifier="&amp;" name="other" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="bool" modifier="" name="same" default="false" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="true" />
          <!--
          <parameter const="false" type="QList&lt;QPair&lt;RObject::Id,RObject::Id&gt;&gt;" modifier="*" name="entityIds" default="NULL" />
          -->
        </parameters>
      </variant>
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getVectorTo">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="getDistanceTo">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="range" default="0.0" />
          <parameter const="false" type="bool" modifier="" name="draft" default="false" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="intersectsWith">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="axis1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="axis2" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="flipHorizontal">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="flipVertical">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="stretch">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="area" />
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="ignoreEmpty" />
        </parameters>
      </variant>
    </function>
    <function name="getHull">
      <variant return-type="RPolyline" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="getStartPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection1">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection2">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="reverse">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTrimEnd">
      <variant return-type="RS::Ending" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" />
        </parameters>
      </variant>
    </function>
    <function name="trimStartPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="trimEndPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getSideOfPoint">
      <variant return-type="RS::Side" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="getReferencePoints">
      <variant return-type="QList&lt;RRefPoint&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="hint" default="RS::RenderTop" />
        </parameters>
      </variant>
    </function>
    <function name="moveReferencePoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="targetPoint" />
          <parameter const="false" type="Qt::KeyboardModifiers" modifier="" name="modifiers" default="Qt::NoModifier" />
        </parameters>
      </variant>
    </function>
    <function name="castToShape">
      <variant return-type="RShape*" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getShapes">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="false" />
          <parameter const="false" type="bool" modifier="" name="segment" default="false" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="entityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RLineEntity" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
      <super name="REntity" />
    </super_list>
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyProtected" />
    <property static="true" type="RPropertyTypeId" name="PropertyWorkingSet" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyLayer" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetype" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetypeScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineweight" />
    <property static="true" type="RPropertyTypeId" name="PropertyColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDisplayedColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDrawOrder" />
    <property static="true" type="RPropertyTypeId" name="PropertyStartPointX" />
    <property static="true" type="RPropertyTypeId" name="PropertyStartPointY" />
    <property static="true" type="RPropertyTypeId" name="PropertyStartPointZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddlePointX" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddlePointY" />
    <property static="true" type="RPropertyTypeId" name="PropertyMiddlePointZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyEndPointX" />
    <property static="true" type="RPropertyTypeId" name="PropertyEndPointY" />
    <property static="true" type="RPropertyTypeId" name="PropertyEndPointZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyAngle" />
    <property static="true" type="RPropertyTypeId" name="PropertyLength" />
    <property static="true" type="RPropertyTypeId" name="PropertyTotalLength" />
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="RLineData" modifier="&amp;" name="data" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RLineEntity" modifier="&amp;" name="other" />
        </parameters>
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStaticPropertyTypeIds" static="true">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RLineEntity*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="exportEntity">
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RExporter" modifier="&amp;" name="e" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
          <parameter const="false" type="bool" modifier="" name="forceSelected" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getData">
      <variant return-type="RLineData&amp;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setShape">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="setStartPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getStartPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setEndPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getEndPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMiddlePoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAngleAt">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="RS::From" modifier="" name="from" />
        </parameters>
      </variant>
    </function>
    <function name="getDirection1">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection2">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="reverse">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSideOfPoint">
      <variant return-type="RS::Side" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="getTrimEnd">
      <variant return-type="RS::Ending" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" />
        </parameters>
      </variant>
    </function>
    <function name="trimStartPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="trimEndPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getLength">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="print" />
  </class>
  <class name="RLinetype" sharedpointer="true">
    <super_list>
      <super name="RObject" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="RLinetypePattern" modifier="&amp;" name="pattern" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" default="NULL" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RLinetype" modifier="&amp;" name="other" />
        </parameters>
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RLinetype*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setName">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="n" />
        </parameters>
      </variant>
    </function>
    <function name="isMetric">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setMetric">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getDescription">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDescription">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="d" />
        </parameters>
      </variant>
    </function>
    <function name="getLabel">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPatternString">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPatternString">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getPattern">
      <variant return-type="RLinetypePattern" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPattern">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RLinetypePattern" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="print">
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="QDebug" modifier="" name="dbg" />
        </parameters>
      </variant>
    </function>
    -->
  </class>
  <class name="RLinetypeCombo" ownership="cpp">
    <super_list>
      <super name="QObject" />
      <super name="QWidget" />
      <super name="QComboBox" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QWidget" modifier="*" name="parent" default="0" />
        </parameters>
      </variant>
    </constructor>
    <function name="init">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="doc" />
        </parameters>
      </variant>
    </function>
    <function name="reinit">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLinetypePattern">
      <variant return-type="RLinetypePattern" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLinetypePatternAt">
      <variant return-type="RLinetypePattern" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="setLinetypePattern">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="name" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RLinetypePattern" modifier="&amp;" name="linetypePattern" />
        </parameters>
      </variant>
    </function>
    <function name="getOnlyFixed">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setOnlyFixed">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="onlyFixed" />
        </parameters>
      </variant>
    </function>
    <function name="valueChanged">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="true" type="RLinetypePattern" modifier="&amp;" name="linetypePattern" />
        </parameters>
      </variant>
    </function>
    <function name="linetypePatternChanged">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="index" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RLinetypePattern">
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="bool" modifier="" name="metric" />
          <parameter const="true" type="QString" modifier="&amp;" name="name" />
          <parameter const="true" type="QString" modifier="&amp;" name="description" />
          <parameter const="true" type="QList&lt;double&gt;" modifier="&amp;" name="dashes" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="false" type="bool" modifier="" name="metric" />
          <parameter const="true" type="QString" modifier="&amp;" name="name" />
          <parameter const="true" type="QString" modifier="&amp;" name="description" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="set">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;double&gt;" modifier="&amp;" name="dashes" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="loadAllFrom" static="true">
      <variant return-type="QList&lt;QPair&lt;QString,RLinetypePattern*&gt;&gt;" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="metric" />
          <parameter const="true" type="QString" modifier="&amp;" name="fileName" />
        </parameters>
      </variant>
    </function>
    -->
    <function name="isValid">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getNumDashes">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setName">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="n" />
        </parameters>
      </variant>
    </function>
    <function name="getDescription">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDescription">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="d" />
        </parameters>
      </variant>
    </function>
    <function name="getScreenScale">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setScreenScale">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="getNoOffset">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setNoOffset">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="n" />
        </parameters>
      </variant>
    </function>
    <function name="getLabel">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isMetric">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setMetric">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="setPatternString">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="patternString" />
        </parameters>
      </variant>
    </function>
    <function name="getPatternString">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPattern">
      <variant return-type="QList&lt;double&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPatternLength">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDashLengthAt">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="getDashOffsetAt">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;double&gt;" modifier="&amp;" name="dashes" />
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="hasShapeNumberAt">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="getShapeNumberAt">
      <variant return-type="int" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="setShapeNumberAt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
          <parameter const="false" type="int" modifier="" name="num" />
        </parameters>
      </variant>
    </function>
    <function name="hasShapeScaleAt">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="getShapeScaleAt">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="setShapeScaleAt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
          <parameter const="false" type="double" modifier="" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="hasShapeRotationAt">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="getShapeRotationAt">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="setShapeRotationAt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
          <parameter const="false" type="double" modifier="" name="r" />
        </parameters>
      </variant>
    </function>
    <function name="hasShapeOffsetAt">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="getShapeOffsetAt">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="setShapeOffsetAt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="hasShapeTextAt">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="getShapeTextAt">
      <variant return-type="QString" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="setShapeTextAt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
          <parameter const="true" type="QString" modifier="&amp;" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="hasShapeTextStyleAt">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="getShapeTextStyleAt">
      <variant return-type="QString" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="setShapeTextStyleAt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
          <parameter const="true" type="QString" modifier="&amp;" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="getShapeIndices">
      <variant return-type="QList&lt;int&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasShapes">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasShapeAt">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="getShapeAt">
      <variant return-type="QList&lt;RPainterPath&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="updateShapes">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLargestGap">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasDashAt">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="pos" />
        </parameters>
      </variant>
    </function>
    <function name="getDelta">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="pos" />
        </parameters>
      </variant>
    </function>
    <function name="getPatternOffset">
      <variant return-type="double" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="length" />
        </parameters>
      </variant>
    </function>
    <function name="getSymmetries">
      <variant return-type="QList&lt;double&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <!--
    <function name="getPatternOffsetAt">
      <variant return-type="double" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="length" />
          <parameter const="false" type="double" modifier="" name="symmetryPos" />
          <parameter const="false" type="double" modifier="*" name="gap" default="NULL" />
          <parameter const="false" type="bool" modifier="" name="end" default="false" />
        </parameters>
      </variant>
    </function>
    -->
    <function name="scale">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="factor" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="getScreenBasedLinetype">
      <variant return-type="QVector&lt;qreal&gt;" access="public">
        <parameters />
      </variant>
    </function>
    -->
    <function name="isLoaded">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="load">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="initNameMap" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RLineweight">
    <enum name="Lineweight">
      <key>Weight000</key>
      <key>Weight005</key>
      <key>Weight009</key>
      <key>Weight013</key>
      <key>Weight015</key>
      <key>Weight018</key>
      <key>Weight020</key>
      <key>Weight025</key>
      <key>Weight030</key>
      <key>Weight035</key>
      <key>Weight040</key>
      <key>Weight050</key>
      <key>Weight053</key>
      <key>Weight060</key>
      <key>Weight070</key>
      <key>Weight080</key>
      <key>Weight090</key>
      <key>Weight100</key>
      <key>Weight106</key>
      <key>Weight120</key>
      <key>Weight140</key>
      <key>Weight158</key>
      <key>Weight200</key>
      <key>Weight211</key>
      <key>WeightByLayer</key>
      <key>WeightByBlock</key>
      <key>WeightByLwDefault</key>
      <key>WeightInvalid</key>
    </enum>
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <!--
    <function name="getList" static="true">
      <variant return-type="QList&lt;QPair&lt;QString,RLineweight::Lineweight&gt;&gt;" static="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="onlyFixed" />
          <parameter const="false" type="bool" modifier="" name="noDefault" default="false" />
        </parameters>
      </variant>
    </function>
    -->
    <function name="getIcon" static="true">
      <variant return-type="QIcon" static="true" access="public">
        <parameters>
          <parameter const="false" type="RLineweight::Lineweight" modifier="" name="color" />
          <parameter const="true" type="QSize" modifier="&amp;" name="size" default="RDEFAULT_QSIZE_ICON" />
        </parameters>
      </variant>
    </function>
    <function name="getName" static="true">
      <variant return-type="QString" static="true" access="public">
        <parameters>
          <parameter const="false" type="RLineweight::Lineweight" modifier="" name="lineweight" />
        </parameters>
      </variant>
    </function>
    <function name="getClosestMatch" static="true">
      <variant return-type="RLineweight::Lineweight" static="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="lw" />
        </parameters>
      </variant>
    </function>
    <function name="init" static="true" />
  </class>
  <class name="RLineweightCombo" ownership="cpp">
    <super_list>
      <super name="QObject" />
      <super name="QWidget" />
      <super name="QComboBox" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QWidget" modifier="*" name="parent" default="0" />
        </parameters>
      </variant>
    </constructor>
    <function name="init">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLineweight">
      <variant return-type="RLineweight::Lineweight" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLineweight">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RLineweight::Lineweight" modifier="" name="lw" />
        </parameters>
      </variant>
    </function>
    <function name="getOnlyFixed">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setOnlyFixed">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="onlyFixed" />
        </parameters>
      </variant>
    </function>
    <function name="getNoDefault">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setNoDefault">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="noDefault" />
        </parameters>
      </variant>
    </function>
    <function name="valueChanged">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="RLineweight::Lineweight" modifier="" name="lw" />
        </parameters>
      </variant>
    </function>
    <function name="lineweightChanged">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="index" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RListView" ownership="cpp" inheritable="true">
    <super_list>
      <super name="QObject" />
      <super name="QWidget" />
      <super name="QFrame" />
      <super name="QAbstractScrollArea" />
      <super name="QAbstractItemView" />
      <super name="QListView" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QWidget" modifier="*" name="parent" default="0" />
        </parameters>
      </variant>
    </constructor>
    <function name="signalContextMenuEvent">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="QContextMenuEvent" modifier="*" name="e" />
        </parameters>
      </variant>
    </function>
    <function name="signalMouseMoveEvent">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="QMouseEvent" modifier="*" name="e" />
        </parameters>
      </variant>
    </function>
    <function name="signalMousePressEvent">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="QMouseEvent" modifier="*" name="e" />
        </parameters>
      </variant>
    </function>
    <function name="signalMouseReleaseEvent">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="QMouseEvent" modifier="*" name="e" />
        </parameters>
      </variant>
    </function>
    <function name="signalDragEnterEvent">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="QDragEnterEvent" modifier="*" name="e" />
        </parameters>
      </variant>
    </function>
    <function name="signalDragMoveEvent">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="QDragMoveEvent" modifier="*" name="e" />
        </parameters>
      </variant>
    </function>
    <function name="signalDropEvent">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="QDropEvent" modifier="*" name="e" />
        </parameters>
      </variant>
    </function>
    <function name="signalStartDrag">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="Qt::DropActions" modifier="" name="supportedActions" />
        </parameters>
      </variant>
    </function>
    <function name="signalSelectionChanged">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="true" type="QItemSelection" modifier="&amp;" name="selected" />
          <parameter const="true" type="QItemSelection" modifier="&amp;" name="deselected" />
        </parameters>
      </variant>
    </function>
    <function name="signalCurrentChanged">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="true" type="QModelIndex" modifier="&amp;" name="current" />
          <parameter const="true" type="QModelIndex" modifier="&amp;" name="previous" />
        </parameters>
      </variant>
    </function>
    <function name="signalToolTipRequested">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="QHelpEvent" modifier="*" name="e" />
        </parameters>
      </variant>
    </function>
    <function name="contextMenuEvent">
      <variant return-type="void" virtual="true" access="protected">
        <parameters>
          <parameter const="false" type="QContextMenuEvent" modifier="*" name="e" />
        </parameters>
      </variant>
    </function>
    <function name="mousePressEvent">
      <variant return-type="void" virtual="true" access="protected">
        <parameters>
          <parameter const="false" type="QMouseEvent" modifier="*" name="e" />
        </parameters>
      </variant>
    </function>
    <function name="mouseReleaseEvent">
      <variant return-type="void" virtual="true" access="protected">
        <parameters>
          <parameter const="false" type="QMouseEvent" modifier="*" name="e" />
        </parameters>
      </variant>
    </function>
    <function name="mouseMoveEvent">
      <variant return-type="void" virtual="true" access="protected">
        <parameters>
          <parameter const="false" type="QMouseEvent" modifier="*" name="e" />
        </parameters>
      </variant>
    </function>
    <function name="dragEnterEvent">
      <variant return-type="void" virtual="true" access="protected">
        <parameters>
          <parameter const="false" type="QDragEnterEvent" modifier="*" name="e" />
        </parameters>
      </variant>
    </function>
    <function name="dragMoveEvent">
      <variant return-type="void" virtual="true" access="protected">
        <parameters>
          <parameter const="false" type="QDragMoveEvent" modifier="*" name="e" />
        </parameters>
      </variant>
    </function>
    <function name="dropEvent">
      <variant return-type="void" virtual="true" access="protected">
        <parameters>
          <parameter const="false" type="QDropEvent" modifier="*" name="e" />
        </parameters>
      </variant>
    </function>
    <function name="startDrag">
      <variant return-type="void" virtual="true" access="protected">
        <parameters>
          <parameter const="false" type="Qt::DropActions" modifier="" name="supportedActions" />
        </parameters>
      </variant>
    </function>
    <function name="selectionChanged">
      <variant return-type="void" virtual="true" access="protected">
        <parameters>
          <parameter const="true" type="QItemSelection" modifier="&amp;" name="selected" />
          <parameter const="true" type="QItemSelection" modifier="&amp;" name="deselected" />
        </parameters>
      </variant>
    </function>
    <function name="currentChanged">
      <variant return-type="void" virtual="true" access="protected">
        <parameters>
          <parameter const="true" type="QModelIndex" modifier="&amp;" name="current" />
          <parameter const="true" type="QModelIndex" modifier="&amp;" name="previous" />
        </parameters>
      </variant>
    </function>
    <function name="event">
      <variant return-type="bool" virtual="true" access="protected">
        <parameters>
          <parameter const="false" type="QEvent" modifier="*" name="event" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RListWidget" ownership="cpp" inheritable="true">
    <super_list>
      <super name="QObject" />
      <super name="QWidget" />
      <super name="QFrame" />
      <super name="QAbstractScrollArea" />
      <super name="QAbstractItemView" />
      <super name="QListView" />
      <super name="QListWidget" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QWidget" modifier="*" name="parent" default="0" />
        </parameters>
      </variant>
    </constructor>
    <function name="setIconOffset">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="o" />
        </parameters>
      </variant>
    </function>
    <function name="contextMenuEvent">
      <variant return-type="void" virtual="true" overridable="true" access="protected">
        <parameters>
          <parameter const="false" type="QContextMenuEvent" modifier="*" name="e" />
        </parameters>
      </variant>
    </function>
    <function name="mousePressEvent">
      <variant return-type="void" virtual="true" access="protected">
        <parameters>
          <parameter const="false" type="QMouseEvent" modifier="*" name="e" />
        </parameters>
      </variant>
    </function>
    <function name="mouseReleaseEvent">
      <variant return-type="void" virtual="true" access="protected">
        <parameters>
          <parameter const="false" type="QMouseEvent" modifier="*" name="e" />
        </parameters>
      </variant>
    </function>
    <function name="mouseMoveEvent">
      <variant return-type="void" virtual="true" access="protected">
        <parameters>
          <parameter const="false" type="QMouseEvent" modifier="*" name="e" />
        </parameters>
      </variant>
    </function>
    <function name="iconClicked">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="int" modifier="" name="x" />
          <parameter const="false" type="QListWidgetItem" modifier="*" name="item" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RMainWindow" ownership="cpp">
    <!--
    <super_list>
      <super name="RProgressHandler" />
      <super name="RMessageHandler" />
    </super_list>
    -->
    <!--
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    -->
    <function name="getMainWindow" static="true">
      <variant return-type="RMainWindow*" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasMainWindow" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="installMessageHandler" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDocument">
      <variant return-type="RDocument*" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="disable">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="enable">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDocumentInterface">
      <variant return-type="RDocumentInterface*" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDocumentInterfaceStatic" static="true">
      <variant return-type="RDocumentInterface*" access="public">
        <parameters />
      </variant>
    </function>
    <function name="notifyListeners">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="withNull" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="addCoordinateListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RCoordinateListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="removeCoordinateListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RCoordinateListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="notifyCoordinateListeners">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
    <function name="addSelectionListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RSelectionListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="removeSelectionListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RSelectionListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="notifySelectionListeners">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
    <function name="postSelectionChangedEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="postTransactionEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RTransaction" modifier="&amp;" name="t" />
          <parameter const="false" type="bool" modifier="" name="onlyChanges" default="false" />
          <parameter const="false" type="RS::EntityType" modifier="" name="entityTypeFilter" default="RS::EntityAll" />
        </parameters>
      </variant>
    </function>
    <function name="postCloseEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="postPropertyEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RS::EntityType" modifier="" name="entityTypeFilter" default="RS::EntityAll" />
        </parameters>
      </variant>
    </function>
    <function name="addPropertyListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RPropertyListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="removePropertyListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RPropertyListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="notifyPropertyListeners">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="false" type="bool" modifier="" name="onlyChanges" default="false" />
          <parameter const="false" type="RS::EntityType" modifier="" name="entityTypeFilter" default="RS::EntityUnknown" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="&amp;" name="document" />
          <parameter const="false" type="REntity" modifier="&amp;" name="entity" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="addExportListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RExportListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="removeExportListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RExportListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="notifyExportListenersPre">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
    <function name="notifyExportListenersPost">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
    <function name="notifyExportListenersEnd">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RExporter" modifier="*" name="exporter" />
        </parameters>
      </variant>
    </function>
    <function name="addEntityExportListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="REntityExportListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="removeEntityExportListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="REntityExportListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="notifyEntityExportListeners">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RExporter" modifier="*" name="exporter" />
          <parameter const="false" type="REntity" modifier="*" name="entity" />
        </parameters>
      </variant>
    </function>
    <function name="addImportListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RImportListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="removeImportListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RImportListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="notifyImportListenersPre">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
    <function name="notifyImportListenersPost">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
    <function name="addTransactionListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RTransactionListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="removeTransactionListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RTransactionListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="notifyTransactionListeners">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="addInterTransactionListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RInterTransactionListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="removeInterTransactionListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RInterTransactionListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="notifyInterTransactionListeners">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="addNewDocumentListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RNewDocumentListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="removeNewDocumentListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RNewDocumentListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="notifyNewDocumentListeners">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" />
          <parameter const="false" type="bool" modifier="" name="beforeLoad" />
        </parameters>
      </variant>
    </function>
    <function name="addSnapListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RSnapListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="removeSnapListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RSnapListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="notifySnapListeners">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
    <function name="addFocusListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RFocusListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="removeFocusListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RFocusListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="notifyFocusListeners">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
    <function name="addKeyListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RKeyListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="removeKeyListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RKeyListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="notifyKeyListeners">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QKeyEvent" modifier="*" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="addViewFocusListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RViewFocusListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="removeViewFocusListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RViewFocusListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="notifyViewFocusListeners">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RGraphicsView" modifier="*" name="view" />
        </parameters>
      </variant>
    </function>
    <function name="addPreferencesListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RPreferencesListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="removePreferencesListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RPreferencesListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="notifyPreferencesListeners">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
    <function name="propertyChangeEvent">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RPropertyEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="addUcsListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RUcsListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="removeUcsListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RUcsListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="notifyUcsListeners">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
    <function name="addLayerListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RLayerListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="removeLayerListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RLayerListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="notifyLayerListeners">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
          <parameter const="false" type="QList&lt;RLayer::Id&gt;" modifier="&amp;" name="layerIds" />
        </parameters>
      </variant>
    </function>
    <function name="notifyLayerListenersCurrentLayer">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
          <parameter const="false" type="RLayer::Id" modifier="" name="previousLayerId" />
        </parameters>
      </variant>
    </function>
    <function name="addBlockListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RBlockListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="removeBlockListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RBlockListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="notifyBlockListeners">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
    <function name="notifyBlockListenersCurrentBlock">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
    <function name="addViewListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RViewListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="removeViewListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RViewListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="notifyViewListeners">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
    <function name="addPenListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RPenListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="removePenListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RPenListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="notifyPenListeners">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
    <function name="addPaletteListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RPaletteListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="removePaletteListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RPaletteListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="notifyPaletteListeners">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="ucsSetEvent">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="ucsName" />
        </parameters>
      </variant>
    </function>
    <function name="escapeEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setGraphicsViewCursor">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QCursor" modifier="&amp;" name="cursor" />
        </parameters>
      </variant>
    </function>
    <function name="getWidth">
      <variant return-type="int" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getHeight">
      <variant return-type="int" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPositionX">
      <variant return-type="int" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPositionY">
      <variant return-type="int" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="resize">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="width" />
          <parameter const="false" type="int" modifier="" name="height" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="x" />
          <parameter const="false" type="int" modifier="" name="y" />
        </parameters>
      </variant>
    </function>
    <function name="quit">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getChildWidget">
      <variant return-type="QWidget*" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="name" />
        </parameters>
      </variant>
    </function>
    <function name="handleUserMessage">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="message" />
          <parameter const="false" type="bool" modifier="" name="escape" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="handleUserInfo">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="message" />
          <parameter const="false" type="bool" modifier="" name="escape" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="handleUserWarning">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="message" />
          <parameter const="false" type="bool" modifier="" name="messageBox" default="false" />
          <parameter const="false" type="bool" modifier="" name="escape" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="handleUserCommand">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="message" />
          <parameter const="false" type="bool" modifier="" name="escape" default="true" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="messageHandler" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QtMsgType" modifier="" name="type" />
          <parameter const="true" type="QMessageLogContext" modifier="&amp;" name="context" />
          <parameter const="true" type="QString" modifier="&amp;" name="message" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QtMsgType" modifier="" name="type" />
          <parameter const="true" type="char" modifier="*" name="msg" />
        </parameters>
      </variant>
    </function>
    -->
    <function name="setCommandPrompt">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="text" default="&quot;&quot;" />
        </parameters>
      </variant>
    </function>
    <function name="setLeftMouseTip">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="text" default="&quot;&quot;" />
        </parameters>
      </variant>
    </function>
    <function name="setRightMouseTip">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="text" default="&quot;&quot;" />
        </parameters>
      </variant>
    </function>
    <function name="eval">
      <variant return-type="QVariant" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="ext" />
          <parameter const="true" type="QString" modifier="&amp;" name="script" />
        </parameters>
      </variant>
    </function>
    <function name="readSettings" />
    <function name="writeSettings" />
  </class>
  <class name="RMainWindowQt" ownership="cpp">
    <super_list>
      <super name="QObject" />
      <super name="QWidget" />
      <super name="QMainWindow" />
      <super name="RMainWindow" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QWidget" modifier="*" name="parent" default="0" />
          <parameter const="false" type="bool" modifier="" name="hasMdiArea" default="true" />
        </parameters>
      </variant>
    </constructor>
    <function name="getMainWindow" static="true">
      <variant return-type="RMainWindowQt*" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getWidth">
      <variant return-type="int" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getHeight">
      <variant return-type="int" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPositionX">
      <variant return-type="int" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPositionY">
      <variant return-type="int" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="resize">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="width" />
          <parameter const="false" type="int" modifier="" name="height" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="x" />
          <parameter const="false" type="int" modifier="" name="y" />
        </parameters>
      </variant>
    </function>
    <function name="disable">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="enable">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDocument">
      <variant return-type="RDocument*" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDocumentInterface">
      <variant return-type="RDocumentInterface*" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="handleUserMessage">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="message" />
          <parameter const="false" type="bool" modifier="" name="escape" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="handleUserInfo">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="message" />
          <parameter const="false" type="bool" modifier="" name="escape" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="handleUserWarning">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="message" />
          <parameter const="false" type="bool" modifier="" name="messageBox" default="false" />
          <parameter const="false" type="bool" modifier="" name="escape" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="handleUserCommand">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="message" />
          <parameter const="false" type="bool" modifier="" name="escape" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="postSelectionChangedEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="postTransactionEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RTransaction" modifier="&amp;" name="t" />
          <parameter const="false" type="bool" modifier="" name="onlyChanges" default="false" />
          <parameter const="false" type="RS::EntityType" modifier="" name="entityTypeFilter" default="RS::EntityAll" />
        </parameters>
      </variant>
    </function>
    <function name="postPropertyEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RS::EntityType" modifier="" name="entityTypeFilter" default="RS::EntityAll" />
        </parameters>
      </variant>
    </function>
    <function name="postCloseEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMdiChild">
      <variant return-type="RMdiChildQt*" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTabBar">
      <variant return-type="QTabBar*" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMdiArea">
      <variant return-type="RMdiArea*" access="public">
        <parameters />
      </variant>
    </function>
    <function name="cancelProgress">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setProgress">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="value" />
        </parameters>
      </variant>
    </function>
    <function name="setProgressEnd">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setProgressText">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="text" default="&quot;&quot;" />
        </parameters>
      </variant>
    </function>
    <function name="setCommandPrompt">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="text" default="&quot;&quot;" />
        </parameters>
      </variant>
    </function>
    <function name="setLeftMouseTip">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="text" default="&quot;&quot;" />
        </parameters>
      </variant>
    </function>
    <function name="setRightMouseTip">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="text" default="&quot;&quot;" />
        </parameters>
      </variant>
    </function>
    <function name="showContextMenu">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RObject::Id" modifier="" name="entityId" />
          <parameter const="true" type="RVector" modifier="&amp;" name="pos" />
        </parameters>
      </variant>
    </function>
    <function name="escapeEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setGraphicsViewCursor">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QCursor" modifier="&amp;" name="cursor" />
        </parameters>
      </variant>
    </function>
    <function name="readSettings">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="writeSettings">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="createPopupMenu">
      <variant return-type="QMenu*" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getChildWidget">
      <variant return-type="QWidget*" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="name" />
        </parameters>
      </variant>
    </function>
    <function name="getDockWidgets">
      <variant return-type="QList&lt;QDockWidget*&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getToolBars">
      <variant return-type="QList&lt;QToolBar*&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clearKeyLog">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getKeyLog">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="quit">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="currentTabChanged">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="index" />
        </parameters>
      </variant>
    </function>
    <function name="subWindowActivated">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QMdiSubWindow" modifier="*" name="sw" />
        </parameters>
      </variant>
    </function>
    <function name="commandPrompt">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="text" />
        </parameters>
      </variant>
    </function>
    <function name="leftMouseTip">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="message" />
        </parameters>
      </variant>
    </function>
    <function name="rightMouseTip">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="message" />
        </parameters>
      </variant>
    </function>
    <function name="progress">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="int" modifier="" name="value" />
        </parameters>
      </variant>
    </function>
    <function name="progressEnd">
      <variant return-type="void" access="public" signal="true">
        <parameters />
      </variant>
    </function>
    <function name="progressText">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="label" />
        </parameters>
      </variant>
    </function>
    <function name="progressCanceled">
      <variant return-type="void" access="public" signal="true">
        <parameters />
      </variant>
    </function>
    <function name="userMessage">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="message" />
          <parameter const="false" type="bool" modifier="" name="escape" />
        </parameters>
      </variant>
    </function>
    <function name="userInfo">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="message" />
          <parameter const="false" type="bool" modifier="" name="escape" />
        </parameters>
      </variant>
    </function>
    <function name="userWarning">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="message" />
          <parameter const="false" type="bool" modifier="" name="messageBox" />
          <parameter const="false" type="bool" modifier="" name="escape" />
        </parameters>
      </variant>
    </function>
    <function name="userCommand">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="message" />
          <parameter const="false" type="bool" modifier="" name="escape" />
        </parameters>
      </variant>
    </function>
    <function name="contextMenu">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="int" modifier="" name="entityId" />
          <parameter const="true" type="RVector" modifier="&amp;" name="pos" />
        </parameters>
      </variant>
    </function>
    <function name="escape">
      <variant return-type="void" access="public" signal="true">
        <parameters />
      </variant>
    </function>
    <function name="drop">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="QDropEvent" modifier="*" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="dragEnter">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="QDragEnterEvent" modifier="*" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="resumedTab">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="RMdiChildQt" modifier="*" name="mdiChild" />
        </parameters>
      </variant>
    </function>
    <function name="closeRequested">
      <variant return-type="void" access="public" signal="true">
        <parameters />
      </variant>
    </function>
    <function name="enterPressed">
      <variant return-type="void" access="public" signal="true">
        <parameters />
      </variant>
    </function>
    <function name="toolBarContextMenu">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="QMenu" modifier="*" name="menu" />
        </parameters>
      </variant>
    </function>
    <function name="closeEvent" />
    <function name="dropEvent" />
    <function name="dragEnterEvent" />
    <function name="event" />
    <function name="updateGuiActions">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QMdiSubWindow" modifier="*" name="mdiChild" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="initGuiActions">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="updateScenes">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QMdiSubWindow" modifier="*" name="mdiChild" />
        </parameters>
      </variant>
    </function>
    <function name="notifyListenersSlot">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QMdiSubWindow" modifier="*" name="mdiChild" />
        </parameters>
      </variant>
    </function>
    <function name="suspendAndResume">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QMdiSubWindow" modifier="*" name="mdiChild" />
        </parameters>
      </variant>
    </function>
    <function name="paintEvent">
      <variant return-type="void" virtual="true" access="protected">
        <parameters>
          <parameter const="false" type="QPaintEvent" modifier="*" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="mouseMoveEvent">
      <variant return-type="void" virtual="true" access="protected">
        <parameters>
          <parameter const="false" type="QMouseEvent" modifier="*" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="resizeEvent">
      <variant return-type="void" virtual="true" access="protected">
        <parameters>
          <parameter const="false" type="QResizeEvent" modifier="*" name="event" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RMath">
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="uninit" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="mround" static="true">
      <variant return-type="int" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="trunc" static="true">
      <variant return-type="double" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="pow" static="true">
      <variant return-type="double" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="x" />
          <parameter const="false" type="double" modifier="" name="y" />
        </parameters>
      </variant>
    </function>
    <function name="isNormal" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="isNaN" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="isInf" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="isSane" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="eval" static="true">
      <variant return-type="double" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="expression" />
        </parameters>
      </variant>
    </function>
    <function name="getError" static="true">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasError" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="angleToString" static="true">
      <variant return-type="QString" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a" />
        </parameters>
      </variant>
    </function>
    <function name="trimTrailingZeroes" static="true">
      <variant return-type="QString" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="rad2deg" static="true">
      <variant return-type="double" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a" />
        </parameters>
      </variant>
    </function>
    <function name="deg2rad" static="true">
      <variant return-type="double" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a" />
        </parameters>
      </variant>
    </function>
    <function name="rad2gra" static="true">
      <variant return-type="double" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a" />
        </parameters>
      </variant>
    </function>
    <function name="gra2deg" static="true">
      <variant return-type="double" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a" />
        </parameters>
      </variant>
    </function>
    <function name="isBetween" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="value" />
          <parameter const="false" type="double" modifier="" name="limit1" />
          <parameter const="false" type="double" modifier="" name="limit2" />
          <parameter const="false" type="bool" modifier="" name="inclusive" />
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="getGcd" static="true">
      <variant return-type="int" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="a" />
          <parameter const="false" type="int" modifier="" name="b" />
        </parameters>
      </variant>
    </function>
    <function name="isAngleBetween" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a" />
          <parameter const="false" type="double" modifier="" name="a1" />
          <parameter const="false" type="double" modifier="" name="a2" />
          <parameter const="false" type="bool" modifier="" name="reversed" />
        </parameters>
      </variant>
    </function>
    <function name="getNormalizedAngle" static="true">
      <variant return-type="double" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a" />
        </parameters>
      </variant>
    </function>
    <function name="getRelativeAngle" static="true">
      <variant return-type="double" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a" />
          <parameter const="false" type="double" modifier="" name="baseAngle" />
        </parameters>
      </variant>
    </function>
    <function name="getAngleDifference" static="true">
      <variant return-type="double" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a1" />
          <parameter const="false" type="double" modifier="" name="a2" />
        </parameters>
      </variant>
    </function>
    <function name="getAngleDifference180" static="true">
      <variant return-type="double" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a1" />
          <parameter const="false" type="double" modifier="" name="a2" />
        </parameters>
      </variant>
    </function>
    <function name="makeAngleReadable" static="true">
      <variant return-type="double" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="angle" />
          <parameter const="false" type="bool" modifier="" name="readable" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="isAngleReadable" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="angle" />
          <parameter const="false" type="double" modifier="" name="tolerance" default="0.01" />
        </parameters>
      </variant>
    </function>
    <function name="isSameDirection" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="dir1" />
          <parameter const="false" type="double" modifier="" name="dir2" />
          <parameter const="false" type="double" modifier="" name="tol" default="RS::AngleTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="absmod" static="true">
      <variant return-type="int" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="a" />
          <parameter const="false" type="int" modifier="" name="b" />
        </parameters>
      </variant>
    </function>
    <function name="toFractionString" static="true">
      <variant return-type="QString" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
          <parameter const="false" type="int" modifier="" name="maxDenominator" />
        </parameters>
      </variant>
    </function>
    <function name="toFraction" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
          <parameter const="false" type="int" modifier="" name="maxDenominator" />
          <parameter const="false" type="int" modifier="&amp;" name="number" />
          <parameter const="false" type="int" modifier="&amp;" name="numerator" />
          <parameter const="false" type="int" modifier="&amp;" name="denominator" />
        </parameters>
      </variant>
    </function>
    <function name="simplify" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="numerator" />
          <parameter const="false" type="int" modifier="" name="denominator" />
          <parameter const="false" type="int" modifier="&amp;" name="numeratorRes" />
          <parameter const="false" type="int" modifier="&amp;" name="denominatorRes" />
        </parameters>
      </variant>
    </function>
    <function name="fuzzyCompare" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v1" />
          <parameter const="false" type="double" modifier="" name="v2" />
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="fuzzyAngleCompare" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v1" />
          <parameter const="false" type="double" modifier="" name="v2" />
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::AngleTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="containsFuzzy" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;double&gt;" modifier="&amp;" name="values" />
          <parameter const="false" type="double" modifier="" name="v" />
          <parameter const="false" type="double" modifier="" name="tol" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="parseScale" static="true">
      <variant return-type="double" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="scaleString" />
        </parameters>
      </variant>
    </function>
    <function name="parseCoordinate" static="true">
      <variant return-type="RVector" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="coordinateString" />
          <parameter const="true" type="RVector" modifier="&amp;" name="relativeZero" default="RVector::nullVector" />
        </parameters>
      </variant>
    </function>
    <function name="getMd5Hash" static="true">
      <variant return-type="QString" static="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="data" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="getQuadRoots" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="" />
          <parameter const="false" type="double" modifier="" name="" />
        </parameters>
      </variant>
    </function>
    -->
    <!--
    <function name="getCubicRoots" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="" />
          <parameter const="false" type="double" modifier="" name="" />
        </parameters>
      </variant>
    </function>
    -->
    <!--
    <function name="getBiQuadRoots" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="" />
          <parameter const="false" type="double" modifier="" name="" />
        </parameters>
      </variant>
    </function>
    -->
  </class>
  <class name="RMathComboBox" ownership="cpp">
    <super_list>
      <super name="QObject" />
      <super name="QWidget" />
      <super name="QComboBox" />
    </super_list>
    <property type="bool" name="integer" read="isInteger" />
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QWidget" modifier="*" name="parent" default="NULL" />
        </parameters>
      </variant>
    </constructor>
    <function name="getMathLineEdit">
      <variant return-type="RMathLineEdit*" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isAngle">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setAngle">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isScale">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setScale">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
          <parameter const="false" type="RS::Unit" modifier="" name="unit" />
        </parameters>
      </variant>
    </function>
    <function name="isInteger">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setInteger">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="setValue">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
          <parameter const="false" type="int" modifier="" name="precision" default="6" />
        </parameters>
      </variant>
    </function>
    <function name="getValue">
      <variant return-type="double" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getError">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clearError">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isSane">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="slotTextChanged">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="text" />
        </parameters>
      </variant>
    </function>
    <function name="slotValueChanged">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="value" />
          <parameter const="true" type="QString" modifier="&amp;" name="error" />
        </parameters>
      </variant>
    </function>
    <function name="valueChanged">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="double" modifier="" name="value" />
          <parameter const="true" type="QString" modifier="&amp;" name="error" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RMathLineEdit" ownership="cpp">
    <super_list>
      <super name="QObject" />
      <super name="QWidget" />
      <super name="QLineEdit" />
    </super_list>
    <property type="bool" name="scale" read="isScale" />
    <property type="bool" name="integer" read="isInteger" />
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QWidget" modifier="*" name="parent" default="NULL" />
        </parameters>
      </variant>
    </constructor>
    <function name="isAngle">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setAngle">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isScale">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setScale">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isInteger">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setInteger">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="setValue">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
          <parameter const="false" type="int" modifier="" name="precision" default="6" />
        </parameters>
      </variant>
    </function>
    <function name="getValue">
      <variant return-type="double" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getError">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clearError">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isSane">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setToolTip">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="toolTip" />
        </parameters>
      </variant>
    </function>
    <function name="getNormalTextColor">
      <variant return-type="QColor" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setTextColor">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="error" />
        </parameters>
      </variant>
    </function>
    <function name="keyPressEvent" />
    <function name="keyReleaseEvent" />
    <function name="slotTextChanged">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="text" />
        </parameters>
      </variant>
    </function>
    <function name="slotTextEdited">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="text" />
        </parameters>
      </variant>
    </function>
    <function name="valueChanged">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="double" modifier="" name="value" />
          <parameter const="true" type="QString" modifier="&amp;" name="error" />
        </parameters>
      </variant>
    </function>
    <function name="upKeyPressed">
      <variant return-type="void" access="public" signal="true">
        <parameters />
      </variant>
    </function>
    <function name="downKeyPressed">
      <variant return-type="void" access="public" signal="true">
        <parameters />
      </variant>
    </function>
    <function name="enterKeyPressed">
      <variant return-type="void" access="public" signal="true">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RMatrix">
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="int" modifier="" name="r" />
          <parameter const="false" type="int" modifier="" name="c" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RMatrix" modifier="&amp;" name="other" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="isValid">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="createIdentity2x2" static="true">
      <variant return-type="RMatrix" access="public">
        <parameters />
      </variant>
    </function>
    <function name="createIdentity3x3" static="true">
      <variant return-type="RMatrix" access="public">
        <parameters />
      </variant>
    </function>
    <function name="createIdentity" static="true">
      <variant return-type="RMatrix" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="size" />
        </parameters>
      </variant>
    </function>
    <function name="createRotation" static="true">
      <variant return-type="RMatrix" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="angle" />
        </parameters>
      </variant>
    </function>
    <function name="create2x2" static="true">
      <variant return-type="RMatrix" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a11" />
          <parameter const="false" type="double" modifier="" name="a12" />
          <parameter const="false" type="double" modifier="" name="a21" />
          <parameter const="false" type="double" modifier="" name="a22" />
        </parameters>
      </variant>
    </function>
    <function name="create3x3" static="true">
      <variant return-type="RMatrix" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a11" />
          <parameter const="false" type="double" modifier="" name="a12" />
          <parameter const="false" type="double" modifier="" name="a13" />
          <parameter const="false" type="double" modifier="" name="a21" />
          <parameter const="false" type="double" modifier="" name="a22" />
          <parameter const="false" type="double" modifier="" name="a23" />
          <parameter const="false" type="double" modifier="" name="a31" />
          <parameter const="false" type="double" modifier="" name="a32" />
          <parameter const="false" type="double" modifier="" name="a33" />
        </parameters>
      </variant>
    </function>
    <function name="create3x1" static="true">
      <variant return-type="RMatrix" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a11" />
          <parameter const="false" type="double" modifier="" name="a21" />
          <parameter const="false" type="double" modifier="" name="a31" />
        </parameters>
      </variant>
    </function>
    <function name="create2x3" static="true">
      <variant return-type="RMatrix" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a11" />
          <parameter const="false" type="double" modifier="" name="a12" />
          <parameter const="false" type="double" modifier="" name="a13" />
          <parameter const="false" type="double" modifier="" name="a21" />
          <parameter const="false" type="double" modifier="" name="a22" />
          <parameter const="false" type="double" modifier="" name="a23" />
        </parameters>
      </variant>
    </function>
    <function name="operator_assign" call="operator=">
      <variant return-type="RMatrix&amp;" access="public">
        <parameters>
          <parameter const="true" type="RMatrix" modifier="&amp;" name="other" />
        </parameters>
      </variant>
    </function>
    <function name="operator_equal" call="operator==">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RMatrix" modifier="&amp;" name="other" />
        </parameters>
      </variant>
    </function>
    <function name="operator_multiply" call="operator*">
      <variant return-type="RMatrix" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="operator_multiply_assign" call="operator*=">
      <variant return-type="RMatrix" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="f" />
        </parameters>
      </variant>
    </function>
    <function name="operator_multiply" call="operator*">
      <variant return-type="RMatrix" const="true" access="public">
        <parameters>
          <parameter const="true" type="RMatrix" modifier="&amp;" name="other" />
        </parameters>
      </variant>
    </function>
    <function name="multiplyWith">
      <variant return-type="RMatrix" const="true" access="public">
        <parameters>
          <parameter const="true" type="RMatrix" modifier="&amp;" name="w" />
        </parameters>
      </variant>
      <variant return-type="RMatrix" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="w" />
        </parameters>
      </variant>
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="w" />
        </parameters>
      </variant>
    </function>
    <function name="init">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="r" />
          <parameter const="false" type="int" modifier="" name="c" />
        </parameters>
      </variant>
    </function>
    <function name="reset">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clear">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="set3x3">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a11" />
          <parameter const="false" type="double" modifier="" name="a12" />
          <parameter const="false" type="double" modifier="" name="a13" />
          <parameter const="false" type="double" modifier="" name="a21" />
          <parameter const="false" type="double" modifier="" name="a22" />
          <parameter const="false" type="double" modifier="" name="a23" />
          <parameter const="false" type="double" modifier="" name="a31" />
          <parameter const="false" type="double" modifier="" name="a32" />
          <parameter const="false" type="double" modifier="" name="a33" />
        </parameters>
      </variant>
    </function>
    <function name="set3x1">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a11" />
          <parameter const="false" type="double" modifier="" name="a21" />
          <parameter const="false" type="double" modifier="" name="a31" />
        </parameters>
      </variant>
    </function>
    <function name="set2x3">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a11" />
          <parameter const="false" type="double" modifier="" name="a12" />
          <parameter const="false" type="double" modifier="" name="a13" />
          <parameter const="false" type="double" modifier="" name="a21" />
          <parameter const="false" type="double" modifier="" name="a22" />
          <parameter const="false" type="double" modifier="" name="a23" />
        </parameters>
      </variant>
    </function>
    <function name="set">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="r" />
          <parameter const="false" type="int" modifier="" name="c" />
          <parameter const="false" type="double" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="get">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="r" />
          <parameter const="false" type="int" modifier="" name="c" />
        </parameters>
      </variant>
    </function>
    <function name="getRows">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCols">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="rref">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getInverse">
      <variant return-type="RMatrix" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTransposed">
      <variant return-type="RMatrix" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAppended">
      <variant return-type="RMatrix" const="true" access="public">
        <parameters>
          <parameter const="true" type="RMatrix" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="isRotationAndUniformScale">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getUniformScaleFactor">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRotationAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="ref" />
    <function name="multiplyRow" />
    <function name="addRow" />
    <function name="swapRows" />
    <function name="getPivotRow" />
    <function name="getPivotCol" />
  </class>
  <class name="RMdiArea" ownership="cpp">
    <super_list>
      <super name="QObject" />
      <super name="QWidget" />
      <!--
      <super name="QAbstractScrollArea" />
      -->
      <super name="QMdiArea" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QWidget" modifier="*" name="parent" default="0" />
        </parameters>
      </variant>
    </constructor>
    <function name="getAddTabButton">
      <variant return-type="QToolButton*" access="public">
        <parameters />
      </variant>
    </function>
    <function name="updateTabBar">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RMdiChildQt" modifier="*" name="child" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="updateTabBarSize">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="updateAddButtonLocation">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="closeTab">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="activateTab">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="addTabClicked" />
    <!--
    <function name="resizeEvent">
      <variant return-type="void" virtual="true" access="protected">
        <parameters>
          <parameter const="false" type="QResizeEvent" modifier="*" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="keyPressEvent" />
    -->
  </class>
  <class name="RMdiChildQt" ownership="cpp">
    <super_list>
      <super name="QObject" />
      <super name="QWidget" />
      <super name="RModifiedListener" />
      <super name="QMdiSubWindow" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QWidget" modifier="*" name="parent" default="NULL" />
        </parameters>
      </variant>
    </constructor>
    <function name="setDocumentInterface">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="di" />
        </parameters>
      </variant>
    </function>
    <function name="getDocumentInterface">
      <variant return-type="RDocumentInterface*" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDocument">
      <variant return-type="RDocument*" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLastKnownViewWithFocus">
      <variant return-type="RGraphicsViewQt*" access="public">
        <parameters />
      </variant>
    </function>
    <function name="updateModifiedListener">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RStorage" modifier="*" name="storage" />
        </parameters>
      </variant>
    </function>
    <function name="setCloseEventRejected">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCloseEventAccepted">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isCloseEventAccepted">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="closeRequested">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="RMdiChildQt" modifier="*" name="mdiChild" />
        </parameters>
      </variant>
    </function>
    <function name="closeAccepted">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="RMdiChildQt" modifier="*" name="mdiChild" />
        </parameters>
      </variant>
    </function>
    <function name="modifiedStatusChanged">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="RMdiChildQt" modifier="*" name="mdiChild" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="closeEvent" />
    -->
    <function name="sizeHint">
      <variant return-type="QSize" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="paintEvent">
      <variant return-type="void" virtual="true" access="protected">
        <parameters>
          <parameter const="false" type="QPaintEvent" modifier="*" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="mouseMoveEvent">
      <variant return-type="void" virtual="true" access="protected">
        <parameters>
          <parameter const="false" type="QMouseEvent" modifier="*" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="resizeEvent">
      <variant return-type="void" virtual="true" access="protected">
        <parameters>
          <parameter const="false" type="QResizeEvent" modifier="*" name="event" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RMemoryStorage" ownership="cpp">
    <super_list>
      <super name="RStorage" />
    </super_list>
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="clear">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCurrentBlock">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
    </function>
    <function name="beginTransaction">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="commitTransaction">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="rollbackTransaction">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryAllObjects">
      <variant return-type="QSet&lt;RObject::Id&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="querySelectedLayers">
      <variant return-type="QSet&lt;RObject::Id&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryAllVisibleEntities">
      <variant return-type="QSet&lt;REntity::Id&gt;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryAllEntities">
      <variant return-type="QSet&lt;REntity::Id&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="undone" default="false" />
          <parameter const="false" type="bool" modifier="" name="allBlocks" default="false" />
          <parameter const="false" type="RS::EntityType" modifier="" name="type" default="RS::EntityAll" />
        </parameters>
      </variant>
      <variant return-type="QSet&lt;REntity::Id&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="undone" />
          <parameter const="false" type="bool" modifier="" name="allBlocks" />
          <parameter const="false" type="QList&lt;RS::EntityType&gt;" modifier="" name="types" />
        </parameters>
      </variant>
    </function>
    <function name="queryWorkingSetEntities">
      <variant return-type="QSet&lt;REntity::Id&gt;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryAllUcs">
      <variant return-type="QSet&lt;RUcs::Id&gt;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryAllLayers">
      <variant return-type="QSet&lt;RLayer::Id&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="undone" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="queryAllLayerStates">
      <variant return-type="QSet&lt;RLayerState::Id&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="undone" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="queryAllBlocks">
      <variant return-type="QSet&lt;RBlock::Id&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="undone" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="queryAllLayoutBlocks">
      <variant return-type="QSet&lt;RBlock::Id&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="includeModelSpace" default="false" />
          <parameter const="false" type="bool" modifier="" name="undone" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="queryAllLayouts">
      <variant return-type="QSet&lt;RBlock::Id&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="undone" />
        </parameters>
      </variant>
    </function>
    <function name="queryAllViews">
      <variant return-type="QSet&lt;RView::Id&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="undone" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="queryAllLinetypes">
      <variant return-type="QSet&lt;RLinetype::Id&gt;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryInfiniteEntities">
      <variant return-type="QSet&lt;REntity::Id&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="querySelectedEntities">
      <variant return-type="QSet&lt;REntity::Id&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryLayerEntities">
      <variant return-type="QSet&lt;REntity::Id&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
          <parameter const="false" type="bool" modifier="" name="allBlocks" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="querySelectedLayerEntities">
      <variant return-type="QSet&lt;REntity::Id&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
          <parameter const="false" type="bool" modifier="" name="allBlocks" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="hasBlockEntities">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
    </function>
    <function name="queryBlockEntities">
      <variant return-type="QSet&lt;REntity::Id&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
    </function>
    <function name="queryLayerBlockEntities">
      <variant return-type="QSet&lt;REntity::Id&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
    </function>
    <function name="queryChildEntities">
      <variant return-type="QSet&lt;REntity::Id&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="parentId" />
          <parameter const="false" type="RS::EntityType" modifier="" name="type" default="RS::EntityAll" />
        </parameters>
      </variant>
    </function>
    <function name="hasChildEntities">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="parentId" />
        </parameters>
      </variant>
    </function>
    <function name="queryBlockReferences">
      <variant return-type="QSet&lt;REntity::Id&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
    </function>
    <function name="queryAllBlockReferences">
      <variant return-type="QSet&lt;REntity::Id&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryAllViewports">
      <variant return-type="QSet&lt;REntity::Id&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryDocumentVariables">
      <variant return-type="QSharedPointer&lt;RDocumentVariables&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryDocumentVariablesDirect">
      <variant return-type="QSharedPointer&lt;RDocumentVariables&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryDimStyle">
      <variant return-type="QSharedPointer&lt;RDimStyle&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryDimStyleDirect">
      <variant return-type="QSharedPointer&lt;RDimStyle&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryObject">
      <variant return-type="QSharedPointer&lt;RObject&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RObject::Id" modifier="" name="objectId" />
        </parameters>
      </variant>
    </function>
    <function name="queryObjectByHandle">
      <variant return-type="QSharedPointer&lt;RObject&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RObject::Handle" modifier="" name="objectHandle" />
        </parameters>
      </variant>
    </function>
    <function name="queryObjectByHandleDirect">
      <variant return-type="QSharedPointer&lt;RObject&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RObject::Handle" modifier="" name="objectHandle" />
        </parameters>
      </variant>
    </function>
    <function name="queryEntity">
      <variant return-type="QSharedPointer&lt;REntity&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="objectId" />
        </parameters>
      </variant>
    </function>
    <function name="queryLayer">
      <variant return-type="QSharedPointer&lt;RLayer&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
        </parameters>
      </variant>
      <variant return-type="QSharedPointer&lt;RLayer&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layerName" />
        </parameters>
      </variant>
    </function>
    <function name="queryLayerState">
      <variant return-type="QSharedPointer&lt;RLayerState&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayerState::Id" modifier="" name="layerStateId" />
        </parameters>
      </variant>
      <variant return-type="QSharedPointer&lt;RLayerState&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layerStateName" />
        </parameters>
      </variant>
    </function>
    <function name="queryLayout">
      <variant return-type="QSharedPointer&lt;RLayout&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayout::Id" modifier="" name="layoutId" />
        </parameters>
      </variant>
      <variant return-type="QSharedPointer&lt;RLayout&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layoutName" />
        </parameters>
      </variant>
    </function>
    <function name="queryBlock">
      <variant return-type="QSharedPointer&lt;RBlock&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
      <variant return-type="QSharedPointer&lt;RBlock&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="blockName" />
        </parameters>
      </variant>
    </function>
    <function name="queryBlockDirect">
      <variant return-type="QSharedPointer&lt;RBlock&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="blockName" />
        </parameters>
      </variant>
      <variant return-type="QSharedPointer&lt;RBlock&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
    </function>
    <function name="queryView">
      <variant return-type="QSharedPointer&lt;RView&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RView::Id" modifier="" name="viewId" />
        </parameters>
      </variant>
      <variant return-type="QSharedPointer&lt;RView&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="viewName" />
        </parameters>
      </variant>
    </function>
    <function name="queryUcs">
      <variant return-type="QSharedPointer&lt;RUcs&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RUcs::Id" modifier="" name="ucsId" />
        </parameters>
      </variant>
      <variant return-type="QSharedPointer&lt;RUcs&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="ucsName" />
        </parameters>
      </variant>
    </function>
    <function name="queryLinetypeDirect">
      <variant return-type="QSharedPointer&lt;RLinetype&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLinetype::Id" modifier="" name="linetypeId" />
        </parameters>
      </variant>
    </function>
    <function name="queryLinetype">
      <variant return-type="QSharedPointer&lt;RLinetype&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLinetype::Id" modifier="" name="linetypeId" />
        </parameters>
      </variant>
      <variant return-type="QSharedPointer&lt;RLinetype&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="linetypeName" />
        </parameters>
      </variant>
    </function>
    <function name="clearVisibleCache">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="updateVisibleCache">
      <variant return-type="void" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clearSelectionCache">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="updateSelectedEntityMap">
      <variant return-type="void" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="updateSelectedLayerMap">
      <variant return-type="void" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="countSelectedEntities">
      <variant return-type="int" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clearEntitySelection">
      <variant return-type="void" virtual="true" access="public">
        <!--
        <parameters>
          <parameter const="false" type="QSet&lt;REntity::Id&gt;" modifier="*" name="affectedEntities"
          default="NULL" />
        </parameters>
        -->
      </variant>
    </function>
    <function name="selectAllEntities">
      <variant return-type="void" virtual="true" access="public">
        <!--
        <parameters>
          <parameter const="false" type="QSet&lt;REntity::Id&gt;" modifier="*" name="affectedEntities"
          default="NULL" />
        </parameters>
        -->
      </variant>
    </function>
    <function name="selectEntity">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
          <parameter const="false" type="bool" modifier="" name="add" default="false" />
          <!--
          <parameter const="false" type="QSet&lt;REntity::Id&gt;" modifier="*" name="affectedEntities"
          default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="deselectEntity">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
          <!--
          <parameter const="false" type="QSet&lt;REntity::Id&gt;" modifier="*" name="affectedEntities"
          default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="selectEntities">
      <variant return-type="int" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QSet&lt;REntity::Id&gt;" modifier="&amp;" name="entityIds" />
          <parameter const="false" type="bool" modifier="" name="add" default="false" />
          <!--
          <parameter const="false" type="QSet&lt;REntity::Id&gt;" modifier="*" name="affectedEntities"
          default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="deselectEntities">
      <variant return-type="int" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QSet&lt;REntity::Id&gt;" modifier="&amp;" name="entityIds" />
          <!--
          <parameter const="false" type="QSet&lt;REntity::Id&gt;" modifier="*" name="affectedEntities"
          default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="setEntitySelected">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;REntity&gt;" modifier="" name="entity" />
          <parameter const="false" type="bool" modifier="" name="on" />
          <!--
          <parameter const="false" type="QSet&lt;REntity::Id&gt;" modifier="*" name="affectedEntities"
          default="NULL" />
          <parameter const="false" type="bool" modifier="" name="onlyDescend" default="false" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="isSelected">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
        </parameters>
      </variant>
    </function>
    <function name="isSelectedWorkingSet">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
        </parameters>
      </variant>
    </function>
    <function name="isEntityVisible">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="REntity" modifier="&amp;" name="entity" />
        </parameters>
      </variant>
    </function>
    <function name="hasSelection">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="ignoreHiddenLayers" default="true" />
          <parameter const="false" type="bool" modifier="" name="ignoreEmpty" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getSelectionBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEntitiesBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="QSet&lt;REntity::Id&gt;" modifier="&amp;" name="ids" />
        </parameters>
      </variant>
    </function>
    <function name="removeObject">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;RObject&gt;" modifier="" name="object" />
        </parameters>
      </variant>
    </function>
    <function name="saveObject">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;RObject&gt;" modifier="" name="object" />
          <parameter const="false" type="bool" modifier="" name="checkBlockRecursion" default="true" />
          <parameter const="false" type="bool" modifier="" name="keepHandles" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="checkRecursion">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
          <parameter const="false" type="RBlock::Id" modifier="" name="potentialChildBlockId" />
        </parameters>
      </variant>
    </function>
    <function name="deleteObject">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RObject::Id" modifier="" name="objectId" />
        </parameters>
      </variant>
    </function>
    <function name="saveTransaction">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RTransaction" modifier="&amp;" name="transaction" />
        </parameters>
      </variant>
    </function>
    <function name="deleteTransactionsFrom">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="transactionId" />
        </parameters>
      </variant>
    </function>
    <function name="getTransaction">
      <variant return-type="RTransaction" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="transactionId" />
        </parameters>
      </variant>
    </function>
    <function name="resetTransactionStack">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="toggleUndoStatus">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="QSet&lt;RObject::Id&gt;" modifier="&amp;" name="objects" />
        </parameters>
      </variant>
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RObject::Id" modifier="" name="object" />
        </parameters>
      </variant>
    </function>
    <function name="setUndoStatus">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RObject::Id" modifier="" name="objectId" />
          <parameter const="false" type="bool" modifier="" name="status" />
        </parameters>
      </variant>
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RObject" modifier="&amp;" name="object" />
          <parameter const="false" type="bool" modifier="" name="status" />
        </parameters>
      </variant>
    </function>
    <function name="getMaxTransactionId">
      <variant return-type="int" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getVariables">
      <variant return-type="QStringList" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setVariable">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="bool" modifier="" name="overwrite" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getVariable">
      <variant return-type="QVariant" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="removeVariable">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="setKnownVariable">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getKnownVariable">
      <variant return-type="QVariant" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="getLayerName">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
        </parameters>
      </variant>
    </function>
    <function name="getLayerNames">
      <variant return-type="QSet&lt;QString&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="rxStr" default="RDEFAULT_QSTRING" />
        </parameters>
      </variant>
    </function>
    <function name="getLayerId">
      <variant return-type="RLayer::Id" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layerName" />
        </parameters>
      </variant>
    </function>
    <function name="getLayerStateName">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayerState::Id" modifier="" name="layerStateId" />
        </parameters>
      </variant>
    </function>
    <function name="getLayerStateNames">
      <variant return-type="QSet&lt;QString&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="rxStr" default="RDEFAULT_QSTRING" />
        </parameters>
      </variant>
    </function>
    <function name="getLayerStateId">
      <variant return-type="RLayerState::Id" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layerStateName" />
        </parameters>
      </variant>
    </function>
    <function name="getLayoutName">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayout::Id" modifier="" name="layoutId" />
        </parameters>
      </variant>
    </function>
    <function name="getLayoutNames">
      <variant return-type="QSet&lt;QString&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="rxStr" default="RDEFAULT_QSTRING" />
        </parameters>
      </variant>
    </function>
    <function name="getLayoutId">
      <variant return-type="RLayout::Id" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layoutName" />
        </parameters>
      </variant>
    </function>
    <function name="getBlockName">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
    </function>
    <function name="getBlockNameFromHandle">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Handle" modifier="" name="blockHandle" />
        </parameters>
      </variant>
    </function>
    <function name="getBlockNameFromLayout">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layoutName" />
        </parameters>
      </variant>
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayout::Id" modifier="" name="layoutId" />
        </parameters>
      </variant>
    </function>
    <function name="getBlockNames">
      <variant return-type="QSet&lt;QString&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="rxStr" default="RDEFAULT_QSTRING" />
        </parameters>
      </variant>
    </function>
    <function name="getBlockId">
      <variant return-type="RBlock::Id" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="blockName" />
        </parameters>
      </variant>
    </function>
    <function name="getBlockIdAuto">
      <variant return-type="RBlock::Id" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="blockLayoutName" />
        </parameters>
      </variant>
    </function>
    <function name="getViewName">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RView::Id" modifier="" name="viewId" />
        </parameters>
      </variant>
    </function>
    <function name="getViewNames">
      <variant return-type="QSet&lt;QString&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getViewId">
      <variant return-type="RView::Id" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="viewName" />
        </parameters>
      </variant>
    </function>
    <function name="getLinetypeName">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLinetype::Id" modifier="" name="linetypeId" />
        </parameters>
      </variant>
    </function>
    <function name="getLinetypeDescription">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLinetype::Id" modifier="" name="linetypeId" />
        </parameters>
      </variant>
    </function>
    <function name="getLinetypeLabel">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLinetype::Id" modifier="" name="linetypeId" />
        </parameters>
      </variant>
    </function>
    <function name="getLinetypeNames">
      <variant return-type="QSet&lt;QString&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLinetypePatterns">
      <variant return-type="QList&lt;RLinetypePattern&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLinetypeId">
      <variant return-type="RLinetype::Id" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="linetypeName" />
        </parameters>
      </variant>
    </function>
    <function name="queryObjectDirect">
      <variant return-type="QSharedPointer&lt;RObject&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RObject::Id" modifier="" name="objectId" />
        </parameters>
      </variant>
    </function>
    <function name="queryObjectCC">
      <variant return-type="RObject*" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RObject::Id" modifier="" name="objectId" />
        </parameters>
      </variant>
    </function>
    <function name="queryEntityDirect">
      <variant return-type="QSharedPointer&lt;REntity&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="objectId" />
        </parameters>
      </variant>
    </function>
    <function name="queryVisibleEntityDirect">
      <variant return-type="QSharedPointer&lt;REntity&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="objectId" />
        </parameters>
      </variant>
    </function>
    <function name="queryUcsDirect">
      <variant return-type="QSharedPointer&lt;RUcs&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RUcs::Id" modifier="" name="ucsId" />
        </parameters>
      </variant>
    </function>
    <function name="queryLayerDirect">
      <variant return-type="QSharedPointer&lt;RLayer&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
        </parameters>
      </variant>
    </function>
    <function name="queryLayerStateDirect">
      <variant return-type="QSharedPointer&lt;RLayerState&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayerState::Id" modifier="" name="layerStateId" />
        </parameters>
      </variant>
    </function>
    <function name="queryLayoutDirect">
      <variant return-type="QSharedPointer&lt;RLayout&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayout::Id" modifier="" name="layoutId" />
        </parameters>
      </variant>
    </function>
    <function name="setObjectHandle">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RObject" modifier="&amp;" name="object" />
          <parameter const="false" type="RObject::Handle" modifier="" name="objectHandle" />
        </parameters>
      </variant>
    </function>
    <function name="getNewObjectHandle">
      <variant return-type="RObject::Handle" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLastTransactionId">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="transactionId" />
        </parameters>
      </variant>
    </function>
    <function name="getMaxLineweight">
      <variant return-type="RLineweight::Lineweight" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="update">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setEntityParentId">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="REntity" modifier="&amp;" name="entity" />
          <parameter const="false" type="REntity::Id" modifier="" name="parentId" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RMessageHandler" ownership="cpp">
    <function name="handleUserMessage">
      <variant return-type="void" virtual="true" pure-virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="message" />
          <parameter const="false" type="bool" modifier="" name="escape" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="handleUserInfo">
      <variant return-type="void" virtual="true" pure-virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="message" />
          <parameter const="false" type="bool" modifier="" name="escape" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="handleUserWarning">
      <variant return-type="void" virtual="true" pure-virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="message" />
          <parameter const="false" type="bool" modifier="" name="messageBox" default="false" />
          <parameter const="false" type="bool" modifier="" name="escape" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="handleUserCommand">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="message" />
          <parameter const="false" type="bool" modifier="" name="escape" default="true" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RMixedOperation" ownership="cpp">
    <super_list>
      <super name="ROperation" />
    </super_list>
    <enum name="Mode">
      <key>NoMode</key>
      <key>UseCurrentAttributes</key>
      <key>Delete</key>
      <key>ForceNew</key>
      <key>EndCycle</key>
    </enum>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="bool" modifier="" name="undoable" default="true" />
        </parameters>
      </variant>
    </constructor>
    <function name="addObject">
      <variant return-type="QSharedPointer&lt;RObject&gt;" access="public">
        <parameters>
          <parameter const="true" type="QSharedPointer&lt;RObject&gt;" modifier="&amp;" name="obj" />
          <parameter const="false" type="bool" modifier="" name="useCurrentAttributes" default="true" />
          <parameter const="false" type="bool" modifier="" name="forceNew" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="deleteObject">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QSharedPointer&lt;RObject&gt;" modifier="&amp;" name="obj" />
        </parameters>
      </variant>
    </function>
    <function name="endCycle">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="apply">
      <variant return-type="RTransaction" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="&amp;" name="document" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="setMode" />
    <function name="getMode" />
  </class>
  <class name="RModifiedListener" ownership="cpp">
    <function name="updateModifiedListener">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RStorage" modifier="*" name="storage" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RModifyObjectOperation" ownership="cpp">
    <super_list>
      <super name="ROperation" />
      <super name="RAddObjectOperation" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;RObject&gt;" modifier="" name="object" />
          <parameter const="false" type="bool" modifier="" name="undoable" default="true" />
        </parameters>
      </variant>
    </constructor>
  </class>
  <class name="RModifyObjectsOperation" ownership="cpp">
    <super_list>
      <super name="ROperation" />
      <super name="RAddObjectsOperation" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QList&lt;QSharedPointer&lt;RObject&gt;&gt;" modifier="&amp;" name="list" />
          <parameter const="false" type="bool" modifier="" name="undoable" default="true" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="false" type="bool" modifier="" name="undoable" default="true" />
        </parameters>
      </variant>
    </constructor>
    <function name="transformSelection">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RTransformation" modifier="*" name="transformation" />
          <parameter const="false" type="RDocumentInterface" modifier="*" name="di" />
          <parameter const="false" type="int" modifier="" name="copies" />
          <parameter const="false" type="bool" modifier="" name="preview" />
          <parameter const="false" type="bool" modifier="" name="selectResult" />
          <parameter const="false" type="bool" modifier="" name="useCurrentAttributes" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RMouseCoordinateListener" ownership="cpp">
    <function name="setCoordinate">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="wcsPosition" />
          <parameter const="true" type="RVector" modifier="&amp;" name="ucsPosition" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RMouseEvent" ownership="cpp">
    <super_list>
      <super name="QEvent" />
      <super name="QInputEvent" />
      <super name="QPointerEvent" />
      <super name="QSinglePointEvent" />
      <super name="QMouseEvent" />
      <super name="RInputEvent" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QEvent::Type" modifier="" name="type" />
          <parameter const="true" type="RVector" modifier="&amp;" name="position" />
          <parameter const="false" type="Qt::MouseButton" modifier="" name="button" />
          <parameter const="false" type="Qt::MouseButtons" modifier="" name="buttons" />
          <parameter const="false" type="Qt::KeyboardModifiers" modifier="" name="modifiers" />
          <parameter const="false" type="RGraphicsScene" modifier="&amp;" name="s" />
          <parameter const="false" type="RGraphicsView" modifier="&amp;" name="v" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="QMouseEvent" modifier="&amp;" name="mouseEvent" />
          <parameter const="false" type="RGraphicsScene" modifier="&amp;" name="s" />
          <parameter const="false" type="RGraphicsView" modifier="&amp;" name="v" />
          <parameter const="false" type="qreal" modifier="" name="devicePixelRatio" default="1.0" />
        </parameters>
      </variant>
    </constructor>
    <function name="hasMouseMoved" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="resetOriginalMousePos" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setOriginalMousePos" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QPoint" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RMoveReferencePointOperation" ownership="cpp">
    <super_list>
      <super name="ROperation" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="targetPoint" />
          <parameter const="false" type="Qt::KeyboardModifiers" modifier="" name="modifiers" />
        </parameters>
      </variant>
    </constructor>
    <function name="apply">
      <variant return-type="RTransaction" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="&amp;" name="document" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="setGraphicsScene">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RGraphicsScene" modifier="*" name="s" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RMoveSelectionOperation" ownership="cpp">
    <super_list>
      <super name="ROperation" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="targetPoint" />
        </parameters>
      </variant>
    </constructor>
    <function name="apply">
      <variant return-type="RTransaction" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="&amp;" name="document" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RNewDocumentListener" ownership="cpp">
    <function name="updateNewDocumentListener">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" />
          <parameter const="false" type="bool" modifier="" name="beforeLoad" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RObject" ownership="cpp" sharedpointer="true">
    <!--
    <constant name="INVALID_ID" type="RObject::Id" value="RObject::INVALID_ID" />
    -->
    <property static="true" type="RObject::Id" name="INVALID_ID" />
    <property static="true" type="RObject::Handle" name="INVALID_HANDLE" />
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyProtected" />
    <property static="true" type="RPropertyTypeId" name="PropertyWorkingSet" />
    <property static="true" type="RPropertyTypeId" name="PropertySelected" />
    <property static="true" type="RPropertyTypeId" name="PropertyInvisible" />
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RObject*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="mustAlwaysClone">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDocument">
      <variant return-type="RDocument*" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDocument">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
        </parameters>
      </variant>
    </function>
    <function name="setFlag">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="flag" />
          <parameter const="false" type="bool" modifier="" name="on" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getFlag">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="flag" />
        </parameters>
      </variant>
    </function>
    <function name="getId">
      <variant return-type="RObject::Id" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getHandle">
      <variant return-type="RObject::Handle" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isProtected">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setProtected">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isInvisible">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setInvisible">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isSelected">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setSelected">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isUndone">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isWorkingSet">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setWorkingSet">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getPropertyTypeIds">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyAttributes::Option" modifier="" name="option" default="RPropertyAttributes::NoOptions" />
        </parameters>
      </variant>
    </function>
    <function name="getCustomPropertyTypeIds">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="hasPropertyType">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
        </parameters>
      </variant>
    </function>
    <function name="hasCustomProperties">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasCustomProperty">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="title" />
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="getCustomProperty">
      <variant return-type="QVariant" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="title" />
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="defaultValue" default="RDEFAULT_QVARIANT" />
        </parameters>
      </variant>
    </function>
    <function name="getCustomDoubleProperty">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="title" />
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
          <parameter const="false" type="double" modifier="" name="defaultValue" />
        </parameters>
      </variant>
    </function>
    <function name="getCustomIntProperty">
      <variant return-type="int" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="title" />
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
          <parameter const="false" type="int" modifier="" name="defaultValue" />
        </parameters>
      </variant>
    </function>
    <function name="getCustomBoolProperty">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="title" />
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
          <parameter const="false" type="bool" modifier="" name="defaultValue" />
        </parameters>
      </variant>
    </function>
    <function name="setCustomProperty">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="title" />
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="setCustomProperties">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RQMapQStringQString" modifier="&amp;" name="properties" />
        </parameters>
      </variant>
    </function>
    -->
    <function name="removeCustomProperty">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="title" />
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="getCustomPropertyTitles">
      <variant return-type="QStringList" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCustomPropertyKeys">
      <variant return-type="QStringList" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="title" />
        </parameters>
      </variant>
    </function>
    <function name="copyCustomPropertiesFrom">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RObject" modifier="*" name="other" />
          <parameter const="true" type="QString" modifier="&amp;" name="title" default="RDEFAULT_QSTRING" />
          <parameter const="false" type="bool" modifier="" name="overwrite" default="false" />
          <parameter const="true" type="QStringList" modifier="&amp;" name="ignoreList" default="RDEFAULT_QSTRINGLIST" />
          <parameter const="true" type="QString" modifier="&amp;" name="mapKeyFrom" default="RDEFAULT_QSTRING" />
          <parameter const="true" type="QString" modifier="&amp;" name="mapKeyTo" default="RDEFAULT_QSTRING" />
        </parameters>
      </variant>
    </function>
    <function name="setCustomPropertyAttributes" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="title" />
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
          <parameter const="true" type="RPropertyAttributes" modifier="&amp;" name="att" />
        </parameters>
      </variant>
    </function>
    <function name="getCustomPropertyAttributes" static="true">
      <variant return-type="RPropertyAttributes" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="title" />
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="getCustomProperties">
      <variant return-type="QMap&lt;QString,QVariantMap&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    -->
    <function name="getComplexity">
      <variant return-type="int" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setAutoUpdatesBlocked">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="dump">
      <variant return-type="void" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="validate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="print" />
    <function name="setUndone" />
    <function name="setId" />
    <function name="setHandle" />
    <function name="setMember" static="true" />
    <function name="setMemberFlag" />
    <function name="setMemberX" static="true" />
    <function name="setMemberY" static="true" />
    <function name="setMemberZ" static="true" />
    <function name="setMemberVector" static="true" />
  </class>
  <class name="ROperation" ownership="cpp">
    <!--
    <super_list>
      <super name="RRequireHeap" />
      <super name="RNonCopyable" />
    </super_list>
    -->
    <function name="apply">
      <variant return-type="RTransaction" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="&amp;" name="document" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getEntityTypeFilter">
      <variant return-type="RS::EntityType" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setRecordAffectedObjects">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="setSpatialIndexDisabled">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="setAllowInvisible">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="setAllowAll">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="setKeepChildren">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="setTransactionGroup">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="g" />
        </parameters>
      </variant>
    </function>
    <function name="getTransactionGroup">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setText">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="t" />
        </parameters>
      </variant>
    </function>
    <function name="getText">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTransactionTypes">
      <variant return-type="RTransaction::Types" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setTransactionType">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RTransaction::Type" modifier="" name="t" />
          <parameter const="false" type="bool" modifier="" name="on" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getTransactionType">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="RTransaction::Type" modifier="" name="t" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="ROperationUtils">
    <function name="normalizeDrawOrder" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="di" />
          <parameter const="false" type="bool" modifier="" name="useTransactionGroup" default="false" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="ROrthoGrid" ownership="cpp">
    <super_list>
      <super name="RGrid" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RGraphicsView" modifier="&amp;" name="view" />
        </parameters>
      </variant>
    </constructor>
    <function name="clearCache">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="snapToGrid">
      <variant return-type="RVector" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="positionUcs" />
        </parameters>
      </variant>
    </function>
    <function name="update">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="force" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="paint">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="paintMetaGrid">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="paintGridLines">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="space" />
          <parameter const="true" type="RBox" modifier="&amp;" name="box" />
          <parameter const="false" type="bool" modifier="" name="meta" />
        </parameters>
      </variant>
    </function>
    <function name="paintGridPoints">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="space" />
          <parameter const="true" type="RBox" modifier="&amp;" name="box" />
        </parameters>
      </variant>
    </function>
    <function name="paintCursor">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="pos" />
        </parameters>
      </variant>
    </function>
    <function name="paintRuler">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RRuler" modifier="&amp;" name="ruler" />
          <parameter const="false" type="qreal" modifier="" name="devicePixelRatio" default="1.0" />
        </parameters>
      </variant>
    </function>
    <function name="getInfoText">
      <variant return-type="QString" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getIdealSpacing">
      <variant return-type="QList&lt;RVector&gt;" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="minPixelSpacing" />
          <parameter const="true" type="RVector" modifier="&amp;" name="minSpacing" />
          <parameter const="true" type="RVector" modifier="&amp;" name="minMetaSpacing" />
        </parameters>
      </variant>
    </function>
    <function name="isIsometric">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setIsometric">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getProjection">
      <variant return-type="RS::IsoProjectionType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setProjection">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::IsoProjectionType" modifier="" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getIdealGridSpacing" static="true">
      <variant return-type="QList&lt;RVector&gt;" static="true" access="public">
        <parameters>
          <parameter const="false" type="RGraphicsView" modifier="&amp;" name="view" />
          <parameter const="false" type="int" modifier="" name="minPixelSpacing" />
          <parameter const="true" type="RVector" modifier="&amp;" name="minSpacing" />
          <parameter const="true" type="RVector" modifier="&amp;" name="minMetaSpacing" />
        </parameters>
      </variant>
    </function>
    <function name="isFractionalFormat" static="true">
      <variant return-type="bool" static="true" access="public">
        <parameters>
          <parameter const="false" type="RS::LinearFormat" modifier="" name="linearFormat" />
        </parameters>
      </variant>
    </function>
    <function name="inchAutoscale" static="true" />
  </class>
  <class name="RPainterPath">
    <super_list>
      <super name="QPainterPath" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="QPainterPath" modifier="&amp;" name="path" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RPainterPath" modifier="&amp;" name="other" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="setPath">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QPainterPath" modifier="&amp;" name="path" />
        </parameters>
      </variant>
    </function>
    <function name="getShapes">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCurrentPosition">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isAtPosition">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="moveTo">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="qreal" modifier="" name="x" />
          <parameter const="false" type="qreal" modifier="" name="y" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QPointF" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="moveToOrNop">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="lineTo">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="qreal" modifier="" name="x" />
          <parameter const="false" type="qreal" modifier="" name="y" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QPointF" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="quadTo">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="qreal" modifier="" name="ctrlPtx" />
          <parameter const="false" type="qreal" modifier="" name="ctrlPty" />
          <parameter const="false" type="qreal" modifier="" name="endPtx" />
          <parameter const="false" type="qreal" modifier="" name="endPty" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="cp" />
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="cubicTo">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="qreal" modifier="" name="ctrlPt1x" />
          <parameter const="false" type="qreal" modifier="" name="ctrlPt1y" />
          <parameter const="false" type="qreal" modifier="" name="ctrlPt2x" />
          <parameter const="false" type="qreal" modifier="" name="ctrlPt2y" />
          <parameter const="false" type="qreal" modifier="" name="endPtx" />
          <parameter const="false" type="qreal" modifier="" name="endPty" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="cp1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="cp2" />
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="closeSubpath">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="containsPoint">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="addPolyline">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="pl" />
        </parameters>
      </variant>
    </function>
    <function name="addPath">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RPainterPath" modifier="&amp;" name="path" />
        </parameters>
      </variant>
    </function>
    <function name="appendPath">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RPainterPath" modifier="&amp;" name="path" />
        </parameters>
      </variant>
    </function>
    <function name="addLine">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="line" />
        </parameters>
      </variant>
    </function>
    <function name="addArc">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RArc" modifier="&amp;" name="arc" />
        </parameters>
      </variant>
    </function>
    <function name="addSpline">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RSpline" modifier="&amp;" name="spline" />
        </parameters>
      </variant>
    </function>
    <function name="addRect">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="x1" />
          <parameter const="false" type="double" modifier="" name="y1" />
          <parameter const="false" type="double" modifier="" name="x2" />
          <parameter const="false" type="double" modifier="" name="y2" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QRectF" modifier="&amp;" name="rect" />
        </parameters>
      </variant>
    </function>
    <function name="addBox">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="box" />
        </parameters>
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStartPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setValid">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isSane">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getZLevel">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setZLevel">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="zl" />
        </parameters>
      </variant>
    </function>
    <function name="getPen">
      <variant return-type="QPen" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPen">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QPen" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getBrush">
      <variant return-type="QBrush" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setBrush">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QBrush" modifier="&amp;" name="b" />
        </parameters>
      </variant>
    </function>
    <function name="setMode">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RPainterPath::Mode" modifier="" name="mode" />
          <parameter const="false" type="bool" modifier="" name="on" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getMode">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="RPainterPath::Mode" modifier="" name="mode" />
        </parameters>
      </variant>
    </function>
    <function name="setHighlighted">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isHighlighted">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setSelected">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isSelected">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setFixedPenColor">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isFixedPenColor">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setFixedBrushColor">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isFixedBrushColor">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setAutoRegen">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getAutoRegen">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setAlwaysRegen">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getAlwaysRegen">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setInheritPen">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getInheritPen">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPixelUnit">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getPixelUnit">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setNoClipping">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getNoClipping">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setNoColorMode">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getNoColorMode">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setSimplePointDisplay">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getSimplePointDisplay">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPolylineGen">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getPolylineGen">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setNoPattern">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getNoPattern">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setScreenBasedLinetype">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getScreenBasedLinetype">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPixelWidth">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getPixelWidth">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setFeatureSize">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="getFeatureSize">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPixelSizeHint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="getPixelSizeHint">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDistanceTo">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="addPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="position" />
        </parameters>
      </variant>
    </function>
    <function name="hasPoints">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPoints">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getPoints">
      <variant return-type="QList&lt;RVector&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="transform">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QTransform" modifier="&amp;" name="t" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="angle" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="fx" />
          <parameter const="false" type="double" modifier="" name="fy" />
        </parameters>
      </variant>
    </function>
    <function name="getElementCount">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getXAt">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="getYAt">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="getTypeAt">
      <variant return-type="QPainterPath::ElementType" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="isEmpty">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="addShape">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;RShape&gt;" modifier="" name="shape" />
        </parameters>
      </variant>
    </function>
    <function name="addOriginalShape">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;RShape&gt;" modifier="" name="shape" />
        </parameters>
      </variant>
    </function>
    <function name="hasOriginalShapes">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="countOriginalShapes">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getOriginalShape">
      <variant return-type="QSharedPointer&lt;RShape&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="copy">
      <variant return-type="RPainterPath" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="rotateList" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QList&lt;RPainterPath&gt;" modifier="&amp;" name="pps" />
          <parameter const="false" type="double" modifier="" name="angle" />
        </parameters>
      </variant>
    </function>
    <function name="translateList" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QList&lt;RPainterPath&gt;" modifier="&amp;" name="pps" />
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="scaleList" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QList&lt;RPainterPath&gt;" modifier="&amp;" name="pps" />
          <parameter const="false" type="double" modifier="" name="fx" />
          <parameter const="false" type="double" modifier="" name="fy" />
        </parameters>
      </variant>
    </function>
    <function name="getMinList" static="true">
      <variant return-type="RVector" access="public">
        <parameters>
          <parameter const="false" type="QList&lt;RPainterPath&gt;" modifier="&amp;" name="pps" />
        </parameters>
      </variant>
    </function>
    <function name="getMaxList" static="true">
      <variant return-type="RVector" access="public">
        <parameters>
          <parameter const="false" type="QList&lt;RPainterPath&gt;" modifier="&amp;" name="pps" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RPainterPathSource" ownership="cpp"></class>
  <class name="RPaletteListener" ownership="cpp">
    <function name="updatePalette">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RPaletteListenerAdapter" ownership="cpp">
    <super_list>
      <super name="QObject" />
      <super name="RPaletteListener" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QObject" modifier="*" name="parent" default="NULL" />
        </parameters>
      </variant>
    </constructor>
    <function name="updatePalette">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="paletteChanged">
      <variant return-type="void" access="public" signal="true">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RPasteOperation" ownership="cpp">
    <super_list>
      <super name="ROperation" />
      <super name="RClipboardOperation" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="&amp;" name="sourceDocument" />
        </parameters>
      </variant>
    </constructor>
    <function name="setOffsets">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="offsets" />
        </parameters>
      </variant>
    </function>
    <function name="setRotations">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;double&gt;" modifier="&amp;" name="rotations" />
        </parameters>
      </variant>
    </function>
    <function name="setCenters">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="centers" />
        </parameters>
      </variant>
    </function>
    <function name="setOffset">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="getOffset">
      <variant return-type="RVector" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setScale">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="scale" />
        </parameters>
      </variant>
    </function>
    <function name="getScale">
      <variant return-type="double" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setRotation">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
        </parameters>
      </variant>
    </function>
    <function name="getRotation">
      <variant return-type="double" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCenter">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="centers" />
        </parameters>
      </variant>
    </function>
    <function name="getCenter">
      <variant return-type="RVector" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setFlipHorizontal">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="flipHorizontal" />
        </parameters>
      </variant>
    </function>
    <function name="getFlipHorizontal">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setFlipVertical">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="flipVertical" />
        </parameters>
      </variant>
    </function>
    <function name="getFlipVertical">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setToCurrentLayer">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="toCurrentLayer" />
        </parameters>
      </variant>
    </function>
    <function name="getToCurrentLayer">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setOverwriteLayers">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="overwriteLayers" />
        </parameters>
      </variant>
    </function>
    <function name="getOverwriteLayers">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setOverwriteBlocks">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="overwriteBlocks" />
        </parameters>
      </variant>
    </function>
    <function name="getOverwriteBlocks">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setBlockName">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="blockName" />
        </parameters>
      </variant>
    </function>
    <function name="getBlockName">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLayerName">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layerName" />
        </parameters>
      </variant>
    </function>
    <function name="getLayerName">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setAttribute">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="tag" />
          <parameter const="true" type="QString" modifier="&amp;" name="value" />
        </parameters>
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="name" />
          <parameter const="true" type="QString" modifier="&amp;" name="value" />
        </parameters>
      </variant>
    </function>
    <function name="setBlockProperty">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="name" />
          <parameter const="true" type="QString" modifier="&amp;" name="value" />
        </parameters>
      </variant>
    </function>
    <function name="apply">
      <variant return-type="RTransaction" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="&amp;" name="document" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getBoundary">
      <variant return-type="RPolyline" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="unitFactor" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RPattern">
    <!--
    <function name="loadAllFrom" static="true">
      <variant return-type="QList&lt;QPair&lt;QString,RPattern*&gt;&gt;" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fileName" />
        </parameters>
      </variant>
    </function>
    -->
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="name" />
          <parameter const="true" type="QString" modifier="&amp;" name="description" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="isValid">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasDots">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clear">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getFileName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getName">
      <variant return-type="const QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDescription">
      <variant return-type="const QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isLoaded">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="load">
      <variant return-type="void" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPatternLines">
      <variant return-type="QList&lt;RPatternLine&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="addPatternLine">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RPatternLine" modifier="&amp;" name="patternLine" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="f" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RPatternLine">
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getPainterPath">
      <variant return-type="RPainterPath" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasDots">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLines">
      <variant return-type="QList&lt;RLine&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="includeDashes" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getLength">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getOffset">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBasePoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDashes">
      <variant return-type="QList&lt;double&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="scale">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="f" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RPatternList">
    <!--
    <function name="init" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="metric" />
          <parameter const="false" type="RResourceList&lt;RPattern&gt;" modifier="&amp;" name="res" />
        </parameters>
      </variant>
    </function>
    -->
  </class>
  <class name="RPatternListImperial">
    <super_list>
      <super name="RPatternList" />
    </super_list>
    <function name="init" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="uninit" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getNames" static="true">
      <variant return-type="QStringList" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="get" static="true">
      <variant return-type="RPattern*" static="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="name" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RPatternListMetric">
    <super_list>
      <super name="RPatternList" />
    </super_list>
    <function name="init" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="uninit" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getNames" static="true">
      <variant return-type="QStringList" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="get" static="true">
      <variant return-type="RPattern*" static="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="name" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RPenListener" ownership="cpp">
    <function name="updatePen">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
    <function name="clearPen">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RPenListenerAdapter" ownership="cpp">
    <super_list>
      <super name="QObject" />
      <super name="RPenListener" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QObject" modifier="*" name="parent" default="NULL" />
        </parameters>
      </variant>
    </constructor>
    <function name="updatePen">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
    <function name="clearPen">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="penUpdated">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
    <function name="penCleared">
      <variant return-type="void" access="public" signal="true">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RPluginInfo">
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="set">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
        </parameters>
      </variant>
    </function>
    <function name="get">
      <variant return-type="QVariant" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="def" default="RDEFAULT_QVARIANT" />
        </parameters>
      </variant>
    </function>
    <function name="getKeys">
      <variant return-type="QStringList" const="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RPluginInterface">
    <enum name="InitStatus">
      <key>GotSplashWindow</key>
      <key>AddOnsInitialized</key>
      <key>ActionsAdded</key>
      <key>GotMainWindowBeforeShow</key>
      <key>GotMainWindow</key>
      <key>LoadedFiles</key>
      <key>ScriptsExecuted</key>
      <key>AllDone</key>
    </enum>
  </class>
  <class name="RPluginLoader">
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getPluginSuffix" static="true">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPluginFiles" static="true">
      <variant return-type="QStringList" access="public">
        <parameters />
      </variant>
    </function>
    <function name="loadPlugins" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="init" />
        </parameters>
      </variant>
    </function>
    <function name="unloadPlugins" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="loadPlugin" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QObject" modifier="*" name="plugin" />
          <parameter const="false" type="bool" modifier="" name="init" />
          <parameter const="true" type="QString" modifier="&amp;" name="fileName" default="QString()" />
          <parameter const="true" type="QString" modifier="&amp;" name="errorString" default="QString()" />
        </parameters>
      </variant>
    </function>
    <function name="unloadPlugin" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fileName" />
          <parameter const="false" type="bool" modifier="" name="remove" default="false" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QObject" modifier="*" name="plugin" />
          <parameter const="false" type="bool" modifier="" name="remove" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="postInitPlugins" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RPluginInterface::InitStatus" modifier="" name="status" />
        </parameters>
      </variant>
    </function>
    <function name="postInitPlugin" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QObject" modifier="*" name="plugin" />
          <parameter const="false" type="RPluginInterface::InitStatus" modifier="" name="status" />
        </parameters>
      </variant>
    </function>
    <!--
    <preproc plain="#if QT_VERSION&lt;0x060000" />
    <function name="initScriptExtensions" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QScriptEngine" modifier="&amp;" name="engine" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QObject" modifier="*" name="plugin" />
          <parameter const="false" type="QScriptEngine" modifier="&amp;" name="engine" />
        </parameters>
      </variant>
    </function>
    <preproc plain="#endif" />
    -->
    <function name="initTranslations" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="countPlugins" static="true">
      <variant return-type="int" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPluginInfo" static="true">
      <variant return-type="RPluginInfo" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
      <variant return-type="RPluginInfo" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="id" />
        </parameters>
      </variant>
    </function>
    <function name="getPluginsPath" static="true">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasPlugin" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="id" />
        </parameters>
      </variant>
    </function>
    <function name="checkPluginLicenses" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="checkPluginLicense" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="QObject" modifier="*" name="plugin" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RPoint" sharedpointer="true">
    <super_list>
      <super name="RShape" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="double" modifier="" name="x" />
          <parameter const="false" type="double" modifier="" name="y" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="position" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <property type="RVector" name="position" read="getPosition" write="setPosition" />
    <function name="getShapeType">
      <variant return-type="RShape::Type" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RPoint*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setZ">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="z" />
        </parameters>
      </variant>
    </function>
    <function name="getVectorProperties">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPosition">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPosition">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLength">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMiddlePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCenterPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPointsWithDistanceToEnd">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="int" modifier="" name="from" default="RS::FromAny" />
        </parameters>
      </variant>
    </function>
    <function name="getPointCloud">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="segmentLength" />
        </parameters>
      </variant>
    </function>
    <function name="getAngleAt">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="RS::From" modifier="" name="from" default="RS::FromStart" />
        </parameters>
      </variant>
    </function>
    <function name="getVectorTo">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="flipHorizontal">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="flipVertical">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTransformed">
      <variant return-type="QSharedPointer&lt;RShape&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QTransform" modifier="&amp;" name="transform" />
        </parameters>
      </variant>
    </function>
    <function name="print" />
    <preproc plain="#if QT_VERSION&gt;=0x060000" />
    <function name="copy">
      <variant return-type="RPoint" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <preproc plain="#endif" />
  </class>
  <class name="RPointData">
    <super_list>
      <super name="REntityData" />
      <super name="RPoint" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isPointType">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="setZ">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="z" />
        </parameters>
      </variant>
    </function>
    <function name="to2D">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="ignoreEmpty" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getMiddlePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getCenterPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getArcReferencePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
        </parameters>
      </variant>
    </function>
    <function name="getPointsWithDistanceToEnd">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="int" modifier="" name="from" default="RS::FromAny" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getIntersectionPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="REntityData" modifier="&amp;" name="other" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="bool" modifier="" name="same" default="false" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="true" />
          <!--
          <parameter const="false" type="QList&lt;QPair&lt;RObject::Id,RObject::Id&gt;&gt;" modifier="*" name="entityIds" default="NULL" />
          -->
        </parameters>
      </variant>
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getVectorTo">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="getDistanceTo">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="range" default="0.0" />
          <parameter const="false" type="bool" modifier="" name="draft" default="false" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="intersectsWith">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="axis1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="axis2" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="flipHorizontal">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="flipVertical">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="stretch">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="area" />
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="getPosition">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getReferencePoints">
      <variant return-type="QList&lt;RRefPoint&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="hint" default="RS::RenderTop" />
        </parameters>
      </variant>
    </function>
    <function name="moveReferencePoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="targetPoint" />
          <parameter const="false" type="Qt::KeyboardModifiers" modifier="" name="modifiers" default="Qt::NoModifier" />
        </parameters>
      </variant>
    </function>
    <function name="castToShape">
      <variant return-type="RShape*" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getShapes">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="false" />
          <parameter const="false" type="bool" modifier="" name="segment" default="false" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="entityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RPointEntity" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
      <super name="REntity" />
    </super_list>
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyProtected" />
    <property static="true" type="RPropertyTypeId" name="PropertyWorkingSet" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyLayer" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetype" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetypeScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineweight" />
    <property static="true" type="RPropertyTypeId" name="PropertyColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDisplayedColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDrawOrder" />
    <property static="true" type="RPropertyTypeId" name="PropertyPositionX" />
    <property static="true" type="RPropertyTypeId" name="PropertyPositionY" />
    <property static="true" type="RPropertyTypeId" name="PropertyPositionZ" />
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="RPointData" modifier="&amp;" name="data" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RPointEntity" modifier="&amp;" name="other" />
        </parameters>
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStaticPropertyTypeIds" static="true">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RPointEntity*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="exportEntity">
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RExporter" modifier="&amp;" name="e" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
          <parameter const="false" type="bool" modifier="" name="forceSelected" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getData">
      <variant return-type="RPointData&amp;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPosition">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="print" />
  </class>
  <class name="RPolyline" sharedpointer="true">
    <super_list>
      <super name="RShape" />
      <super name="RExplodable" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="vertices" />
          <parameter const="false" type="bool" modifier="" name="closed" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" modifier="&amp;" name="segments" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getShapeType">
      <variant return-type="RShape::Type" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RPolyline*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isDirected">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setZ">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="z" />
        </parameters>
      </variant>
    </function>
    <function name="isFlat">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getVectorProperties">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDoubleProperties">
      <variant return-type="QList&lt;double&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBoolProperties">
      <variant return-type="QList&lt;bool&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clear">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="normalize">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="prependShape">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
        </parameters>
      </variant>
    </function>
    <function name="appendShape">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
          <parameter const="false" type="bool" modifier="" name="prepend" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="appendShapeAuto">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
        </parameters>
      </variant>
    </function>
    <function name="appendShapeTrim">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
        </parameters>
      </variant>
    </function>
    <function name="closeTrim">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="appendVertex">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="x" />
          <parameter const="false" type="double" modifier="" name="y" />
          <parameter const="false" type="double" modifier="" name="bulge" default="0.0" />
          <parameter const="false" type="double" modifier="" name="w1" default="0.0" />
          <parameter const="false" type="double" modifier="" name="w2" default="0.0" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="vertex" />
          <parameter const="false" type="double" modifier="" name="bulge" default="0.0" />
          <parameter const="false" type="double" modifier="" name="w1" default="0.0" />
          <parameter const="false" type="double" modifier="" name="w2" default="0.0" />
        </parameters>
      </variant>
    </function>
    <function name="prependVertex">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="vertex" />
          <parameter const="false" type="double" modifier="" name="bulge" default="0.0" />
          <parameter const="false" type="double" modifier="" name="w1" default="0.0" />
          <parameter const="false" type="double" modifier="" name="w2" default="0.0" />
        </parameters>
      </variant>
    </function>
    <function name="insertVertex">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="index" />
          <parameter const="true" type="RVector" modifier="&amp;" name="vertex" />
          <parameter const="false" type="double" modifier="" name="bulgeBefore" default="0.0" />
          <parameter const="false" type="double" modifier="" name="bulgeAfter" default="0.0" />
        </parameters>
      </variant>
    </function>
    <function name="insertVertexAt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="insertVertexAtDistance">
      <variant return-type="RVector" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="dist" />
        </parameters>
      </variant>
    </function>
    <function name="removeFirstVertex">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="removeLastVertex">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="removeVertex">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="index" />
        </parameters>
      </variant>
    </function>
    <function name="removeVerticesAfter">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="index" />
        </parameters>
      </variant>
    </function>
    <function name="removeVerticesBefore">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="index" />
        </parameters>
      </variant>
    </function>
    <function name="isEmpty">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setVertices">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="vertices" />
        </parameters>
      </variant>
    </function>
    <function name="getVertices">
      <variant return-type="QList&lt;RVector&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setVertexAt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="moveVertexAt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="getVertexAt">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="getVertexIndex">
      <variant return-type="int" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="getLastVertex">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="countVertices">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setBulges">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;double&gt;" modifier="&amp;" name="b" />
        </parameters>
      </variant>
    </function>
    <function name="getBulges">
      <variant return-type="QList&lt;double&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBulgeAt">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="setBulgeAt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
          <parameter const="false" type="double" modifier="" name="b" />
        </parameters>
      </variant>
    </function>
    <function name="hasArcSegments">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getVertexAngles">
      <variant return-type="QList&lt;double&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getVertexAngle">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
          <parameter const="false" type="RS::Orientation" modifier="" name="orientation" default="RS::UnknownOrientation" />
        </parameters>
      </variant>
    </function>
    <function name="setGlobalWidth">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="w" />
        </parameters>
      </variant>
    </function>
    <function name="setStartWidthAt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
          <parameter const="false" type="double" modifier="" name="w" />
        </parameters>
      </variant>
    </function>
    <function name="getStartWidthAt">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="setEndWidthAt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
          <parameter const="false" type="double" modifier="" name="w" />
        </parameters>
      </variant>
    </function>
    <function name="getEndWidthAt">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="hasWidths">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setStartWidths">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;double&gt;" modifier="&amp;" name="sw" />
        </parameters>
      </variant>
    </function>
    <function name="getStartWidths">
      <variant return-type="QList&lt;double&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setEndWidths">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;double&gt;" modifier="&amp;" name="ew" />
        </parameters>
      </variant>
    </function>
    <function name="getEndWidths">
      <variant return-type="QList&lt;double&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setClosed">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isClosed">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isGeometricallyClosed">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="autoClose">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="toLogicallyClosed">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="toLogicallyOpen">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSelfIntersectionPoints">
      <variant return-type="QList&lt;RVector&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="getOrientation">
      <variant return-type="RS::Orientation" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="implicitelyClosed" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="setOrientation">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="RS::Orientation" modifier="" name="orientation" />
        </parameters>
      </variant>
    </function>
    <function name="convertArcToLineSegments">
      <variant return-type="RPolyline" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="segments" />
        </parameters>
      </variant>
    </function>
    <function name="convertArcToLineSegmentsLength">
      <variant return-type="RPolyline" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="segmentLength" />
        </parameters>
      </variant>
    </function>
    <function name="contains">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="borderIsInside" default="false" />
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="containsShape">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
        </parameters>
      </variant>
    </function>
    <function name="getPointInside">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStartPoint">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoint">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMiddlePoint">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="moveStartPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="pos" />
        </parameters>
      </variant>
    </function>
    <function name="moveEndPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="pos" />
        </parameters>
      </variant>
    </function>
    <function name="moveSegmentAt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="getDirection1">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection2">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSideOfPoint">
      <variant return-type="RS::Side" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getArea">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLength">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDistanceFromStart">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getDistancesFromStart">
      <variant return-type="QList&lt;double&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getLengthTo">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getSegmentsLength">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="fromIndex" />
          <parameter const="false" type="int" modifier="" name="toIndex" />
        </parameters>
      </variant>
    </function>
    <function name="getEndPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMiddlePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCenterPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPointAtPercent">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getPointsWithDistanceToEnd">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="int" modifier="" name="from" default="RS::FromAny" />
        </parameters>
      </variant>
    </function>
    <function name="getPointCloud">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="segmentLength" />
        </parameters>
      </variant>
    </function>
    <function name="getAngleAt">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="RS::From" modifier="" name="from" default="RS::FromStart" />
        </parameters>
      </variant>
    </function>
    <function name="getVectorTo">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="getDistanceTo">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="getClosestSegment">
      <variant return-type="int" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="getClosestVertex">
      <variant return-type="int" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="scaleFactor" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="reverse">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getReversed">
      <variant return-type="RPolyline" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="stretch">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="area" />
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="getTransformed">
      <variant return-type="QSharedPointer&lt;RShape&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QTransform" modifier="&amp;" name="transform" />
        </parameters>
      </variant>
    </function>
    <function name="getTrimEnd">
      <variant return-type="RS::Ending" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" />
        </parameters>
      </variant>
    </function>
    <function name="trimStartPoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="trimDist" />
        </parameters>
      </variant>
    </function>
    <function name="trimEndPoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="trimDist" />
        </parameters>
      </variant>
    </function>
    <function name="getExploded">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="segments" default="RDEFAULT_MIN1" />
        </parameters>
      </variant>
    </function>
    <function name="getOutline">
      <variant return-type="QList&lt;RPolyline&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <!--
    <function name="getLeftRightOutline">
      <variant return-type="QList&lt;QPair&lt;RPolyline,RPolyline&gt;&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    -->
    <function name="getLeftOutline">
      <variant return-type="QList&lt;RPolyline&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRightOutline">
      <variant return-type="QList&lt;RPolyline&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isInterpolated">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="countSegments">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSegmentAt">
      <variant return-type="QSharedPointer&lt;RShape&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="isArcSegmentAt">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="getLastSegment">
      <variant return-type="QSharedPointer&lt;RShape&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getFirstSegment">
      <variant return-type="QSharedPointer&lt;RShape&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isStraight" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="bulge" />
        </parameters>
      </variant>
    </function>
    <function name="toPainterPath">
      <variant return-type="RPainterPath" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="addOriginalShapes" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="simplify">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="verifyTangency">
      <variant return-type="QList&lt;RVector&gt;" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="toleranceMin" default="RS::AngleTolerance" />
          <parameter const="false" type="double" modifier="" name="toleranceMax" default="M_PI_4" />
        </parameters>
      </variant>
    </function>
    <function name="stripWidths">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setMinimumWidth">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="w" />
        </parameters>
      </variant>
    </function>
    <function name="getSegmentAtDist">
      <variant return-type="int" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="dist" />
        </parameters>
      </variant>
    </function>
    <function name="relocateStartPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="dist" />
        </parameters>
      </variant>
    </function>
    <function name="convertToClosed">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="convertToOpen">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="modifyPolylineCorner">
      <variant return-type="RPolyline" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="trimmedShape1" />
          <parameter const="false" type="RS::Ending" modifier="" name="ending1" />
          <parameter const="false" type="int" modifier="" name="segmentIndex1" />
          <parameter const="true" type="RShape" modifier="&amp;" name="trimmedShape2" />
          <parameter const="false" type="RS::Ending" modifier="" name="ending2" />
          <parameter const="false" type="int" modifier="" name="segmentIndex2" />
          <parameter const="true" type="RShape" modifier="*" name="cornerShape" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="isConcave">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getConvexVertices">
      <variant return-type="QList&lt;RVector&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="convex" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getConcaveVertices">
      <variant return-type="QList&lt;RVector&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="splitAtDiscontinuities">
      <variant return-type="QList&lt;RPolyline&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="tolerance" />
        </parameters>
      </variant>
    </function>
    <function name="splitAtSegmentTypeChange">
      <variant return-type="QList&lt;RPolyline&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBaseAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getWidth">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setWidth">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getHeight">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setHeight">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="morph">
      <variant return-type="QList&lt;RPolyline&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="target" />
          <parameter const="false" type="int" modifier="" name="steps" />
          <parameter const="false" type="RS::Easing" modifier="" name="easing" default="RS::Linear" />
          <parameter const="false" type="bool" modifier="" name="zLinear" default="true" />
          <parameter const="false" type="double" modifier="" name="customFactor" default="RNANDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="roundAllCorners">
      <variant return-type="RPolyline" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="radius" />
        </parameters>
      </variant>
    </function>
    <function name="getPolygonHull">
      <variant return-type="RPolyline" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="angle" />
          <parameter const="false" type="double" modifier="" name="tolerance" />
          <parameter const="false" type="bool" modifier="" name="inner" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="hasProxy" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <!--
    <function name="setPolylineProxy" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RPolylineProxy" modifier="*" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getPolylineProxy" static="true">
      <variant return-type="RPolylineProxy*" access="public">
        <parameters />
      </variant>
    </function>
    -->
    <function name="isLineSegment" />
    <function name="print" />
    <preproc plain="#if QT_VERSION&gt;=0x060000" />
    <function name="copy">
      <variant return-type="RPolyline" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <preproc plain="#endif" />
  </class>
  <class name="RPolylineData">
    <super_list>
      <super name="REntityData" />
      <super name="RPolyline" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="polyline" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="setZ">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="z" />
        </parameters>
      </variant>
    </function>
    <function name="to2D">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="ignoreEmpty" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getMiddlePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getCenterPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getArcReferencePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
        </parameters>
      </variant>
    </function>
    <function name="getPointsWithDistanceToEnd">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="int" modifier="" name="from" default="RS::FromAny" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getIntersectionPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="REntityData" modifier="&amp;" name="other" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="bool" modifier="" name="same" default="false" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="true" />
        </parameters>
      </variant>
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getVectorTo">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="intersectsWith">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="axis1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="axis2" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="flipHorizontal">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="flipVertical">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="stretch">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="area" />
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="getBoundingBoxes">
      <variant return-type="QList&lt;RBox&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="ignoreEmpty" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getReferencePoints">
      <variant return-type="QList&lt;RRefPoint&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="hint" default="RS::RenderTop" />
        </parameters>
      </variant>
    </function>
    <function name="moveReferencePoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="targetPoint" />
          <parameter const="false" type="Qt::KeyboardModifiers" modifier="" name="modifiers" default="Qt::NoModifier" />
        </parameters>
      </variant>
    </function>
    <function name="castToShape">
      <variant return-type="RShape*" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDistanceTo">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="range" default="0.0" />
          <parameter const="false" type="bool" modifier="" name="draft" default="false" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="getPolylineShape">
      <variant return-type="RPolyline" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clear">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="normalize">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="getVertices">
      <variant return-type="QList&lt;RVector&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getVertexAt">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="appendVertex">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="vertex" />
          <parameter const="false" type="double" modifier="" name="bulge" default="0.0" />
          <parameter const="false" type="double" modifier="" name="w1" default="0.0" />
          <parameter const="false" type="double" modifier="" name="w2" default="0.0" />
        </parameters>
      </variant>
    </function>
    <function name="prependVertex">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="vertex" />
          <parameter const="false" type="double" modifier="" name="bulge" default="0.0" />
          <parameter const="false" type="double" modifier="" name="w1" default="0.0" />
          <parameter const="false" type="double" modifier="" name="w2" default="0.0" />
        </parameters>
      </variant>
    </function>
    <function name="insertVertex">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="index" />
          <parameter const="true" type="RVector" modifier="&amp;" name="vertex" />
        </parameters>
      </variant>
    </function>
    <function name="removeLastVertex">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="removeVertex">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="index" />
        </parameters>
      </variant>
    </function>
    <function name="countSegments">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSegmentAt">
      <variant return-type="QSharedPointer&lt;RShape&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="getBulgeAt">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="setBulgeAt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
          <parameter const="false" type="double" modifier="" name="b" />
        </parameters>
      </variant>
    </function>
    <function name="getVertexAngle">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
          <parameter const="false" type="RS::Orientation" modifier="" name="orientation" default="RS::UnknownOrientation" />
        </parameters>
      </variant>
    </function>
    <function name="getDirection1">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection2">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="reverse">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStartPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="relocateStartPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="dist" />
        </parameters>
      </variant>
    </function>
    <function name="setClosed">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isClosed">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isGeometricallyClosed">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="autoClose">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="toLogicallyClosed">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="toLogicallyOpen">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getOrientation">
      <variant return-type="RS::Orientation" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="implicitelyClosed" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="setGlobalWidth">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="w" />
        </parameters>
      </variant>
    </function>
    <function name="setStartWidthAt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
          <parameter const="false" type="double" modifier="" name="w" />
        </parameters>
      </variant>
    </function>
    <function name="getStartWidthAt">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="setEndWidthAt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
          <parameter const="false" type="double" modifier="" name="w" />
        </parameters>
      </variant>
    </function>
    <function name="getEndWidthAt">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="hasWidths">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setStartWidths">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;double&gt;" modifier="&amp;" name="sw" />
        </parameters>
      </variant>
    </function>
    <function name="getStartWidths">
      <variant return-type="QList&lt;double&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setEndWidths">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;double&gt;" modifier="&amp;" name="ew" />
        </parameters>
      </variant>
    </function>
    <function name="getEndWidths">
      <variant return-type="QList&lt;double&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getExploded">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="segments" default="RDEFAULT_MIN1" />
        </parameters>
      </variant>
    </function>
    <function name="toPainterPath">
      <variant return-type="RPainterPath" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="simplify">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="angleTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="roundAllCorners">
      <variant return-type="RPolyline" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="radius" />
        </parameters>
      </variant>
    </function>
    <function name="verifyTangency">
      <variant return-type="QList&lt;RVector&gt;" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="toleranceMin" default="RS::AngleTolerance" />
          <parameter const="false" type="double" modifier="" name="toleranceMax" default="M_PI_4" />
        </parameters>
      </variant>
    </function>
    <function name="getShapes">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="false" />
          <parameter const="false" type="bool" modifier="" name="segment" default="false" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="entityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="setPolylineGen">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getPolylineGen">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setElevation">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getElevation">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RPolylineEntity" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
      <super name="REntity" />
    </super_list>
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyProtected" />
    <property static="true" type="RPropertyTypeId" name="PropertyWorkingSet" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyLayer" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetype" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetypeScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineweight" />
    <property static="true" type="RPropertyTypeId" name="PropertyColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDisplayedColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDrawOrder" />
    <property static="true" type="RPropertyTypeId" name="PropertyClosed" />
    <property static="true" type="RPropertyTypeId" name="PropertyPolylineGen" />
    <property static="true" type="RPropertyTypeId" name="PropertyVertexNX" />
    <property static="true" type="RPropertyTypeId" name="PropertyVertexNY" />
    <property static="true" type="RPropertyTypeId" name="PropertyVertexNZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyBulgeN" />
    <property static="true" type="RPropertyTypeId" name="PropertyAngleN" />
    <property static="true" type="RPropertyTypeId" name="PropertyStartWidthN" />
    <property static="true" type="RPropertyTypeId" name="PropertyEndWidthN" />
    <property static="true" type="RPropertyTypeId" name="PropertyGlobalWidth" />
    <property static="true" type="RPropertyTypeId" name="PropertyOrientation" />
    <property static="true" type="RPropertyTypeId" name="PropertyLength" />
    <property static="true" type="RPropertyTypeId" name="PropertyTotalLength" />
    <property static="true" type="RPropertyTypeId" name="PropertyArea" />
    <property static="true" type="RPropertyTypeId" name="PropertyTotalArea" />
    <property static="true" type="RPropertyTypeId" name="PropertyBaseAngle" />
    <property static="true" type="RPropertyTypeId" name="PropertySize1" />
    <property static="true" type="RPropertyTypeId" name="PropertySize2" />
    <property static="true" type="RPropertyTypeId" name="PropertyElevation" />
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="RPolylineData" modifier="&amp;" name="data" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RPolylineEntity" modifier="&amp;" name="other" />
        </parameters>
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStaticPropertyTypeIds" static="true">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RPolylineEntity*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setShape">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="exportEntity">
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RExporter" modifier="&amp;" name="e" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
          <parameter const="false" type="bool" modifier="" name="forceSelected" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getData">
      <variant return-type="RPolylineData&amp;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPolylineShape">
      <variant return-type="RPolyline" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clear">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="normalize">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="countVertices">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="appendVertex">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="vertex" />
          <parameter const="false" type="double" modifier="" name="bulge" default="0.0" />
          <parameter const="false" type="double" modifier="" name="w1" default="0.0" />
          <parameter const="false" type="double" modifier="" name="w2" default="0.0" />
        </parameters>
      </variant>
    </function>
    <function name="prependVertex">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="vertex" />
          <parameter const="false" type="double" modifier="" name="bulge" default="0.0" />
          <parameter const="false" type="double" modifier="" name="w1" default="0.0" />
          <parameter const="false" type="double" modifier="" name="w2" default="0.0" />
        </parameters>
      </variant>
    </function>
    <function name="insertVertex">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="index" />
          <parameter const="true" type="RVector" modifier="&amp;" name="vertex" />
        </parameters>
      </variant>
    </function>
    <function name="insertVertexAt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="vertex" />
        </parameters>
      </variant>
    </function>
    <function name="getVertexAt">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="removeLastVertex">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="removeVertex">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="index" />
        </parameters>
      </variant>
    </function>
    <function name="countSegments">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSegmentAt">
      <variant return-type="QSharedPointer&lt;RShape&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="isArcSegmentAt">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="hasArcSegments">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getClosestSegment">
      <variant return-type="int" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="getClosestVertex">
      <variant return-type="int" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="getBulgeAt">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="setBulgeAt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
          <parameter const="false" type="double" modifier="" name="b" />
        </parameters>
      </variant>
    </function>
    <function name="getVertexAngle">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
          <parameter const="false" type="RS::Orientation" modifier="" name="orientation" default="RS::UnknownOrientation" />
        </parameters>
      </variant>
    </function>
    <function name="stripWidths">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setMinimumWidth">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="w" />
        </parameters>
      </variant>
    </function>
    <function name="setGlobalWidth">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="w" />
        </parameters>
      </variant>
    </function>
    <function name="setStartWidthAt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
          <parameter const="false" type="double" modifier="" name="w" />
        </parameters>
      </variant>
    </function>
    <function name="getStartWidthAt">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="setEndWidthAt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
          <parameter const="false" type="double" modifier="" name="w" />
        </parameters>
      </variant>
    </function>
    <function name="getEndWidthAt">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="hasWidths">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setStartWidths">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;double&gt;" modifier="&amp;" name="sw" />
        </parameters>
      </variant>
    </function>
    <function name="getStartWidths">
      <variant return-type="QList&lt;double&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setEndWidths">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;double&gt;" modifier="&amp;" name="ew" />
        </parameters>
      </variant>
    </function>
    <function name="getEndWidths">
      <variant return-type="QList&lt;double&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection1">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection2">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="reverse">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSideOfPoint">
      <variant return-type="RS::Side" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="getEndPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStartPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="relocateStartPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="setClosed">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isClosed">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isGeometricallyClosed">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="autoClose">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="toLogicallyClosed">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="toLogicallyOpen">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSelfIntersectionPoints">
      <variant return-type="QList&lt;RVector&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="getOrientation">
      <variant return-type="RS::Orientation" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="implicitelyClosed" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getArea">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLength">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLengthTo">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getExploded">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getComplexity">
      <variant return-type="int" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="toPainterPath">
      <variant return-type="RPainterPath" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="simplify">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="angleTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="verifyTangency">
      <variant return-type="QList&lt;RVector&gt;" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="toleranceMin" default="RS::AngleTolerance" />
          <parameter const="false" type="double" modifier="" name="toleranceMax" default="M_PI_4" />
        </parameters>
      </variant>
    </function>
    <function name="setPolylineGen">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getPolylineGen">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setElevation">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getElevation">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isFlat">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTrimEnd">
      <variant return-type="RS::Ending" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" />
        </parameters>
      </variant>
    </function>
    <function name="trimStartPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="trimDist" />
        </parameters>
      </variant>
    </function>
    <function name="trimEndPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="trimDist" />
        </parameters>
      </variant>
    </function>
    <function name="morph">
      <variant return-type="QList&lt;RPolyline&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="target" />
          <parameter const="false" type="int" modifier="" name="steps" />
        </parameters>
      </variant>
    </function>
    <function name="contains">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="borderIsInside" default="false" />
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="containsShape">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
        </parameters>
      </variant>
    </function>
    <function name="validate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <!--
    <function name="print">
      <variant return-type="void" virtual="true" const="true" access="protected">
        <parameters>
          <parameter const="false" type="QDebug" modifier="" name="dbg" />
        </parameters>
      </variant>
    </function>
    -->
  </class>
  <class name="RPreferencesListener" ownership="cpp">
    <function name="updatePreferences">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="di" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RPreferencesListenerAdapter" ownership="cpp">
    <super_list>
      <super name="QObject" />
      <super name="RPreferencesListener" />
    </super_list>
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="updatePreferences">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="di" />
        </parameters>
      </variant>
    </function>
    <function name="preferencesUpdated">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="di" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RProgressHandler" ownership="cpp">
    <!--
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    -->
    <function name="setProgress">
      <variant return-type="void" virtual="true" pure-virtual="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="value" />
        </parameters>
      </variant>
    </function>
    <function name="setProgressEnd">
      <variant return-type="void" virtual="true" pure-virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setProgressText">
      <variant return-type="void" virtual="true" pure-virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="text" default="&quot;&quot;" />
        </parameters>
      </variant>
    </function>
    <function name="setProgressEnabled">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RPropertyAttributes">
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RPropertyAttributes::Options" modifier="" name="options" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="setOption">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RPropertyAttributes::Option" modifier="" name="option" />
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isReadOnly">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setReadOnly">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="readOnly" />
        </parameters>
      </variant>
    </function>
    <function name="isInvisible">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setInvisible">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="invisible" />
        </parameters>
      </variant>
    </function>
    <function name="isUndeletable">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setUndeletable">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="undeletable" />
        </parameters>
      </variant>
    </function>
    <function name="isList">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setList">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isAngleType">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setAngleType">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="angle" />
        </parameters>
      </variant>
    </function>
    <function name="getIgnoreCase">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setIgnoreCase">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="ignoreCase" />
        </parameters>
      </variant>
    </function>
    <function name="affectsOtherProperties">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setAffectsOtherProperties">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="affectsOtherProperties" />
        </parameters>
      </variant>
    </function>
    <function name="setAllowMixedValue">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="allowMixedValue" />
        </parameters>
      </variant>
    </function>
    <function name="getAllowMixedValue">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getChoices">
      <variant return-type="QSet&lt;QString&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setChoices">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QSet&lt;QString&gt;" modifier="" name="choices" />
        </parameters>
      </variant>
    </function>
    <function name="hasChoices">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isRichText">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setRichText">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isStyle">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setStyle">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="mixWith">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RPropertyAttributes" modifier="&amp;" name="other" />
        </parameters>
      </variant>
    </function>
    <function name="isMixed">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setMixed">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="mixed" />
        </parameters>
      </variant>
    </function>
    <function name="isSum">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setSum">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="sum" />
        </parameters>
      </variant>
    </function>
    <function name="isOnRequest">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setOnRequest">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="onRequest" />
        </parameters>
      </variant>
    </function>
    <function name="isLabel">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isCustom">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isDimensionLabel">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setInteger">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="isInteger">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isRedundant">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setRedundant">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isVisibleToParent">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isNumericallySorted">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setNumericallySorted">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isScaleType">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setScaleType">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="isAreaType">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setAreaType">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="isUnitLess">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setUnitLess">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="isPercentage">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLabel">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLabel">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="l" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RPropertyChange">
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="false" type="QVariant" modifier="" name="oldValue" />
          <parameter const="false" type="QVariant" modifier="" name="newValue" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="setOldValue">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QVariant" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getOldValue">
      <variant return-type="QVariant" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setNewValue">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QVariant" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getNewValue">
      <variant return-type="QVariant" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPropertyTypeId">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RPropertyTypeId" modifier="&amp;" name="id" />
        </parameters>
      </variant>
    </function>
    <function name="getPropertyTypeId">
      <variant return-type="RPropertyTypeId" const="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RPropertyEditor" ownership="cpp" inheritable="true">
    <super_list>
      <super name="RPropertyListener" />
      <super name="RLayerListener" />
    </super_list>
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getInstance" static="true">
      <variant return-type="RPropertyEditor*" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="updateFromDocument">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="false" type="bool" modifier="" name="onlyChanges" />
          <parameter const="false" type="RS::EntityType" modifier="" name="filter" default="RS::EntityUnknown" />
          <parameter const="false" type="bool" modifier="" name="manual" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="updateFromObject">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="RObject" modifier="*" name="object" />
          <parameter const="false" type="RDocument" modifier="*" name="document" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="clearEditor">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getFixedCustomPropertyNames">
      <variant return-type="QStringList" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RS::EntityType&gt;" modifier="&amp;" name="objectTypes" />
        </parameters>
      </variant>
    </function>
    <function name="updateLayers">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
          <parameter const="false" type="QList&lt;RLayer::Id&gt;" modifier="&amp;" name="layerIds" />
        </parameters>
      </variant>
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
    <function name="setCurrentLayer">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
          <parameter const="false" type="RLayer::Id" modifier="" name="previousLayerId" />
        </parameters>
      </variant>
    </function>
    <function name="clearLayers">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="propertyChanged">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="false" type="QVariant" modifier="" name="propertyValue" />
          <parameter const="false" type="RS::MetaType" modifier="" name="typeHint" default="RS::UnknownType" />
        </parameters>
      </variant>
    </function>
    <function name="listPropertyChanged">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="false" type="int" modifier="" name="index" />
          <parameter const="false" type="QVariant" modifier="" name="propertyValue" />
        </parameters>
      </variant>
    </function>
    <function name="getGroupTitles">
      <variant return-type="QStringList" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPropertyTitles">
      <variant return-type="QStringList" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="group" />
        </parameters>
      </variant>
    </function>
    <function name="getPropertyValue">
      <variant return-type="QVariant" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="group" />
          <parameter const="true" type="QString" modifier="&amp;" name="title" />
        </parameters>
      </variant>
      <variant return-type="QVariant" access="public">
        <parameters>
          <parameter const="true" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
        </parameters>
      </variant>
    </function>
    <function name="getPropertyAttributes">
      <variant return-type="RPropertyAttributes" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="group" />
          <parameter const="true" type="QString" modifier="&amp;" name="title" />
        </parameters>
      </variant>
      <variant return-type="RPropertyAttributes" access="public">
        <parameters>
          <parameter const="true" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
        </parameters>
      </variant>
    </function>
    <function name="getCustomPropertyAttributes">
      <variant return-type="RPropertyAttributes" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="group" />
          <parameter const="true" type="QString" modifier="&amp;" name="title" />
        </parameters>
      </variant>
    </function>
    <function name="getTypes">
      <variant return-type="QList&lt;RS::EntityType&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTypeCount">
      <variant return-type="int" access="public">
        <parameters>
          <parameter const="false" type="RS::EntityType" modifier="" name="type" />
        </parameters>
      </variant>
    </function>
    <function name="setEntityTypeFilter">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::EntityType" modifier="" name="type" />
        </parameters>
      </variant>
    </function>
    <function name="getEntityTypeFilter">
      <variant return-type="RS::EntityType" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAppProperties">
      <variant return-type="QStringList" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="checkType" static="true">
      <variant return-type="bool" static="true" access="public">
        <parameters>
          <parameter const="false" type="RS::EntityType" modifier="" name="type" />
          <parameter const="false" type="RS::EntityType" modifier="" name="filter" />
        </parameters>
      </variant>
    </function>
    <function name="makeReadOnly" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters>
          <parameter const="false" type="QWidget" modifier="*" name="control" />
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="updateEditor">
      <variant return-type="void" virtual="true" access="protected">
        <parameters>
          <parameter const="false" type="RObject" modifier="&amp;" name="object" />
          <parameter const="true" type="QList&lt;RPropertyTypeId&gt;" modifier="&amp;" name="propertyTypeIds" />
          <parameter const="false" type="bool" modifier="" name="doUpdateGui" />
          <parameter const="false" type="RDocument" modifier="*" name="document" default="NULL" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="updateGui">
      <variant return-type="void" virtual="true" overridable="true" access="protected">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="onlyChanges" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="updateProperty">
      <variant return-type="void" access="protected">
        <parameters>
          <parameter const="true" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="RObject" modifier="&amp;" name="object" />
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="showCustomAppProperties">
      <variant return-type="bool" virtual="true" access="protected">
        <parameters>
          <parameter const="false" type="RPropertyAttributes::Option" modifier="" name="opt" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="computePropertyValue" static="true">
      <variant return-type="void" static="true" access="protected">
        <parameters>
          <parameter const="false" type="RProperty" modifier="&amp;" name="property" />
        </parameters>
      </variant>
    </function>
    -->
  </class>
  <class name="RPropertyEvent" ownership="cpp">
    <super_list>
      <super name="QEvent" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RS::EntityType" modifier="" name="entityTypeFilter" default="RS::EntityAll" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getPropertyTypeId">
      <variant return-type="RPropertyTypeId" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getValue">
      <variant return-type="QVariant" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEntityTypeFilter">
      <variant return-type="RS::EntityType" const="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RPropertyListener" ownership="cpp">
    <function name="updateFromDocument">
      <variant return-type="void" virtual="true" access="public" overridable="true">
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="false" type="bool" modifier="" name="onlyChanges" />
          <parameter const="false" type="RS::EntityType" modifier="" name="entityTypeFilter" default="RS::EntityAll" />
          <parameter const="false" type="bool" modifier="" name="manual" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="updateFromObject">
      <variant return-type="void" virtual="true" access="public" overridable="true">
        <parameters>
          <parameter const="false" type="RObject" modifier="*" name="object" />
          <parameter const="false" type="RDocument" modifier="*" name="document" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="clearEditor">
      <variant return-type="void" virtual="true" access="public" overridable="true">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RPropertyListenerAdapter" ownership="cpp">
    <super_list>
      <super name="QObject" />
      <super name="RPropertyListener" />
    </super_list>
    <function name="updateFromDocument">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="false" type="bool" modifier="" name="onlyChanges" />
          <parameter const="false" type="RS::EntityType" modifier="" name="entityTypeFilter" default="RS::EntityAll" />
          <parameter const="false" type="bool" modifier="" name="manual" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="updateFromObject">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="RObject" modifier="*" name="object" />
          <parameter const="false" type="RDocument" modifier="*" name="document" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="clearEditor">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="updatedFromDocument">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="false" type="bool" modifier="" name="onlyChanges" />
          <parameter const="false" type="RS::EntityType" modifier="" name="entityTypeFilter" />
          <parameter const="false" type="bool" modifier="" name="manual" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" />
        </parameters>
      </variant>
    </function>
    <function name="updatedFromObject">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="RObject" modifier="*" name="object" />
          <parameter const="false" type="RDocument" modifier="*" name="document" />
        </parameters>
      </variant>
    </function>
    <function name="clearedEditor">
      <variant return-type="void" access="public" signal="true">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RPropertyTypeId">
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="customPropertyTitle" />
          <parameter const="true" type="QString" modifier="&amp;" name="customPropertyName" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="customPropertyName" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RPropertyTypeId" modifier="&amp;" name="other" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="false" type="int" modifier="" name="id" default="RObject::INVALID_ID" />
        </parameters>
      </variant>
    </constructor>
    <function name="getId">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setId">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="id" />
        </parameters>
      </variant>
    </function>
    <function name="getCustomPropertyTitle">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCustomPropertyTitle">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="t" />
        </parameters>
      </variant>
    </function>
    <function name="getCustomPropertyName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCustomPropertyName">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="n" />
        </parameters>
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isCustom">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="generateId">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::EntityType" modifier="" name="type" />
          <parameter const="true" type="QString" modifier="&amp;" name="groupTitle" />
          <parameter const="true" type="QString" modifier="&amp;" name="title" />
          <parameter const="false" type="bool" modifier="" name="forceNew" default="false" />
          <parameter const="false" type="RPropertyAttributes::Options" modifier="" name="options" default="RPropertyAttributes::NoOptions" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::EntityType" modifier="" name="type" />
          <parameter const="true" type="RPropertyTypeId" modifier="&amp;" name="other" />
        </parameters>
      </variant>
    </function>
    <function name="getPropertyTypeIds" static="true">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" access="public">
        <parameters>
          <parameter const="false" type="RS::EntityType" modifier="" name="type" />
          <parameter const="false" type="RPropertyAttributes::Option" modifier="" name="" default="RPropertyAttributes::NoOptions" />
        </parameters>
      </variant>
    </function>
    <function name="hasPropertyType" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="RS::EntityType" modifier="" name="type" />
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
        </parameters>
      </variant>
    </function>
    <function name="getPropertyGroupTitle">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPropertyTitle">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPropertyTypeId" static="true">
      <variant return-type="RPropertyTypeId" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="groupTitle" />
          <parameter const="true" type="QString" modifier="&amp;" name="title" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RRay" sharedpointer="true">
    <super_list>
      <super name="RShape" />
      <super name="RXLine" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="basePoint" />
          <parameter const="false" type="double" modifier="" name="angle" />
          <parameter const="false" type="double" modifier="" name="distance" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="basePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="directionVector" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="line" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getShapeType">
      <variant return-type="RShape::Type" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RRay*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getVectorProperties">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="trimEndPoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getPointsWithDistanceToEnd">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="int" modifier="" name="from" />
        </parameters>
      </variant>
    </function>
    <function name="reverse">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getClippedLine">
      <variant return-type="RLine" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="box" />
        </parameters>
      </variant>
    </function>
    <function name="getVectorTo">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="stretch">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="area" />
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="splitAt">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="points" />
        </parameters>
      </variant>
    </function>
    <function name="print" />
  </class>
  <class name="RRayData">
    <super_list>
      <super name="REntityData" />
      <super name="RRay" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="basePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="dir" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RRay" modifier="&amp;" name="ray" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRay">
      <variant return-type="RRay" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="setZ">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="z" />
        </parameters>
      </variant>
    </function>
    <function name="to2D">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="ignoreEmpty" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getMiddlePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getCenterPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getArcReferencePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
        </parameters>
      </variant>
    </function>
    <function name="getPointsWithDistanceToEnd">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="int" modifier="" name="from" default="RS::FromAny" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getIntersectionPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="REntityData" modifier="&amp;" name="other" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="bool" modifier="" name="same" default="false" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="true" />
          <!--
          <parameter const="false" type="QList&lt;QPair&lt;RObject::Id,RObject::Id&gt;&gt;" modifier="*" name="entityIds" default="NULL" />
          -->
        </parameters>
      </variant>
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getVectorTo">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="getDistanceTo">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="range" default="0.0" />
          <parameter const="false" type="bool" modifier="" name="draft" default="false" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="intersectsWith">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="flipHorizontal">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBasePoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirectionVector">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasFixedAngle">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setFixedAngle">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="reverse">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTrimEnd">
      <variant return-type="RS::Ending" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" />
        </parameters>
      </variant>
    </function>
    <function name="trimStartPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="trimEndPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getSideOfPoint">
      <variant return-type="RS::Side" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="getReferencePoints">
      <variant return-type="QList&lt;RRefPoint&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="hint" default="RS::RenderTop" />
        </parameters>
      </variant>
    </function>
    <function name="moveReferencePoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="targetPoint" />
          <parameter const="false" type="Qt::KeyboardModifiers" modifier="" name="modifiers" default="Qt::NoModifier" />
        </parameters>
      </variant>
    </function>
    <function name="castToShape">
      <variant return-type="RShape*" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getShapes">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="false" />
          <parameter const="false" type="bool" modifier="" name="segment" default="false" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="entityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RRayEntity" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
      <super name="REntity" />
    </super_list>
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyProtected" />
    <property static="true" type="RPropertyTypeId" name="PropertyWorkingSet" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyLayer" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetype" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetypeScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineweight" />
    <property static="true" type="RPropertyTypeId" name="PropertyColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDisplayedColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDrawOrder" />
    <property static="true" type="RPropertyTypeId" name="PropertyBasePointX" />
    <property static="true" type="RPropertyTypeId" name="PropertyBasePointY" />
    <property static="true" type="RPropertyTypeId" name="PropertyBasePointZ" />
    <property static="true" type="RPropertyTypeId" name="PropertySecondPointX" />
    <property static="true" type="RPropertyTypeId" name="PropertySecondPointY" />
    <property static="true" type="RPropertyTypeId" name="PropertySecondPointZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyDirectionX" />
    <property static="true" type="RPropertyTypeId" name="PropertyDirectionY" />
    <property static="true" type="RPropertyTypeId" name="PropertyDirectionZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyAngle" />
    <property static="true" type="RPropertyTypeId" name="PropertyFixedAngle" />
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="RRayData" modifier="&amp;" name="data" />
        </parameters>
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStaticPropertyTypeIds" static="true">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RRayEntity*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="exportEntity">
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RExporter" modifier="&amp;" name="e" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
          <parameter const="false" type="bool" modifier="" name="forceSelected" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getData">
      <variant return-type="RRayData&amp;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setShape">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RRay" modifier="&amp;" name="r" />
        </parameters>
      </variant>
    </function>
    <function name="setBasePoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getBasePoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setSecondPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getSecondPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDirectionVectorPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getDirectionVector">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasFixedAngle">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setFixedAngle">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getDirection1">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection2">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="reverse">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSideOfPoint">
      <variant return-type="RS::Side" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="getTrimEnd">
      <variant return-type="RS::Ending" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" />
        </parameters>
      </variant>
    </function>
    <function name="trimStartPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="trimEndPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getLength">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="print" />
  </class>
  <class name="RRefPoint">
    <super_list>
      <super name="RVector" />
    </super_list>
    <function name="toVectorList" static="true">
      <variant return-type="QList&lt;RVector&gt;" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RRefPoint&gt;" modifier="&amp;" name="list" />
        </parameters>
      </variant>
    </function>
    <function name="toRefPointList" static="true">
      <variant return-type="QList&lt;RRefPoint&gt;" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="list" />
          <parameter const="false" type="RRefPoint::Flags" modifier="" name="flags" default="RRefPoint::NoFlags" />
        </parameters>
      </variant>
    </function>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="double" modifier="" name="vx" />
          <parameter const="false" type="double" modifier="" name="vy" />
          <parameter const="false" type="double" modifier="" name="vz" default="0.0" />
          <parameter const="false" type="bool" modifier="" name="valid_in" default="true" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
          <parameter const="false" type="RRefPoint::Flags" modifier="" name="f" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="isSecondary">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setSecondary">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isTertiary">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setTertiary">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isIgnore">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setIgnore">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isCenter">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCenter">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isStart">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setStart">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isEnd">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setEnd">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isArrow">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setArrow">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isSelected">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setSelected">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="setFlag">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RRefPoint::Flag" modifier="" name="flag" />
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getFlag">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="RRefPoint::Flag" modifier="" name="flag" />
        </parameters>
      </variant>
    </function>
    <function name="getFlags">
      <variant return-type="RRefPoint::Flags" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setFlags">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RRefPoint::Flags" modifier="" name="f" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RRestrictAngleLength" ownership="cpp" inheritable="true">
    <super_list>
      <super name="RSnapRestriction" />
    </super_list>
    <enum name="AngleLengthMode">
      <key>None</key>
      <key>Angle</key>
      <key>Length</key>
      <key>AngleLength</key>
    </enum>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
          <parameter const="false" type="double" modifier="" name="baseAngle" />
          <parameter const="false" type="double" modifier="" name="angle" />
          <parameter const="false" type="double" modifier="" name="baseLength" />
          <parameter const="false" type="double" modifier="" name="length" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" default="NULL" />
        </parameters>
      </variant>
    </constructor>
    <function name="restrictSnap">
      <variant return-type="RVector" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="position" />
          <parameter const="true" type="RVector" modifier="&amp;" name="relativeZero" />
        </parameters>
      </variant>
    </function>
    <function name="setBaseAngle">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a" />
        </parameters>
      </variant>
    </function>
    <function name="setAngle">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a" />
        </parameters>
      </variant>
    </function>
    <function name="setBaseLength">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="setLength">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="setRestrictAngle">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="setRestrictLength">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RRestrictHorizontal" ownership="cpp">
    <super_list>
      <super name="RSnapRestriction" />
      <super name="RRestrictOrthogonal" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" default="NULL" />
        </parameters>
      </variant>
    </constructor>
  </class>
  <class name="RRestrictOff" ownership="cpp">
    <super_list>
      <super name="RSnapRestriction" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" default="NULL" />
        </parameters>
      </variant>
    </constructor>
    <function name="restrictSnap">
      <variant return-type="RVector" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="position" />
          <parameter const="true" type="RVector" modifier="&amp;" name="relativeZero" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RRestrictOrthogonal" ownership="cpp">
    <super_list>
      <super name="RSnapRestriction" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </constructor>
    <function name="restrictSnap">
      <variant return-type="RVector" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="position" />
          <parameter const="true" type="RVector" modifier="&amp;" name="relativeZero" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RRestrictVertical" ownership="cpp">
    <super_list>
      <super name="RSnapRestriction" />
      <super name="RRestrictOrthogonal" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </constructor>
  </class>
  <class name="RRuler" ownership="cpp">
    <!--
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    -->
    <function name="setGraphicsView">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RGraphicsView" modifier="*" name="view" />
        </parameters>
      </variant>
    </function>
    <function name="getOrientation">
      <variant return-type="Qt::Orientation" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setOrientation">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="Qt::Orientation" modifier="" name="orientation" />
        </parameters>
      </variant>
    </function>
    <function name="paintTick">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="pos" />
          <parameter const="false" type="bool" modifier="" name="major" />
          <parameter const="true" type="QString" modifier="&amp;" name="label" />
        </parameters>
      </variant>
    </function>
    <function name="getFont">
      <variant return-type="QFont" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="updateViewport">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RRulerQt" ownership="cpp">
    <super_list>
      <super name="QObject" />
      <super name="QWidget" />
      <super name="QFrame" />
      <super name="RRuler" />
      <super name="RCoordinateListener" />
      <super name="RPaletteListener" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QWidget" modifier="*" name="parent" default="0" />
        </parameters>
      </variant>
    </constructor>
    <function name="setOrientation">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="Qt::Orientation" modifier="" name="orientation" />
        </parameters>
      </variant>
    </function>
    <function name="sizeHint">
      <variant return-type="QSize" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="paintTick">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="pos" />
          <parameter const="false" type="bool" modifier="" name="major" />
          <parameter const="true" type="QString" modifier="&amp;" name="label" />
        </parameters>
      </variant>
    </function>
    <function name="getFont">
      <variant return-type="QFont" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="updateViewport">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="updateCoordinate">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
    <function name="updatePalette">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="paintEvent">
      <variant return-type="void" access="protected">
        <parameters>
          <parameter const="false" type="QPaintEvent" modifier="*" name="" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RS">
    <property static="true" type="double" name="PointTolerance" />
    <property static="true" type="double" name="AngleTolerance" />
    <property static="true" type="QPageLayout::Orientation" name="Portrait" />
    <property static="true" type="QPageLayout::Orientation" name="Landscape" />
    <enum name="MetaType">
      <key>Bool</key>
      <key>Char</key>
      <key>Char16</key>
      <key>Char32</key>
      <key>Double</key>
      <key>Float</key>
      <key>Int</key>
      <key>Long</key>
      <key>LongLong</key>
      <key>Nullptr</key>
      <key>BitArray</key>
      <key>Bitmap</key>
      <key>Brush</key>
      <key>ByteArray</key>
      <key>ByteArrayList</key>
      <key>CborArray</key>
      <key>CborMap</key>
      <key>CborSimpleType</key>
      <key>CborValue</key>
      <key>Color</key>
      <key>ColorSpace</key>
      <key>Cursor</key>
      <key>Date</key>
      <key>DateTime</key>
      <key>EasingCurve</key>
      <key>Font</key>
      <key>Icon</key>
      <key>Image</key>
      <key>JsonArray</key>
      <key>JsonDocument</key>
      <key>JsonObject</key>
      <key>JsonValue</key>
      <key>KeySequence</key>
      <key>Line</key>
      <key>LineF</key>
      <key>Locale</key>
      <key>Matrix4x4</key>
      <key>ModelIndex</key>
      <key>ObjectStar</key>
      <key>Palette</key>
      <key>Pen</key>
      <key>PersistentModelIndex</key>
      <key>Pixmap</key>
      <key>Point</key>
      <key>PointF</key>
      <key>Polygon</key>
      <key>PolygonF</key>
      <key>Quaternion</key>
      <key>Rect</key>
      <key>RectF</key>
      <key>Region</key>
      <key>RegularExpression</key>
      <key>Size</key>
      <key>SizeF</key>
      <key>SizePolicy</key>
      <key>String</key>
      <key>StringList</key>
      <key>TextFormat</key>
      <key>TextLength</key>
      <key>Time</key>
      <key>Transform</key>
      <key>Url</key>
      <key>Uuid</key>
      <key>Variant</key>
      <key>VariantHash</key>
      <key>VariantList</key>
      <key>VariantMap</key>
      <key>Vector2D</key>
      <key>Vector3D</key>
      <key>Vector4D</key>
      <key>SChar</key>
      <key>Short</key>
      <key>UChar</key>
      <key>UInt</key>
      <key>ULong</key>
      <key>ULongLong</key>
      <key>UShort</key>
      <key>UnknownType</key>
      <key>UserType</key>
      <key>VoidStar</key>
    </enum>
    <enum name="MessageType">
      <key>Print</key>
      <key>Debug</key>
      <key>Warning</key>
      <key>Critical</key>
      <key>Command</key>
    </enum>
    <enum name="EntityType">
      <key>ObjectAll</key>
      <key>ObjectUnknown</key>
      <key>ObjectLinetype</key>
      <key>ObjectLayer</key>
      <key>ObjectBlock</key>
      <key>ObjectLayout</key>
      <key>ObjectLayerState</key>
      <key>ObjectView</key>
      <key>ObjectUcs</key>
      <key>ObjectDocumentVariable</key>
      <key>ObjectDimStyle</key>
      <key>EntityAll</key>
      <key>EntityUnknown</key>
      <key>EntityAttribute</key>
      <key>EntityAttributeDefinition</key>
      <key>EntityBlockRef</key>
      <key>EntityBlockRefAttr</key>
      <key>EntityPoint</key>
      <key>EntityLine</key>
      <key>EntityXLine</key>
      <key>EntityRay</key>
      <key>EntityPolyline</key>
      <key>EntityArc</key>
      <key>EntityCircle</key>
      <key>EntityEllipse</key>
      <key>EntitySolid</key>
      <key>Entity3dFace</key>
      <key>EntityTextBased</key>
      <key>EntityText</key>
      <key>EntityTrace</key>
      <key>EntityFace</key>
      <key>EntityDimension</key>
      <key>EntityDimLinear</key>
      <key>EntityDimAligned</key>
      <key>EntityDimRotated</key>
      <key>EntityDimRadial</key>
      <key>EntityDimDiametric</key>
      <key>EntityDimAngular</key>
      <key>EntityDimAngular2L</key>
      <key>EntityDimAngular3P</key>
      <key>EntityDimArcLength</key>
      <key>EntityDimOrdinate</key>
      <key>EntityHatch</key>
      <key>EntityImage</key>
      <key>EntityLeader</key>
      <key>EntitySpline</key>
      <key>EntityViewport</key>
      <key>EntityTolerance</key>
      <key>EntityUser</key>
    </enum>
    <enum name="ProjectionRenderingHint">
      <key>RenderTop</key>
      <key>RenderSide</key>
      <key>RenderFront</key>
      <key>RenderThreeD</key>
    </enum>
    <enum name="OrthoMode">
      <key>OrthoVertical</key>
      <key>OrthoHorizonal</key>
      <key>Orthogonal</key>
    </enum>
    <enum name="Side">
      <key>NoSide</key>
      <key>LeftHand</key>
      <key>RightHand</key>
      <key>BothSides</key>
    </enum>
    <enum name="Ending">
      <key>EndingStart</key>
      <key>EndingEnd</key>
      <key>EndingNone</key>
    </enum>
    <enum name="VAlign">
      <key>VAlignTop</key>
      <key>VAlignMiddle</key>
      <key>VAlignBase</key>
      <key>VAlignBottom</key>
    </enum>
    <enum name="HAlign">
      <key>HAlignLeft</key>
      <key>HAlignCenter</key>
      <key>HAlignRight</key>
      <key>HAlignAlign</key>
      <key>HAlignMid</key>
      <key>HAlignFit</key>
    </enum>
    <enum name="TextDrawingDirection">
      <key>LeftToRight</key>
      <key>TopToBottom</key>
      <key>ByStyle</key>
    </enum>
    <enum name="TextLineSpacingStyle">
      <key>AtLeast</key>
      <key>Exact</key>
    </enum>
    <enum name="From">
      <key>FromStart</key>
      <key>FromEnd</key>
      <key>FromAny</key>
      <key>AlongPolyline</key>
    </enum>
    <enum name="IsoProjectionType">
      <key>NoProjection</key>
      <key>Top</key>
      <key>Bottom</key>
      <key>Left</key>
      <key>LeftBack</key>
      <key>Right</key>
      <key>RightBack</key>
      <key>Isometric</key>
      <key>IsometricTrue</key>
      <key>Planometric</key>
      <key>Dimetric</key>
      <key>Cabinet</key>
      <key>Cabinet30</key>
      <key>Cavalier</key>
      <key>User1</key>
      <key>User2</key>
      <key>User3</key>
      <key>User4</key>
      <key>IsoTop</key>
      <key>IsoBottom</key>
      <key>IsoLeft</key>
      <key>IsoLeftBack</key>
      <key>IsoRight</key>
      <key>IsoRightBack</key>
    </enum>
    <enum name="Measurement">
      <key>UnknownMeasurement</key>
      <key>Imperial</key>
      <key>Metric</key>
    </enum>
    <enum name="Unit">
      <key>None</key>
      <key>Inch</key>
      <key>Foot</key>
      <key>Mile</key>
      <key>Millimeter</key>
      <key>Centimeter</key>
      <key>Meter</key>
      <key>Kilometer</key>
      <key>Microinch</key>
      <key>Mil</key>
      <key>Yard</key>
      <key>Angstrom</key>
      <key>Nanometer</key>
      <key>Micron</key>
      <key>Decimeter</key>
      <key>Decameter</key>
      <key>Hectometer</key>
      <key>Gigameter</key>
      <key>Astro</key>
      <key>Lightyear</key>
      <key>Parsec</key>
      <key>MaxUnit</key>
    </enum>
    <enum name="AngleFormat">
      <key>DegreesDecimal</key>
      <key>DegreesMinutesSeconds</key>
      <key>Gradians</key>
      <key>Radians</key>
      <key>Surveyors</key>
    </enum>
    <enum name="LinearFormat">
      <key>Scientific</key>
      <key>Decimal</key>
      <key>Engineering</key>
      <key>ArchitecturalStacked</key>
      <key>FractionalStacked</key>
      <key>Architectural</key>
      <key>Fractional</key>
      <key>WindowsDesktop</key>
    </enum>
    <enum name="AngleUnit">
      <key>Deg</key>
      <key>Rad</key>
      <key>Gra</key>
    </enum>
    <enum name="KnownVariable">
      <key>ANGBASE</key>
      <key>ANGDIR</key>
      <key>ATTMODE</key>
      <key>AUNITS</key>
      <key>AUPREC</key>
      <key>CECOLOR</key>
      <key>CELTSCALE</key>
      <key>CHAMFERA</key>
      <key>CHAMFERB</key>
      <key>CHAMFERC</key>
      <key>CHAMFERD</key>
      <key>CLAYER</key>
      <key>CMLJUST</key>
      <key>CMLSCALE</key>
      <key>DIMADEC</key>
      <key>DIMALT</key>
      <key>DIMALTD</key>
      <key>DIMALTF</key>
      <key>DIMALTRND</key>
      <key>DIMALTTD</key>
      <key>DIMALTTZ</key>
      <key>DIMALTU</key>
      <key>DIMALTZ</key>
      <key>DIMAPOST</key>
      <key>DIMASZ</key>
      <key>DIMATFIT</key>
      <key>DIMAUNIT</key>
      <key>DIMAZIN</key>
      <key>DIMBLK</key>
      <key>DIMBLK1</key>
      <key>DIMBLK2</key>
      <key>DIMCEN</key>
      <key>DIMCLRD</key>
      <key>DIMCLRE</key>
      <key>DIMCLRT</key>
      <key>DIMDEC</key>
      <key>DIMDLE</key>
      <key>DIMDLI</key>
      <key>DIMDSEP</key>
      <key>DIMEXE</key>
      <key>DIMEXO</key>
      <key>DIMFRAC</key>
      <key>DIMGAP</key>
      <key>DIMJUST</key>
      <key>DIMLDRBLK</key>
      <key>DIMLFAC</key>
      <key>DIMLIM</key>
      <key>DIMLUNIT</key>
      <key>DIMLWD</key>
      <key>DIMLWE</key>
      <key>DIMPOST</key>
      <key>DIMRND</key>
      <key>DIMSAH</key>
      <key>DIMSCALE</key>
      <key>DIMSD1</key>
      <key>DIMSD2</key>
      <key>DIMSE1</key>
      <key>DIMSE2</key>
      <key>DIMSOXD</key>
      <key>DIMTAD</key>
      <key>DIMTDEC</key>
      <key>DIMTFAC</key>
      <key>DIMTIH</key>
      <key>DIMTIX</key>
      <key>DIMTM</key>
      <key>DIMTOFL</key>
      <key>DIMTOH</key>
      <key>DIMTOL</key>
      <key>DIMTOLJ</key>
      <key>DIMTP</key>
      <key>DIMTSZ</key>
      <key>DIMTVP</key>
      <key>DIMTXSTY</key>
      <key>DIMTXT</key>
      <key>DIMTZIN</key>
      <key>DIMUPT</key>
      <key>DIMZIN</key>
      <key>DISPSILH</key>
      <key>DWGCODEPAGE</key>
      <key>DRAWORDERCTL</key>
      <key>ELEVATION</key>
      <key>EXTMAX</key>
      <key>EXTMIN</key>
      <key>FACETRES</key>
      <key>FILLETRAD</key>
      <key>FILLMODE</key>
      <key>INSBASE</key>
      <key>INSUNITS</key>
      <key>ISOLINES</key>
      <key>LIMCHECK</key>
      <key>LIMMAX</key>
      <key>LIMMIN</key>
      <key>LTSCALE</key>
      <key>LUNITS</key>
      <key>LUPREC</key>
      <key>MAXACTVP</key>
      <key>MEASUREMENT</key>
      <key>MIRRTEXT</key>
      <key>ORTHOMODE</key>
      <key>PDMODE</key>
      <key>PDSIZE</key>
      <key>PELEVATION</key>
      <key>PELLIPSE</key>
      <key>PEXTMAX</key>
      <key>PEXTMIN</key>
      <key>PINSBASE</key>
      <key>PLIMCHECK</key>
      <key>PLIMMAX</key>
      <key>PLIMMIN</key>
      <key>PLINEGEN</key>
      <key>PLINEWID</key>
      <key>PROXYGRAPHICS</key>
      <key>PSLTSCALE</key>
      <key>PUCSNAME</key>
      <key>PUCSORG</key>
      <key>PUCSXDIR</key>
      <key>PUCSYDIR</key>
      <key>QTEXTMODE</key>
      <key>REGENMODE</key>
      <key>SHADEDGE</key>
      <key>SHADEDIF</key>
      <key>SKETCHINC</key>
      <key>SKPOLY</key>
      <key>SPLFRAME</key>
      <key>SPLINESEGS</key>
      <key>SPLINETYPE</key>
      <key>SURFTAB1</key>
      <key>SURFTAB2</key>
      <key>SURFTYPE</key>
      <key>SURFU</key>
      <key>SURFV</key>
      <key>TEXTQLTY</key>
      <key>TEXTSIZE</key>
      <key>TEXTSTYLE</key>
      <key>THICKNESS</key>
      <key>TILEMODE</key>
      <key>TRACEWID</key>
      <key>TREEDEPTH</key>
      <key>UCSNAME</key>
      <key>UCSORG</key>
      <key>UCSXDIR</key>
      <key>UCSYDIR</key>
      <key>UNITMODE</key>
      <key>USERI1</key>
      <key>USERI2</key>
      <key>USERI3</key>
      <key>USERI4</key>
      <key>USERI5</key>
      <key>USERR1</key>
      <key>USERR2</key>
      <key>USERR3</key>
      <key>USERR4</key>
      <key>USERR5</key>
      <key>USRTIMER</key>
      <key>VISRETAIN</key>
      <key>WORLDVIEW</key>
      <key>MaxKnownVariable</key>
      <key>INVALID</key>
    </enum>
    <enum name="KnownVariableType">
      <key>VarTypeBool</key>
      <key>VarTypeInt</key>
      <key>VarTypeDouble</key>
      <key>VarTypeColor</key>
      <key>VarTypeUnknown</key>
    </enum>
    <enum name="BooleanOperation">
      <key>Intersection</key>
      <key>Union</key>
      <key>Difference</key>
      <key>Xor</key>
    </enum>
    <enum name="FillType">
      <key>EvenOdd</key>
      <key>NonZero</key>
      <key>Positive</key>
      <key>Negative</key>
    </enum>
    <enum name="Orientation">
      <key>UnknownOrientation</key>
      <key>Any</key>
      <key>CW</key>
      <key>CCW</key>
    </enum>
    <enum name="JoinType">
      <key>JoinBevel</key>
      <key>JoinRound</key>
      <key>JoinMiter</key>
    </enum>
    <enum name="EndType">
      <key>EndClosedPolygon</key>
      <key>EndClosedLine</key>
      <key>EndOpenButt</key>
      <key>EndOpenSquare</key>
      <key>EndOpenRound</key>
      <key>EndOpenSingle</key>
    </enum>
    <enum name="Easing">
      <key>Linear</key>
      <key>InQuad</key>
      <key>OutQuad</key>
      <key>InOutQuad</key>
      <key>OutInQuad</key>
      <key>InCubic</key>
      <key>OutCubic</key>
      <key>InOutCubic</key>
      <key>OutInCubic</key>
      <key>InQuart</key>
      <key>OutQuart</key>
      <key>InOutQuart</key>
      <key>OutInQuart</key>
      <key>InQuint</key>
      <key>OutQuint</key>
      <key>InOutQuint</key>
      <key>OutInQuint</key>
      <key>InSine</key>
      <key>OutSine</key>
      <key>InOutSine</key>
      <key>OutInSine</key>
      <key>InExpo</key>
      <key>OutExpo</key>
      <key>InOutExpo</key>
      <key>OutInExpo</key>
      <key>InCirc</key>
      <key>OutCirc</key>
      <key>InOutCirc</key>
      <key>OutInCirc</key>
      <key>InElastic</key>
      <key>OutElastic</key>
      <key>InOutElastic</key>
      <key>OutInElastic</key>
      <key>InBack</key>
      <key>OutBack</key>
      <key>InOutBack</key>
      <key>OutInBack</key>
      <key>InBounce</key>
      <key>OutBounce</key>
      <key>InOutBounce</key>
      <key>OutInBounce</key>
    </enum>
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="compare" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="QVariant" modifier="&amp;" name="v1" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="v2" />
          <parameter const="false" type="bool" modifier="" name="noTolerance" default="false" />
        </parameters>
      </variant>
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="QPair&lt;QVariant,RPropertyAttributes&gt;" modifier="&amp;" name="p1" />
          <parameter const="true" type="QPair&lt;QVariant,RPropertyAttributes&gt;" modifier="&amp;" name="p2" />
          <parameter const="false" type="bool" modifier="" name="noTolerance" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getCpuCores" static="true">
      <variant return-type="int" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getIdealThreadCount" static="true">
      <variant return-type="int" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBuildCpuArchitecture" static="true">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getHostId" static="true">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSystemId" static="true">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getWindowManagerId" static="true">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="showInFileManager" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="filePaths" />
        </parameters>
      </variant>
    </function>
    <function name="getDirectoryList" static="true">
      <variant return-type="QStringList" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="subDirectory" />
        </parameters>
      </variant>
    </function>
    <function name="getFileList" static="true">
      <variant return-type="QStringList" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="subDirectory" />
          <parameter const="true" type="QString" modifier="&amp;" name="fileExtension" />
        </parameters>
      </variant>
    </function>
    <function name="getFontList" static="true">
      <variant return-type="QStringList" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPatternList" static="true">
      <variant return-type="QStringList" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="metric" />
        </parameters>
      </variant>
    </function>
    <function name="getLinetypeList" static="true">
      <variant return-type="QStringList" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="metric" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="mapContainsCaseInsensitive" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="QMap&lt;QString,T&gt;" modifier="&amp;" name="map" />
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="mapValueCaseInsensitive" static="true">
      <variant return-type="T" access="public">
        <parameters>
          <parameter const="true" type="QMap&lt;QString,T&gt;" modifier="&amp;" name="map" />
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
        </parameters>
      </variant>
    </function>
    -->
    <function name="sortAlphanumerical" static="true">
      <variant return-type="QStringList" access="public">
        <parameters>
          <parameter const="true" type="QStringList" modifier="&amp;" name="list" />
        </parameters>
      </variant>
    </function>
    <function name="compareChunkify" static="true">
      <variant return-type="QStringList" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="compareAlphanumerical" static="true">
      <variant return-type="int" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="s1" />
          <parameter const="true" type="QString" modifier="&amp;" name="s2" />
        </parameters>
      </variant>
    </function>
    <function name="lessThanAlphanumerical" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="s1" />
          <parameter const="true" type="QString" modifier="&amp;" name="s2" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="unique" static="true">
      <variant return-type="QList&lt;T&gt;" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;T&gt;" modifier="&amp;" name="list" />
        </parameters>
      </variant>
    </function>
    <function name="toSet" static="true">
      <variant return-type="QSet&lt;T&gt;" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;T&gt;" modifier="&amp;" name="list" />
        </parameters>
      </variant>
    </function>
    <function name="toList" static="true">
      <variant return-type="QList&lt;T&gt;" access="public">
        <parameters>
          <parameter const="true" type="QSet&lt;T&gt;" modifier="&amp;" name="set" />
        </parameters>
      </variant>
    </function>
    -->
    <function name="getFontFamily" static="true">
      <variant return-type="QString" static="true" access="public">
        <parameters>
          <parameter const="true" type="QTextCharFormat" modifier="&amp;" name="format" />
        </parameters>
      </variant>
    </function>
    <function name="getPageSizeId" static="true">
      <variant return-type="int" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="name" />
        </parameters>
      </variant>
    </function>
    <function name="getPageSize" static="true">
      <variant return-type="QSizeF" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="name" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="exactMatch" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="QRegularExpression" modifier="&amp;" name="rx" />
          <parameter const="true" type="QString" modifier="&amp;" name="string" />
        </parameters>
      </variant>
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="QRegularExpression" modifier="&amp;" name="rx" />
          <parameter const="false" type="QRegularExpressionMatch" modifier="&amp;" name="match" />
          <parameter const="true" type="QString" modifier="&amp;" name="string" />
        </parameters>
      </variant>
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="rxStr" />
          <parameter const="true" type="QString" modifier="&amp;" name="string" />
        </parameters>
      </variant>
    </function>
    <function name="indexIn" static="true">
      <variant return-type="int" access="public">
        <parameters>
          <parameter const="true" type="QRegularExpression" modifier="&amp;" name="rx" />
          <parameter const="false" type="QRegularExpressionMatch" modifier="&amp;" name="match" />
          <parameter const="true" type="QString" modifier="&amp;" name="string" />
          <parameter const="false" type="int" modifier="" name="from" default="0" />
        </parameters>
      </variant>
    </function>
    <function name="captured" static="true">
      <variant return-type="QString" access="public">
        <parameters>
          <parameter const="true" type="QRegularExpression" modifier="&amp;" name="rx" />
          <parameter const="true" type="QRegularExpressionMatch" modifier="&amp;" name="match" />
          <parameter const="false" type="int" modifier="" name="nth" default="0" />
        </parameters>
      </variant>
    </function>
    <function name="matchedLength" static="true">
      <variant return-type="int" access="public">
        <parameters>
          <parameter const="true" type="QRegularExpression" modifier="&amp;" name="rx" />
          <parameter const="true" type="QRegularExpressionMatch" modifier="&amp;" name="match" />
        </parameters>
      </variant>
    </function>
    <function name="createRegEpCI" static="true">
      <variant return-type="QRegularExpression" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="str" />
          <parameter const="false" type="bool" modifier="" name="regExp2" default="false" />
        </parameters>
      </variant>
    </function>
    -->
    <function name="setUtf8Codec" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QTextStream" modifier="&amp;" name="ts" />
        </parameters>
      </variant>
    </function>
    <function name="escape" static="true">
      <variant return-type="QString" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="plain" />
        </parameters>
      </variant>
    </function>
    <function name="getScreenCount" static="true">
      <variant return-type="int" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAvailableGeometry" static="true">
      <variant return-type="QSize" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="screen" />
        </parameters>
      </variant>
    </function>
    <function name="convert" static="true">
      <variant return-type="QString" access="public">
        <parameters>
          <parameter const="true" type="QByteArray" modifier="&amp;" name="str" />
          <parameter const="true" type="QString" modifier="&amp;" name="codecName" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RScaleSelectionOperation" ownership="cpp">
    <super_list>
      <super name="ROperation" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="factors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="false" type="double" modifier="" name="factor" />
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
        </parameters>
      </variant>
    </constructor>
    <function name="apply">
      <variant return-type="RTransaction" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="&amp;" name="document" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RSelectionListener" ownership="cpp">
    <function name="updateSelectionListener">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RSelectionListenerAdapter" ownership="cpp">
    <super_list>
      <super name="QObject" />
      <super name="RSelectionListener" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QObject" modifier="*" name="parent" default="NULL" />
        </parameters>
      </variant>
    </constructor>
    <function name="updateSelectionListener">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
    <function name="selectionChanged">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RSettings">
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="uninit" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setNoWrite" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getAppId" static="true">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDevicePixelRatio" static="true">
      <variant return-type="double" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLocale" static="true">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="loadTranslations" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="module" />
          <parameter const="true" type="QStringList" modifier="&amp;" name="dirs" default="RDEFAULT_QSTRINGLIST" />
        </parameters>
      </variant>
    </function>
    <function name="translate" static="true">
      <variant return-type="QString" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="context" />
          <parameter const="true" type="QString" modifier="&amp;" name="str" />
        </parameters>
      </variant>
    </function>
    <function name="getOriginalArguments" static="true">
      <variant return-type="QStringList" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setOriginalArguments" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QStringList" modifier="&amp;" name="a" />
        </parameters>
      </variant>
    </function>
    <function name="getArgument" static="true">
      <variant return-type="QString" access="public">
        <parameters>
          <parameter const="true" type="QStringList" modifier="&amp;" name="args" />
          <parameter const="true" type="QString" modifier="&amp;" name="shortFlag" />
          <parameter const="true" type="QString" modifier="&amp;" name="longFlag" />
          <parameter const="true" type="QString" modifier="&amp;" name="def" default="RDEFAULT_QSTRING" />
        </parameters>
      </variant>
    </function>
    <function name="getArguments" static="true">
      <variant return-type="QStringList" access="public">
        <parameters>
          <parameter const="true" type="QStringList" modifier="&amp;" name="args" />
          <parameter const="true" type="QString" modifier="&amp;" name="shortFlag" />
          <parameter const="true" type="QString" modifier="&amp;" name="longFlag" />
        </parameters>
      </variant>
    </function>
    <function name="getIntArgument" static="true">
      <variant return-type="int" access="public">
        <parameters>
          <parameter const="true" type="QStringList" modifier="&amp;" name="args" />
          <parameter const="true" type="QString" modifier="&amp;" name="shortFlag" />
          <parameter const="true" type="QString" modifier="&amp;" name="longFlag" />
          <parameter const="false" type="int" modifier="" name="def" />
        </parameters>
      </variant>
    </function>
    <function name="getIntListArgument" static="true">
      <variant return-type="QList&lt;int&gt;" access="public">
        <parameters>
          <parameter const="true" type="QStringList" modifier="&amp;" name="args" />
          <parameter const="true" type="QString" modifier="&amp;" name="shortFlag" />
          <parameter const="true" type="QString" modifier="&amp;" name="longFlag" />
          <parameter const="false" type="QList&lt;int&gt;" modifier="" name="def" default="RDEFAULT_QLISTINT" />
        </parameters>
      </variant>
    </function>
    <function name="getFloatArgument" static="true">
      <variant return-type="double" access="public">
        <parameters>
          <parameter const="true" type="QStringList" modifier="&amp;" name="args" />
          <parameter const="true" type="QString" modifier="&amp;" name="shortFlag" />
          <parameter const="true" type="QString" modifier="&amp;" name="longFlag" />
          <parameter const="false" type="double" modifier="" name="def" default="RNANDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="getColorArgument" static="true">
      <variant return-type="RColor" access="public">
        <parameters>
          <parameter const="true" type="QStringList" modifier="&amp;" name="args" />
          <parameter const="true" type="QString" modifier="&amp;" name="shortFlag" />
          <parameter const="true" type="QString" modifier="&amp;" name="longFlag" />
          <parameter const="true" type="RColor" modifier="&amp;" name="def" default="RDEFAULT_RCOLOR" />
        </parameters>
      </variant>
    </function>
    <function name="getVectorArgument" static="true">
      <variant return-type="RVector" access="public">
        <parameters>
          <parameter const="true" type="QStringList" modifier="&amp;" name="args" />
          <parameter const="true" type="QString" modifier="&amp;" name="shortFlag" />
          <parameter const="true" type="QString" modifier="&amp;" name="longFlag" />
          <parameter const="true" type="RVector" modifier="&amp;" name="def" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="getBoxArgument" static="true">
      <variant return-type="RBox" access="public">
        <parameters>
          <parameter const="true" type="QStringList" modifier="&amp;" name="args" />
          <parameter const="true" type="QString" modifier="&amp;" name="shortFlag" />
          <parameter const="true" type="QString" modifier="&amp;" name="longFlag" />
          <parameter const="true" type="RBox" modifier="&amp;" name="def" default="RDEFAULT_RBOX" />
        </parameters>
      </variant>
    </function>
    <function name="testArgument" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="QStringList" modifier="&amp;" name="args" />
          <parameter const="true" type="QString" modifier="&amp;" name="shortFlag" />
          <parameter const="true" type="QString" modifier="&amp;" name="longFlag" />
        </parameters>
      </variant>
    </function>
    <function name="isDeployed" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getApplicationPath" static="true">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPluginPaths" static="true">
      <variant return-type="QStringList" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPluginPath" static="true">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getThemePath" static="true">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStandardLocation" static="true">
      <variant return-type="QString" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="sl" />
        </parameters>
      </variant>
    </function>
    <function name="getCacheLocation" static="true">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDataLocation" static="true">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTempLocation" static="true">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDesktopLocation" static="true">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDocumentsLocation" static="true">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getHomeLocation" static="true">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isGuiEnabled" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isDebuggerEnabled" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasQuitFlag" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setQuitFlag" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getFileName" static="true">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPath" static="true">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLaunchPath" static="true">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLaunchPath" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="launchPath" />
        </parameters>
      </variant>
    </function>
    <function name="setRulerFont" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QFont" modifier="&amp;" name="font" />
        </parameters>
      </variant>
    </function>
    <function name="getRulerFont" static="true">
      <variant return-type="QFont" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setSnapLabelFont" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QFont" modifier="&amp;" name="font" />
        </parameters>
      </variant>
    </function>
    <function name="getSnapLabelFont" static="true">
      <variant return-type="QFont" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getInfoLabelFont" static="true">
      <variant return-type="QFont" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStatusBarFont" static="true">
      <variant return-type="QFont" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSelectionColor" static="true">
      <variant return-type="RColor" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getReferencePointColor" static="true">
      <variant return-type="RColor" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStartReferencePointColor" static="true">
      <variant return-type="RColor" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndReferencePointColor" static="true">
      <variant return-type="RColor" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSecondaryReferencePointColor" static="true">
      <variant return-type="RColor" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTertiaryReferencePointColor" static="true">
      <variant return-type="RColor" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getHighResolutionGraphicsView" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAutoScaleGrid" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAutoScaleMetaGrid" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAutoScalePatterns" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAutoZoomOnLoad" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getColorCorrection" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getColorCorrectionDisableForPrinting" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getColorThreshold" static="true">
      <variant return-type="int" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getFadingFactor" static="true">
      <variant return-type="double" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTextHeightThreshold" static="true">
      <variant return-type="int" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getArcAngleLengthThreshold" static="true">
      <variant return-type="double" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMinArcAngleStep" static="true">
      <variant return-type="double" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDashThreshold" static="true">
      <variant return-type="int" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getQtVersion" static="true">
      <variant return-type="int" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getQtVersionString" static="true">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isQt" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="majorVersion" />
        </parameters>
      </variant>
    </function>
    <function name="getCompilerVersion" static="true">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getOSVersion" static="true">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getReleaseDate" static="true">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getVersionString" static="true">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getNumericalVersionString" static="true">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMajorVersion" static="true">
      <variant return-type="int" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMinorVersion" static="true">
      <variant return-type="int" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRevisionVersion" static="true">
      <variant return-type="int" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBuildVersion" static="true">
      <variant return-type="int" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRevisionString" static="true">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setFirstStart" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isFirstStart" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setNewVersion" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isNewVersion" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPreviousVersion" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="pv" />
        </parameters>
      </variant>
    </function>
    <function name="getCurrentVersion" static="true">
      <variant return-type="int" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPreviousVersion" static="true">
      <variant return-type="int" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isUpdated" static="true">
      <variant return-type="int" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="versionCheck" default="-1" />
        </parameters>
      </variant>
    </function>
    <function name="getSnapRange" static="true">
      <variant return-type="int" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPickRange" static="true">
      <variant return-type="int" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getZeroWeightWeight" static="true">
      <variant return-type="int" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPreviewEntities" static="true">
      <variant return-type="int" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLimitZoomAndScroll" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getShowCrosshair" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setShowCrosshair" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getShowLargeCrosshair" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setShowLargeCrosshair" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getShowLargeOriginAxis" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setShowLargeOriginAxis" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getConcurrentDrawing" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setConcurrentDrawing" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getNumberLocale" static="true">
      <variant return-type="QLocale" access="public">
        <parameters />
      </variant>
    </function>
    <function name="initRecentFiles" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="addRecentFile" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fileName" />
        </parameters>
      </variant>
    </function>
    <function name="removeRecentFile" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fileName" />
        </parameters>
      </variant>
    </function>
    <function name="getRecentFiles" static="true">
      <variant return-type="QStringList" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clearRecentFiles" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getColor" static="true">
      <variant return-type="RColor" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
          <parameter const="true" type="RColor" modifier="&amp;" name="defaultValue" default="RDEFAULT_RCOLOR" />
        </parameters>
      </variant>
    </function>
    <function name="hasValue" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="getValue" static="true">
      <variant return-type="QVariant" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="defaultValue" default="RDEFAULT_QVARIANT" />
        </parameters>
      </variant>
    </function>
    <function name="getColorValue" static="true">
      <variant return-type="RColor" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
          <parameter const="true" type="RColor" modifier="&amp;" name="defaultValue" />
        </parameters>
      </variant>
    </function>
    <function name="getBoolValue" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
          <parameter const="false" type="bool" modifier="" name="defaultValue" />
        </parameters>
      </variant>
    </function>
    <function name="getDoubleValue" static="true">
      <variant return-type="double" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
          <parameter const="false" type="double" modifier="" name="defaultValue" />
        </parameters>
      </variant>
    </function>
    <function name="getIntValue" static="true">
      <variant return-type="int" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
          <parameter const="false" type="int" modifier="" name="defaultValue" />
        </parameters>
      </variant>
    </function>
    <function name="getStringValue" static="true">
      <variant return-type="QString" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
          <parameter const="true" type="QString" modifier="&amp;" name="defaultValue" />
        </parameters>
      </variant>
    </function>
    <function name="getStringListValue" static="true">
      <variant return-type="QStringList" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
          <parameter const="true" type="QStringList" modifier="&amp;" name="defaultValue" />
        </parameters>
      </variant>
    </function>
    <function name="getCharValue" static="true">
      <variant return-type="QChar" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
          <parameter const="true" type="QChar" modifier="&amp;" name="defaultValue" />
        </parameters>
      </variant>
    </function>
    <function name="setValue" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="bool" modifier="" name="overwrite" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="removeValue" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="setApplicationNameOverride" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="n" />
        </parameters>
      </variant>
    </function>
    <function name="getApplicationNameOverride" static="true">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasApplicationNameOverride" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAllKeys" static="true">
      <variant return-type="QStringList" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="group" />
        </parameters>
      </variant>
    </function>
    <function name="getQSettings" static="true">
      <variant return-type="QSettings*" access="public">
        <parameters />
      </variant>
    </function>
    <function name="resetCache" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setXDataEnabled" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isXDataEnabled" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setNextVersionEnabled" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isNextVersionEnabled" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAutoScaleLinetypePatterns" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getApplyLineweightToPoints" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getUseSecondarySelectionColor" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getUseSolidLineSelection" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMouseThreshold" static="true">
      <variant return-type="int" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPositionByMousePress" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAllowMouseMoveInterruptions" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isTextRenderedAsText" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isLayer0CompatibilityOn" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSelectBlockWithAttribute" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getHideAttributeWithBlock" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getImportRecomputedDimBlocks" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getIgnoreBlockReferencePoint" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getIgnoreAllReferencePoints" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getReferencePointSize" static="true">
      <variant return-type="int" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getReferencePointShape" static="true">
      <variant return-type="int" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMaxReferencePointEntities" static="true">
      <variant return-type="int" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMaxReferencePointEntitiesDisplay" static="true">
      <variant return-type="int" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPropertyEditorShowOnRequest" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSimpleTextAlignLeft" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPolarCoordinateSeparator" static="true">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCartesianCoordinateSeparator" static="true">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRelativeCoordinatePrefix" static="true">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isDarkMode" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasDarkGuiBackground" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasCustomStyleSheet" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPrinterNames" static="true">
      <variant return-type="QStringList" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDefaultPrinterName" static="true">
      <variant return-type="QString" access="public">
        <parameters />
      </variant>
    </function>
    <function name="appendOpenGLMessage" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="msg" />
        </parameters>
      </variant>
    </function>
    <function name="getOpenGLMessages" static="true">
      <variant return-type="QStringList" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isInitialized" static="true" />
    <function name="shortenRecentFiles" static="true" />
  </class>
  <!--
  <class name="RShapeTransformation">
    <function name="transform">
      <variant return-type="RVector" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RShapeTransformationScale">
    <super_list>
      <super name="RShapeTransformation" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="factors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
    </constructor>
    <function name="transform">
      <variant return-type="RVector" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
  </class>
  -->
  <class name="RShape" ownership="cpp" sharedpointer="true">
    <enum name="Type">
      <key>Unknown</key>
      <key>Point</key>
      <key>Line</key>
      <key>Arc</key>
      <key>Circle</key>
      <key>Ellipse</key>
      <key>Polyline</key>
      <key>Spline</key>
      <key>Triangle</key>
      <key>XLine</key>
      <key>Ray</key>
    </enum>
    <function name="isValid">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getShapeType">
      <variant return-type="RShape::Type" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isPointShape" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="isLineShape" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="isArcShape" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="isCircleShape" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="isEllipseShape" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="isFullEllipseShape" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="isPolylineShape" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="isSplineShape" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="isTriangleShape" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="isXLineShape" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="isRayShape" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RShape*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="cloneToSharedPointer">
      <variant return-type="QSharedPointer&lt;RShape&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isInterpolated">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getClosestPointOnShape">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="to2D">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setZ">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="z" />
        </parameters>
      </variant>
    </function>
    <function name="getLength">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="equals">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="other" />
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="getVectorProperties">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getIntProperties">
      <variant return-type="QList&lt;int&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDoubleProperties">
      <variant return-type="QList&lt;double&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBoolProperties">
      <variant return-type="QList&lt;bool&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getVectorTo">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="getDistanceTo">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="getMaxDistanceTo">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="points" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="isOnShape">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="tolerance" default="RDEFAULT_TOLERANCE_1E_MIN4" />
        </parameters>
      </variant>
    </function>
    <function name="filterOnShape">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="pointList" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="tolerance" default="RDEFAULT_TOLERANCE_1E_MIN4" />
        </parameters>
      </variant>
    </function>
    <function name="getVectorFromEndpointTo">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="getEndPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMiddlePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCenterPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getArcReferencePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPointOnShape">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPointCloud">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="segmentLength" />
        </parameters>
      </variant>
    </function>
    <function name="getPointsWithDistanceToEnd">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="int" modifier="" name="from" default="RS::FromAny" />
        </parameters>
      </variant>
    </function>
    <function name="getPointWithDistanceToStart">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
        </parameters>
      </variant>
    </function>
    <function name="getPointWithDistanceToEnd">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
        </parameters>
      </variant>
    </function>
    <function name="getAngleAt">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="RS::From" modifier="" name="from" default="RS::FromStart" />
        </parameters>
      </variant>
    </function>
    <function name="getAngleAtPoint">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="pos" />
        </parameters>
      </variant>
    </function>
    <function name="getPointAtPercent">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getAngleAtPercent">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="intersectsWith">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="other" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getIntersectionPoints">
      <variant return-type="QList&lt;RVector&gt;" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape1" />
          <parameter const="true" type="RShape" modifier="&amp;" name="shape2" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="bool" modifier="" name="same" default="false" />
          <parameter const="false" type="bool" modifier="" name="force" default="false" />
        </parameters>
      </variant>
      <variant return-type="QList&lt;RVector&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="other" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="bool" modifier="" name="same" default="false" />
          <parameter const="false" type="bool" modifier="" name="force" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getSelfIntersectionPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="isDirected">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection1">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection2">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSideOfPoint">
      <variant return-type="RS::Side" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="getStartPoint">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoint">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMiddlePoint">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="reverse">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="trimStartPoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="trimDist" />
        </parameters>
      </variant>
    </function>
    <function name="trimEndPoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="trimDist" />
        </parameters>
      </variant>
    </function>
    <function name="getTrimEnd">
      <variant return-type="RS::Ending" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" />
        </parameters>
      </variant>
    </function>
    <function name="getDistanceFromStart">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getDistancesFromStart">
      <variant return-type="QList&lt;double&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="scaleFactor" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RVector()" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RVector()" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="flipHorizontal">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="flipVertical">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="stretch">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="area" />
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="area" />
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="getTransformed">
      <variant return-type="QSharedPointer&lt;RShape&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QTransform" modifier="&amp;" name="transform" />
        </parameters>
      </variant>
    </function>
    <function name="getOrderedShapes" static="true">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" modifier="&amp;" name="shapes" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="order" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="QList&lt;QList&lt;QSharedPointer&lt;RShape&gt;&gt;&gt;" modifier="&amp;"
          name="boundary" />
        </parameters>
      </variant>
    </function>
    -->
    <function name="getIntersectionPointsLL" static="true">
      <variant return-type="QList&lt;RVector&gt;" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="line1" />
          <parameter const="true" type="RLine" modifier="&amp;" name="line2" />
          <parameter const="false" type="bool" modifier="" name="limited1" />
          <parameter const="false" type="bool" modifier="" name="limited2" />
        </parameters>
      </variant>
      <variant return-type="QList&lt;RVector&gt;" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="line1" />
          <parameter const="true" type="RLine" modifier="&amp;" name="line2" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getIntersectionPointsLA" static="true">
      <variant return-type="QList&lt;RVector&gt;" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="line1" />
          <parameter const="true" type="RArc" modifier="&amp;" name="arc2" />
          <parameter const="false" type="bool" modifier="" name="limited1" />
          <parameter const="false" type="bool" modifier="" name="limited2" />
        </parameters>
      </variant>
      <variant return-type="QList&lt;RVector&gt;" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="line1" />
          <parameter const="true" type="RArc" modifier="&amp;" name="arc2" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getIntersectionPointsLC" static="true">
      <variant return-type="QList&lt;RVector&gt;" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="line1" />
          <parameter const="true" type="RCircle" modifier="&amp;" name="circle2" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getIntersectionPointsLE" static="true">
      <variant return-type="QList&lt;RVector&gt;" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="line1" />
          <parameter const="true" type="REllipse" modifier="&amp;" name="ellipse2" />
          <parameter const="false" type="bool" modifier="" name="limited1" />
          <parameter const="false" type="bool" modifier="" name="limited2" />
        </parameters>
      </variant>
      <variant return-type="QList&lt;RVector&gt;" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="line1" />
          <parameter const="true" type="REllipse" modifier="&amp;" name="ellipse2" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getIntersectionPointsLT" static="true">
      <variant return-type="QList&lt;RVector&gt;" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="line1" />
          <parameter const="true" type="RTriangle" modifier="&amp;" name="triangle2" />
          <parameter const="false" type="bool" modifier="" name="limited1" />
          <parameter const="false" type="bool" modifier="" name="limited2" />
        </parameters>
      </variant>
      <variant return-type="QList&lt;RVector&gt;" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="line1" />
          <parameter const="true" type="RTriangle" modifier="&amp;" name="triangle2" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getIntersectionPointsLS" static="true">
      <variant return-type="QList&lt;RVector&gt;" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="line1" />
          <parameter const="true" type="RSpline" modifier="&amp;" name="spline2" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getIntersectionPointsLX" static="true">
      <variant return-type="QList&lt;RVector&gt;" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="line1" />
          <parameter const="true" type="RExplodable" modifier="&amp;" name="explodable2" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getIntersectionPointsAA" static="true">
      <variant return-type="QList&lt;RVector&gt;" access="public">
        <parameters>
          <parameter const="true" type="RArc" modifier="&amp;" name="arc1" />
          <parameter const="true" type="RArc" modifier="&amp;" name="arc2" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getIntersectionPointsAC" static="true">
      <variant return-type="QList&lt;RVector&gt;" access="public">
        <parameters>
          <parameter const="true" type="RArc" modifier="&amp;" name="arc1" />
          <parameter const="true" type="RCircle" modifier="&amp;" name="circle2" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getIntersectionPointsAE" static="true">
      <variant return-type="QList&lt;RVector&gt;" access="public">
        <parameters>
          <parameter const="true" type="RArc" modifier="&amp;" name="arc1" />
          <parameter const="true" type="REllipse" modifier="&amp;" name="ellipse2" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getIntersectionPointsAT" static="true">
      <variant return-type="QList&lt;RVector&gt;" access="public">
        <parameters>
          <parameter const="true" type="RArc" modifier="&amp;" name="arc1" />
          <parameter const="true" type="RTriangle" modifier="&amp;" name="triangle2" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getIntersectionPointsAS" static="true">
      <variant return-type="QList&lt;RVector&gt;" access="public">
        <parameters>
          <parameter const="true" type="RArc" modifier="&amp;" name="arc1" />
          <parameter const="true" type="RSpline" modifier="&amp;" name="spline2" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getIntersectionPointsAX" static="true">
      <variant return-type="QList&lt;RVector&gt;" access="public">
        <parameters>
          <parameter const="true" type="RArc" modifier="&amp;" name="arc1" />
          <parameter const="true" type="RExplodable" modifier="&amp;" name="explodable2" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getIntersectionPointsCC" static="true">
      <variant return-type="QList&lt;RVector&gt;" access="public">
        <parameters>
          <parameter const="true" type="RCircle" modifier="&amp;" name="circle1" />
          <parameter const="true" type="RCircle" modifier="&amp;" name="circle2" />
        </parameters>
      </variant>
    </function>
    <function name="getIntersectionPointsCE" static="true">
      <variant return-type="QList&lt;RVector&gt;" access="public">
        <parameters>
          <parameter const="true" type="RCircle" modifier="&amp;" name="circle1" />
          <parameter const="true" type="REllipse" modifier="&amp;" name="ellipse2" />
        </parameters>
      </variant>
    </function>
    <function name="getIntersectionPointsCS" static="true">
      <variant return-type="QList&lt;RVector&gt;" access="public">
        <parameters>
          <parameter const="true" type="RCircle" modifier="&amp;" name="circle1" />
          <parameter const="true" type="RSpline" modifier="&amp;" name="spline2" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getIntersectionPointsCX" static="true">
      <variant return-type="QList&lt;RVector&gt;" access="public">
        <parameters>
          <parameter const="true" type="RCircle" modifier="&amp;" name="circle1" />
          <parameter const="true" type="RExplodable" modifier="&amp;" name="explodable2" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getIntersectionPointsEE" static="true">
      <variant return-type="QList&lt;RVector&gt;" access="public">
        <parameters>
          <parameter const="true" type="REllipse" modifier="&amp;" name="ellipse1" />
          <parameter const="true" type="REllipse" modifier="&amp;" name="ellipse2" />
          <parameter const="false" type="bool" modifier="" name="limited" />
        </parameters>
      </variant>
      <variant return-type="QList&lt;RVector&gt;" access="public">
        <parameters>
          <parameter const="true" type="REllipse" modifier="&amp;" name="ellipse1" />
          <parameter const="true" type="REllipse" modifier="&amp;" name="ellipse2" />
        </parameters>
      </variant>
    </function>
    <function name="getIntersectionPointsES" static="true">
      <variant return-type="QList&lt;RVector&gt;" access="public">
        <parameters>
          <parameter const="true" type="REllipse" modifier="&amp;" name="ellipse1" />
          <parameter const="true" type="RSpline" modifier="&amp;" name="spline2" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getIntersectionPointsEX" static="true">
      <variant return-type="QList&lt;RVector&gt;" access="public">
        <parameters>
          <parameter const="true" type="REllipse" modifier="&amp;" name="ellipse1" />
          <parameter const="true" type="RExplodable" modifier="&amp;" name="explodable2" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getIntersectionPointsSX" static="true">
      <variant return-type="QList&lt;RVector&gt;" access="public">
        <parameters>
          <parameter const="true" type="RSpline" modifier="&amp;" name="spline1" />
          <parameter const="true" type="RExplodable" modifier="&amp;" name="explodable2" />
          <parameter const="false" type="bool" modifier="" name="limited" />
        </parameters>
      </variant>
    </function>
    <function name="getIntersectionPointsSS" static="true">
      <variant return-type="QList&lt;RVector&gt;" access="public">
        <parameters>
          <parameter const="true" type="RSpline" modifier="&amp;" name="spline1" />
          <parameter const="true" type="RSpline" modifier="&amp;" name="spline2" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="bool" modifier="" name="same" default="false" />
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="getIntersectionPointsXX" static="true">
      <variant return-type="QList&lt;RVector&gt;" access="public">
        <parameters>
          <parameter const="true" type="RExplodable" modifier="&amp;" name="explodable1" />
          <parameter const="true" type="RExplodable" modifier="&amp;" name="explodable2" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="bool" modifier="" name="same" default="false" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="castToExplodable" static="true">
      <variant return-type="const RExplodable*" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="*" name="shape" />
        </parameters>
      </variant>
    </function>
    -->
    <function name="getOffsetShapes">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="int" modifier="" name="number" />
          <parameter const="false" type="RS::Side" modifier="" name="side" />
          <parameter const="true" type="RVector" modifier="&amp;" name="position" default="RVector::invalid" />
        </parameters>
      </variant>
    </function>
    <function name="getOffsetLines" static="true">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="int" modifier="" name="number" />
          <parameter const="false" type="RS::Side" modifier="" name="side" />
          <parameter const="true" type="RVector" modifier="&amp;" name="position" default="RVector::invalid" />
        </parameters>
      </variant>
    </function>
    <function name="getOffsetArcs" static="true">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="int" modifier="" name="number" />
          <parameter const="false" type="RS::Side" modifier="" name="side" />
          <parameter const="true" type="RVector" modifier="&amp;" name="position" default="RVector::invalid" />
        </parameters>
      </variant>
    </function>
    <function name="getReversedShapeList" static="true">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" modifier="&amp;" name="shapes" />
        </parameters>
      </variant>
    </function>
    <function name="splitAt">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="points" />
        </parameters>
      </variant>
    </function>
    <function name="trim" static="true">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="trimShape" />
          <parameter const="true" type="RVector" modifier="&amp;" name="trimClickPos" />
          <parameter const="true" type="RShape" modifier="&amp;" name="limitingShape" />
          <parameter const="true" type="RVector" modifier="&amp;" name="limitingClickPos" />
          <parameter const="false" type="bool" modifier="" name="trimBoth" />
          <parameter const="false" type="bool" modifier="" name="samePolyline" />
        </parameters>
      </variant>
    </function>
    <function name="roundCorners" static="true">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" modifier="&amp;" name="shapes" />
          <parameter const="false" type="double" modifier="" name="radius" />
        </parameters>
      </variant>
    </function>
    <function name="roundShapes" static="true">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" access="public">
        <parameters>
          <parameter const="true" type="QSharedPointer&lt;RShape&gt;" modifier="" name="shape1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPos1" />
          <parameter const="true" type="QSharedPointer&lt;RShape&gt;" modifier="" name="shape2" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPos2" />
          <parameter const="false" type="bool" modifier="" name="trim" />
          <parameter const="false" type="bool" modifier="" name="samePolyline" />
          <parameter const="false" type="double" modifier="" name="radius" />
          <parameter const="true" type="RVector" modifier="&amp;" name="pos" />
        </parameters>
      </variant>
    </function>
    <function name="xLineToRay" static="true">
      <variant return-type="QSharedPointer&lt;RShape&gt;" access="public">
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;RShape&gt;" modifier="" name="shape" />
        </parameters>
      </variant>
    </function>
    <function name="rayToLine" static="true">
      <variant return-type="QSharedPointer&lt;RShape&gt;" access="public">
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;RShape&gt;" modifier="" name="shape" />
        </parameters>
      </variant>
    </function>
    <function name="scaleArc" static="true">
      <variant return-type="QSharedPointer&lt;RShape&gt;" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="transformArc" static="true">
      <variant return-type="QSharedPointer&lt;RShape&gt;" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
          <parameter const="false" type="RShapeTransformation" modifier="&amp;" name="transformation" />
        </parameters>
      </variant>
    </function>
    -->
    <function name="ellipseToArcCircleEllipse" static="true">
      <variant return-type="QSharedPointer&lt;RShape&gt;" access="public">
        <parameters>
          <parameter const="true" type="REllipse" modifier="&amp;" name="ellipse" />
        </parameters>
      </variant>
    </function>
    <function name="getErrorCode" static="true">
      <variant return-type="int" access="public">
        <parameters />
      </variant>
    </function>
    <function name="dump">
      <variant return-type="void" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="print" />
  </class>
  <class name="RSingleApplication" ownership="cpp">
    <super_list>
      <super name="QObject" />
      <super name="QCoreApplication" />
      <super name="QGuiApplication" />
      <super name="QApplication" />
    </super_list>
    <!--
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="int" modifier="&amp;" name="argc" />
          <parameter const="false" type="char" modifier="**" name="argv" />
          <parameter const="false" type="bool" modifier="" name="GUIenabled" default="true" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="id" />
          <parameter const="false" type="int" modifier="&amp;" name="argc" />
          <parameter const="false" type="char" modifier="**" name="argv" />
          <parameter const="false" type="bool" modifier="" name="GUIenabled" default="true" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="false" type="Display" modifier="*" name="dpy" />
          <parameter const="false" type="Qt::HANDLE" modifier="" name="visual" default="0" />
          <parameter const="false" type="Qt::HANDLE" modifier="" name="colormap" default="0" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="false" type="Display" modifier="*" name="dpy" />
          <parameter const="false" type="int" modifier="&amp;" name="argc" />
          <parameter const="false" type="char" modifier="**" name="argv" />
          <parameter const="false" type="Qt::HANDLE" modifier="" name="visual" default="0" />
          <parameter const="false" type="Qt::HANDLE" modifier="" name="cmap" default="0" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="false" type="Display" modifier="*" name="dpy" />
          <parameter const="true" type="QString" modifier="&amp;" name="appId" />
          <parameter const="false" type="int" modifier="" name="argc" />
          <parameter const="false" type="char" modifier="**" name="argv" />
          <parameter const="false" type="Qt::HANDLE" modifier="" name="visual" default="0" />
          <parameter const="false" type="Qt::HANDLE" modifier="" name="colormap" default="0" />
        </parameters>
      </variant>
    </constructor>
    -->
    <preproc plain="#if defined(Q_OS_X11)" />
    <preproc plain="#endif" />
    <function name="getInstance" static="true">
      <variant return-type="RSingleApplication*" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isRunning">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="id">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setActivationWindow">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QWidget" modifier="*" name="aw" />
          <parameter const="false" type="bool" modifier="" name="activateOnMessage" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="activationWindow">
      <variant return-type="QWidget*" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="sendMessage">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="message" />
          <parameter const="false" type="int" modifier="" name="timeout" default="5000" />
        </parameters>
      </variant>
    </function>
    <function name="activateWindow">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="messageReceived">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="message" />
        </parameters>
      </variant>
    </function>
    <function name="fileOpenRequestReceived">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fileName" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RSnap" ownership="cpp" inheritable="true">
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <enum name="Status">
      <key>Unknown</key>
      <key>Free</key>
      <key>Grid</key>
      <key>Endpoint</key>
      <key>OnEntity</key>
      <key>Center</key>
      <key>Middle</key>
      <key>Distance</key>
      <key>Intersection</key>
      <key>IntersectionManual</key>
      <key>Reference</key>
      <key>Perpendicular</key>
      <key>Tangential</key>
      <key>Coordinate</key>
      <key>CoordinatePolar</key>
    </enum>
    <function name="snap">
      <variant return-type="RVector" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="position" />
          <parameter const="false" type="RGraphicsView" modifier="&amp;" name="view" />
          <parameter const="false" type="double" modifier="" name="range" default="RNANDOUBLE" />
        </parameters>
      </variant>
      <variant return-type="RVector" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RMouseEvent" modifier="&amp;" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="showUiOptions">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hideUiOptions">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="suspendEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="finishEvent">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEntityIds">
      <variant return-type="QList&lt;REntity::Id&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStatus">
      <variant return-type="RSnap::Status" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setStatus">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RSnap::Status" modifier="" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="getLastSnap">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLastSnap">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="reset">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RSnapAuto" ownership="cpp">
    <super_list>
      <super name="RSnap" />
    </super_list>
    <enum name="Mode">
      <key>None</key>
      <key>Intersections</key>
      <key>EndPoints</key>
      <key>MiddlePoints</key>
      <key>CenterPoints</key>
      <key>PerpendicularPoints</key>
      <key>TangentialPoints</key>
      <key>ReferencePoints</key>
      <key>GridPoints</key>
      <key>PointsOnEntity</key>
      <key>FreePositioning</key>
    </enum>
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="snap">
      <variant return-type="RVector" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="position" />
          <parameter const="false" type="RGraphicsView" modifier="&amp;" name="view" />
          <parameter const="false" type="double" modifier="" name="range" default="RNANDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="init" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="force" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getModes" static="true">
      <variant return-type="RSnapAuto::Modes" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setModes" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters>
          <parameter const="false" type="RSnapAuto::Modes" modifier="" name="m" />
        </parameters>
      </variant>
    </function>
    <function name="setMode" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters>
          <parameter const="false" type="RSnapAuto::Mode" modifier="" name="mode" />
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getMode" static="true">
      <variant return-type="bool" static="true" access="public">
        <parameters>
          <parameter const="false" type="RSnapAuto::Mode" modifier="" name="mode" />
        </parameters>
      </variant>
    </function>
    <function name="setIntersections" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getIntersections" static="true">
      <variant return-type="bool" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setEndPoints" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getEndPoints" static="true">
      <variant return-type="bool" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setMiddlePoints" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getMiddlePoints" static="true">
      <variant return-type="bool" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCenterPoints" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getCenterPoints" static="true">
      <variant return-type="bool" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPerpendicular" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getPerpendicular" static="true">
      <variant return-type="bool" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setTangential" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getTangential" static="true">
      <variant return-type="bool" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setReferencePoints" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getReferencePoints" static="true">
      <variant return-type="bool" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setGridPoints" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getGridPoints" static="true">
      <variant return-type="bool" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPointsOnEntity" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getPointsOnEntity" static="true">
      <variant return-type="bool" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setFreePositioning" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getFreePositioning" static="true">
      <variant return-type="bool" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="reset">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RSnapCenter" ownership="cpp">
    <super_list>
      <super name="RSnap" />
      <super name="RSnapEntityBase" />
    </super_list>
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <!--
    <function name="snapEntity">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" access="protected">
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;REntity&gt;" modifier="" name="entity" />
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" />
          <parameter const="false" type="RGraphicsView" modifier="&amp;" name="view" />
          <parameter const="false" type="QList&lt;REntity::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
        </parameters>
      </variant>
    </function>
    -->
  </class>
  <class name="RSnapDistance" ownership="cpp" inheritable="true">
    <super_list>
      <super name="RSnap" />
      <super name="RSnapEntityBase" />
    </super_list>
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="showUiOptions">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hideUiOptions">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDistance">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="d" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="snapEntity">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" access="protected">
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;REntity&gt;" modifier="" name="entity" />
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" />
          <parameter const="false" type="RGraphicsView" modifier="&amp;" name="view" />
          <parameter const="false" type="QList&lt;REntity::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
        </parameters>
      </variant>
    </function>
    -->
  </class>
  <class name="RSnapEnd" ownership="cpp">
    <super_list>
      <super name="RSnap" />
      <super name="RSnapEntityBase" />
    </super_list>
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <!--
    <function name="snapEntity">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" access="protected">
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;REntity&gt;" modifier="" name="entity" />
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" />
          <parameter const="false" type="RGraphicsView" modifier="&amp;" name="view" />
          <parameter const="false" type="QList&lt;REntity::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
        </parameters>
      </variant>
    </function>
    -->
  </class>
  <class name="RSnapEntityBase" ownership="cpp">
    <super_list>
      <super name="RSnap" />
    </super_list>
    <!--
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RSnap::Status" modifier="" name="s" />
        </parameters>
      </variant>
    </constructor>
    -->
    <function name="snap">
      <variant return-type="RVector" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="position" />
          <parameter const="false" type="RGraphicsView" modifier="&amp;" name="view" />
          <parameter const="true" type="QSet&lt;REntity::Id&gt;" modifier="&amp;" name="candidates" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" />
        </parameters>
      </variant>
      <variant return-type="RVector" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="position" />
          <parameter const="false" type="RGraphicsView" modifier="&amp;" name="view" />
          <parameter const="false" type="double" modifier="" name="range" default="RNANDOUBLE" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="snapEntity">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" access="protected">
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;REntity&gt;" modifier="" name="entity" />
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" />
          <parameter const="false" type="RGraphicsView" modifier="&amp;" name="view" />
          <parameter const="false" type="QList&lt;REntity::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
        </parameters>
      </variant>
    </function>
    -->
  </class>
  <class name="RSnapFree" ownership="cpp">
    <super_list>
      <super name="RSnap" />
    </super_list>
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="snap">
      <variant return-type="RVector" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="position" />
          <parameter const="false" type="RGraphicsView" modifier="&amp;" name="view" />
          <parameter const="false" type="double" modifier="" name="range" default="RNANDOUBLE" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RSnapGrid" ownership="cpp">
    <super_list>
      <super name="RSnap" />
    </super_list>
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="snap">
      <variant return-type="RVector" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="position" />
          <parameter const="false" type="RGraphicsView" modifier="&amp;" name="view" />
          <parameter const="false" type="double" modifier="" name="range" default="RNANDOUBLE" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RSnapIntersection" ownership="cpp">
    <super_list>
      <super name="RSnap" />
    </super_list>
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="snap">
      <variant return-type="RVector" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="position" />
          <parameter const="false" type="RGraphicsView" modifier="&amp;" name="view" />
          <parameter const="false" type="double" modifier="" name="range" default="RNANDOUBLE" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RSnapListener" ownership="cpp">
    <function name="updateSnap">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="di" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RSnapMiddle" ownership="cpp">
    <super_list>
      <super name="RSnap" />
      <super name="RSnapEntityBase" />
    </super_list>
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <!--
    <function name="snapEntity">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" access="protected">
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;REntity&gt;" modifier="" name="entity" />
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" />
          <parameter const="false" type="RGraphicsView" modifier="&amp;" name="view" />
          <parameter const="false" type="QList&lt;REntity::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
        </parameters>
      </variant>
    </function>
    -->
  </class>
  <class name="RSnapOnEntity" ownership="cpp">
    <super_list>
      <super name="RSnap" />
      <super name="RSnapEntityBase" />
    </super_list>
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <!--
    <function name="snapEntity">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" access="protected">
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;REntity&gt;" modifier="" name="entity" />
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" />
          <parameter const="false" type="RGraphicsView" modifier="&amp;" name="view" />
          <parameter const="false" type="QList&lt;REntity::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
        </parameters>
      </variant>
    </function>
    -->
  </class>
  <class name="RSnapPerpendicular" ownership="cpp">
    <super_list>
      <super name="RSnap" />
      <super name="RSnapEntityBase" />
    </super_list>
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <!--
    <function name="snapEntity">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" access="protected">
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;REntity&gt;" modifier="" name="entity" />
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" />
          <parameter const="false" type="RGraphicsView" modifier="&amp;" name="view" />
          <parameter const="false" type="QList&lt;REntity::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
        </parameters>
      </variant>
    </function>
    -->
  </class>
  <class name="RSnapReference" ownership="cpp" inheritable="true">
    <super_list>
      <super name="RSnap" />
      <super name="RSnapEntityBase" />
    </super_list>
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <!--
    <function name="snapEntity">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" access="protected">
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;REntity&gt;" modifier="" name="entity" />
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" />
          <parameter const="false" type="RGraphicsView" modifier="&amp;" name="view" />
          <parameter const="false" type="QList&lt;REntity::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
        </parameters>
      </variant>
    </function>
    -->
  </class>
  <class name="RSnapRestriction" ownership="cpp" inheritable="true">
    <function name="restrictSnap">
      <variant return-type="RVector" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="position" />
          <parameter const="true" type="RVector" modifier="&amp;" name="relativeZero" />
        </parameters>
      </variant>
    </function>
    <function name="showUiOptions">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hideUiOptions">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLastSnap">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="reset">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RSnapTangential" ownership="cpp">
    <super_list>
      <super name="RSnap" />
      <super name="RSnapEntityBase" />
    </super_list>
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <!--
    <function name="snapEntity">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" access="protected">
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;REntity&gt;" modifier="" name="entity" />
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" />
          <parameter const="false" type="RGraphicsView" modifier="&amp;" name="view" />
          <parameter const="false" type="QList&lt;REntity::Id&gt;" modifier="*" name="subEntityId" default="NULL" />
        </parameters>
      </variant>
    </function>
    -->
  </class>
  <class name="RSolidData">
    <super_list>
      <super name="REntityData" />
      <super name="RPolyline" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="p2" />
          <parameter const="true" type="RVector" modifier="&amp;" name="p3" />
          <parameter const="true" type="RVector" modifier="&amp;" name="p4" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="p2" />
          <parameter const="true" type="RVector" modifier="&amp;" name="p3" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RTriangle" modifier="&amp;" name="triangle" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="setZ">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="z" />
        </parameters>
      </variant>
    </function>
    <function name="to2D">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="ignoreEmpty" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getMiddlePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getCenterPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getArcReferencePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
        </parameters>
      </variant>
    </function>
    <function name="getPointsWithDistanceToEnd">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="int" modifier="" name="from" default="RS::FromAny" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getIntersectionPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="REntityData" modifier="&amp;" name="other" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="bool" modifier="" name="same" default="false" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="true" />
          <!--
          <parameter const="false" type="QList&lt;QPair&lt;RObject::Id,RObject::Id&gt;&gt;" modifier="*" name="entityIds" default="NULL" />
          -->
        </parameters>
      </variant>
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getVectorTo">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="getDistanceTo">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="range" default="0.0" />
          <parameter const="false" type="bool" modifier="" name="draft" default="false" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="intersectsWith">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="axis1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="axis2" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="flipHorizontal">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="flipVertical">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="stretch">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="area" />
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="getStartPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection1">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection2">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="reverse">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getVertexAt">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="countVertices">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTrimEnd">
      <variant return-type="RS::Ending" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" />
        </parameters>
      </variant>
    </function>
    <function name="trimStartPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="trimEndPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getReferencePoints">
      <variant return-type="QList&lt;RRefPoint&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="hint" default="RS::RenderTop" />
        </parameters>
      </variant>
    </function>
    <function name="moveReferencePoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="targetPoint" />
          <parameter const="false" type="Qt::KeyboardModifiers" modifier="" name="modifiers" default="Qt::NoModifier" />
        </parameters>
      </variant>
    </function>
    <function name="castToShape">
      <variant return-type="RShape*" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getShapes">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="false" />
          <parameter const="false" type="bool" modifier="" name="segment" default="false" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="entityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getGeometry">
      <variant return-type="RPolyline" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RSolidEntity" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
      <super name="REntity" />
    </super_list>
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyProtected" />
    <property static="true" type="RPropertyTypeId" name="PropertyWorkingSet" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyLayer" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetype" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetypeScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineweight" />
    <property static="true" type="RPropertyTypeId" name="PropertyColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDisplayedColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDrawOrder" />
    <property static="true" type="RPropertyTypeId" name="PropertyPoint1X" />
    <property static="true" type="RPropertyTypeId" name="PropertyPoint1Y" />
    <property static="true" type="RPropertyTypeId" name="PropertyPoint1Z" />
    <property static="true" type="RPropertyTypeId" name="PropertyPoint2X" />
    <property static="true" type="RPropertyTypeId" name="PropertyPoint2Y" />
    <property static="true" type="RPropertyTypeId" name="PropertyPoint2Z" />
    <property static="true" type="RPropertyTypeId" name="PropertyPoint3X" />
    <property static="true" type="RPropertyTypeId" name="PropertyPoint3Y" />
    <property static="true" type="RPropertyTypeId" name="PropertyPoint3Z" />
    <property static="true" type="RPropertyTypeId" name="PropertyPoint4X" />
    <property static="true" type="RPropertyTypeId" name="PropertyPoint4Y" />
    <property static="true" type="RPropertyTypeId" name="PropertyPoint4Z" />
    <property static="true" type="RPropertyTypeId" name="PropertyLength" />
    <property static="true" type="RPropertyTypeId" name="PropertyTotalLength" />
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="RSolidData" modifier="&amp;" name="data" />
        </parameters>
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStaticPropertyTypeIds" static="true">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RSolidEntity*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="exportEntity">
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RExporter" modifier="&amp;" name="e" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
          <parameter const="false" type="bool" modifier="" name="forceSelected" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getData">
      <variant return-type="RSolidData&amp;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getVertexAt">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="countVertices">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStartPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection1">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection2">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="reverse">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTrimEnd">
      <variant return-type="RS::Ending" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" />
        </parameters>
      </variant>
    </function>
    <function name="trimStartPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="trimEndPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getLength">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getExploded">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="print" />
  </class>
  <class name="RSpatialIndex" ownership="cpp">
    <!--
    <super_list>
      <super name="RRequireHeap" />
    </super_list>
    -->
    <!--
    <downcasts>
      <class name="RSpatialIndexPro" type="40000" />
    </downcasts>
    -->
    <function name="getSIId" static="true">
      <variant return-type="qint64" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="id" />
          <parameter const="false" type="int" modifier="" name="pos" />
        </parameters>
      </variant>
    </function>
    <function name="getId" static="true">
      <variant return-type="int" access="public">
        <parameters>
          <parameter const="false" type="qint64" modifier="" name="siid" />
        </parameters>
      </variant>
    </function>
    <function name="getPos" static="true">
      <variant return-type="int" access="public">
        <parameters>
          <parameter const="false" type="qint64" modifier="" name="siid" />
        </parameters>
      </variant>
    </function>
    <function name="create">
      <variant return-type="RSpatialIndex*" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clear">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <!--
    <function name="bulkLoad">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;int&gt;" modifier="&amp;" name="ids" />
          <parameter const="true" type="QList&lt;QList&lt;RBox&gt;&gt;" modifier="&amp;" name="bbs" />
        </parameters>
      </variant>
    </function>
    -->
    <function name="bulkLoadSimple">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;int&gt;" modifier="&amp;" name="ids" />
          <parameter const="true" type="QList&lt;RBox&gt;" modifier="&amp;" name="bbs" />
        </parameters>
      </variant>
    </function>
    <function name="addToIndex">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="id" />
          <parameter const="false" type="int" modifier="" name="pos" />
          <parameter const="false" type="double" modifier="" name="x1" />
          <parameter const="false" type="double" modifier="" name="y1" />
          <parameter const="false" type="double" modifier="" name="z1" />
          <parameter const="false" type="double" modifier="" name="x2" />
          <parameter const="false" type="double" modifier="" name="y2" />
          <parameter const="false" type="double" modifier="" name="z2" />
        </parameters>
      </variant>
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="id" />
          <parameter const="false" type="int" modifier="" name="pos" />
          <parameter const="true" type="RBox" modifier="&amp;" name="bb" />
        </parameters>
      </variant>
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="id" />
          <parameter const="true" type="QList&lt;RBox&gt;" modifier="&amp;" name="bbs" />
        </parameters>
      </variant>
    </function>
    <function name="removeFromIndex">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="id" />
          <parameter const="false" type="int" modifier="" name="pos" />
          <parameter const="false" type="double" modifier="" name="x1" />
          <parameter const="false" type="double" modifier="" name="y1" />
          <parameter const="false" type="double" modifier="" name="z1" />
          <parameter const="false" type="double" modifier="" name="x2" />
          <parameter const="false" type="double" modifier="" name="y2" />
          <parameter const="false" type="double" modifier="" name="z2" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="id" />
          <parameter const="false" type="int" modifier="" name="pos" />
          <parameter const="true" type="RBox" modifier="&amp;" name="bb" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="id" />
          <parameter const="true" type="QList&lt;RBox&gt;" modifier="&amp;" name="bb" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="queryIntersected">
      <variant return-type="QMap&lt;int,QSet&lt;int&gt;&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="x1" />
          <parameter const="false" type="double" modifier="" name="y1" />
          <parameter const="false" type="double" modifier="" name="z1" />
          <parameter const="false" type="double" modifier="" name="x2" />
          <parameter const="false" type="double" modifier="" name="y2" />
          <parameter const="false" type="double" modifier="" name="z2" />
          <parameter const="false" type="RSpatialIndexVisitor" modifier="*" name="dataVisitor" default="NULL" />
        </parameters>
      </variant>
      <variant return-type="QMap&lt;int,QSet&lt;int&gt;&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="b" />
          <parameter const="false" type="RSpatialIndexVisitor" modifier="*" name="dataVisitor" default="NULL" />
        </parameters>
      </variant>
    </function>
    -->
    <!--
    <function name="queryContained">
      <variant return-type="QMap&lt;int,QSet&lt;int&gt;&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="x1" />
          <parameter const="false" type="double" modifier="" name="y1" />
          <parameter const="false" type="double" modifier="" name="z1" />
          <parameter const="false" type="double" modifier="" name="x2" />
          <parameter const="false" type="double" modifier="" name="y2" />
          <parameter const="false" type="double" modifier="" name="z2" />
          <parameter const="false" type="RSpatialIndexVisitor" modifier="*" name="dataVisitor" default="NULL" />
        </parameters>
      </variant>
      <variant return-type="QMap&lt;int,QSet&lt;int&gt;&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="b" />
          <parameter const="false" type="RSpatialIndexVisitor" modifier="*" name="dataVisitor" default="NULL" />
        </parameters>
      </variant>
    </function>
    -->
    <function name="queryContainedIds">
      <variant return-type="QList&lt;int&gt;" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="x1" />
          <parameter const="false" type="double" modifier="" name="y1" />
          <parameter const="false" type="double" modifier="" name="z1" />
          <parameter const="false" type="double" modifier="" name="x2" />
          <parameter const="false" type="double" modifier="" name="y2" />
          <parameter const="false" type="double" modifier="" name="z2" />
          <!--
          <parameter const="false" type="RSpatialIndexVisitor" modifier="*" name="dataVisitor" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <!--
    <function name="queryNearestNeighbor">
      <variant return-type="QMap&lt;int,QSet&lt;int&gt;&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="unsigned int" modifier="" name="k" />
          <parameter const="false" type="double" modifier="" name="x" />
          <parameter const="false" type="double" modifier="" name="y" />
          <parameter const="false" type="double" modifier="" name="z" />
          <parameter const="false" type="RSpatialIndexVisitor" modifier="*" name="dataVisitor" default="NULL" />
        </parameters>
      </variant>
      <variant return-type="QPair&lt;int,int&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="x" />
          <parameter const="false" type="double" modifier="" name="y" />
          <parameter const="false" type="double" modifier="" name="z" />
        </parameters>
      </variant>
    </function>
    -->
  </class>
  <!--
  <class name="RSiDataStream">
    <super_list>
      <super name="" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="QList&lt;int&gt;" modifier="&amp;" name="ids" />
          <parameter const="true" type="QList&lt;QList&lt;RBox&gt;&gt;" modifier="&amp;" name="bbs" />
        </parameters>
      </variant>
    </constructor>
    <function name="getNext">
      <variant return-type="SpatialIndex::IData*" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasNext">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="size">
      <variant return-type="uint32_t" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="rewind">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  -->
  <!--
  <class name="RSiGetRegionVisitor">
    <super_list>
      <super name="RSpatialIndexVisitor" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="int" modifier="" name="id" />
        </parameters>
      </variant>
    </constructor>
    <function name="visitData">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="id" />
          <parameter const="false" type="int" modifier="" name="pos" />
          <parameter const="false" type="double" modifier="" name="x1" />
          <parameter const="false" type="double" modifier="" name="y1" />
          <parameter const="false" type="double" modifier="" name="z1" />
          <parameter const="false" type="double" modifier="" name="x2" />
          <parameter const="false" type="double" modifier="" name="y2" />
          <parameter const="false" type="double" modifier="" name="z2" />
        </parameters>
      </variant>
    </function>
    <function name="visitNode">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="" />
          <parameter const="false" type="double" modifier="" name="" />
          <parameter const="false" type="double" modifier="" name="" />
          <parameter const="false" type="double" modifier="" name="" />
          <parameter const="false" type="double" modifier="" name="" />
          <parameter const="false" type="double" modifier="" name="" />
        </parameters>
      </variant>
    </function>
  </class>
  -->
  <class name="RSpatialIndexNavel" ownership="cpp">
    <super_list>
      <super name="RSpatialIndex" />
    </super_list>
    <!--
    <class name="RSiRegion">
      <super_list>
        <super name="" />
      </super_list>
      <constructor>
        <variant>
          <parameters>
            <parameter const="false" type="double" modifier="" name="x1" />
            <parameter const="false" type="double" modifier="" name="y1" />
            <parameter const="false" type="double" modifier="" name="z1" />
            <parameter const="false" type="double" modifier="" name="x2" />
            <parameter const="false" type="double" modifier="" name="y2" />
            <parameter const="false" type="double" modifier="" name="z2" />
          </parameters>
        </variant>
      </constructor>
    </class>
    -->
    <!--
    <class name="RSiPoint">
      <super_list>
        <super name="" />
      </super_list>
      <constructor>
        <variant>
          <parameters>
            <parameter const="false" type="double" modifier="" name="x" />
            <parameter const="false" type="double" modifier="" name="y" />
            <parameter const="false" type="double" modifier="" name="z" />
          </parameters>
        </variant>
      </constructor>
    </class>
    -->
    <!--
    <class name="Visitor">
      <super_list>
        <super name="" />
      </super_list>
      <constructor>
        <variant>
          <parameters>
            <parameter const="false" type="QMap&lt;int,QSet&lt;int&gt;&gt;" modifier="&amp;" name="ids" />
            <parameter const="false" type="RSpatialIndexVisitor" modifier="*" name="dataVisitor" default="NULL" />
          </parameters>
        </variant>
      </constructor>
      <function name="visitNode">
        <variant return-type="void" access="public">
          <parameters>
            <parameter const="true" type="SpatialIndex::INode" modifier="&amp;" name="n" />
          </parameters>
        </variant>
      </function>
      <function name="visitData">
        <variant return-type="void" access="public">
          <parameters>
            <parameter const="true" type="SpatialIndex::IData" modifier="&amp;" name="d" />
          </parameters>
        </variant>
        <variant return-type="void" access="public">
          <parameters>
            <parameter const="false" type="std::vector&lt;constSpatialIndex::IData*&gt;" modifier="&amp;" name="v" />
          </parameters>
        </variant>
      </function>
    </class>
    -->
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="create">
      <variant return-type="RSpatialIndex*" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clear">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <!--
    <function name="bulkLoad">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;int&gt;" modifier="&amp;" name="ids" />
          <parameter const="true" type="QList&lt;QList&lt;RBox&gt;&gt;" modifier="&amp;" name="bbs" />
        </parameters>
      </variant>
    </function>
    -->
    <function name="addToIndex">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="id" />
          <parameter const="false" type="int" modifier="" name="pos" />
          <parameter const="false" type="double" modifier="" name="x1" />
          <parameter const="false" type="double" modifier="" name="y1" />
          <parameter const="false" type="double" modifier="" name="z1" />
          <parameter const="false" type="double" modifier="" name="x2" />
          <parameter const="false" type="double" modifier="" name="y2" />
          <parameter const="false" type="double" modifier="" name="z2" />
        </parameters>
      </variant>
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="id" />
          <parameter const="false" type="int" modifier="" name="pos" />
          <parameter const="true" type="RBox" modifier="&amp;" name="bb" />
        </parameters>
      </variant>
    </function>
    <function name="removeFromIndex">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="id" />
          <parameter const="false" type="int" modifier="" name="pos" />
          <parameter const="false" type="double" modifier="" name="x1" />
          <parameter const="false" type="double" modifier="" name="y1" />
          <parameter const="false" type="double" modifier="" name="z1" />
          <parameter const="false" type="double" modifier="" name="x2" />
          <parameter const="false" type="double" modifier="" name="y2" />
          <parameter const="false" type="double" modifier="" name="z2" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="id" />
          <parameter const="false" type="int" modifier="" name="pos" />
          <parameter const="true" type="RBox" modifier="&amp;" name="bb" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="id" />
          <parameter const="true" type="QList&lt;RBox&gt;" modifier="&amp;" name="bb" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="queryIntersected">
      <variant return-type="QMap&lt;int,QSet&lt;int&gt;&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="x1" />
          <parameter const="false" type="double" modifier="" name="y1" />
          <parameter const="false" type="double" modifier="" name="z1" />
          <parameter const="false" type="double" modifier="" name="x2" />
          <parameter const="false" type="double" modifier="" name="y2" />
          <parameter const="false" type="double" modifier="" name="z2" />
          <parameter const="false" type="RSpatialIndexVisitor" modifier="*" name="dataVisitor" default="NULL" />
        </parameters>
      </variant>
    </function>
    -->
    <function name="queryIntersectedSimple">
      <variant return-type="QList&lt;int&gt;" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="b" />
        </parameters>
      </variant>
    </function>
    <function name="queryContained">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="x1" />
          <parameter const="false" type="double" modifier="" name="y1" />
          <parameter const="false" type="double" modifier="" name="z1" />
          <parameter const="false" type="double" modifier="" name="x2" />
          <parameter const="false" type="double" modifier="" name="y2" />
          <parameter const="false" type="double" modifier="" name="z2" />
          <parameter const="false" type="RSpatialIndexVisitor" modifier="*" name="dataVisitor" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="queryNearestNeighbor">
      <variant return-type="QPair&lt;int,int&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="x" />
          <parameter const="false" type="double" modifier="" name="y" />
          <parameter const="false" type="double" modifier="" name="z" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RSpatialIndexSimple" ownership="cpp">
    <super_list>
      <super name="RSpatialIndex" />
    </super_list>
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="create">
      <variant return-type="RSpatialIndex*" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clear">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="addToIndex">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="id" />
          <parameter const="false" type="int" modifier="" name="pos" />
          <parameter const="false" type="double" modifier="" name="x1" />
          <parameter const="false" type="double" modifier="" name="y1" />
          <parameter const="false" type="double" modifier="" name="z1" />
          <parameter const="false" type="double" modifier="" name="x2" />
          <parameter const="false" type="double" modifier="" name="y2" />
          <parameter const="false" type="double" modifier="" name="z2" />
        </parameters>
      </variant>
    </function>
    <function name="removeFromIndex">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="id" />
          <parameter const="false" type="int" modifier="" name="pos" />
          <parameter const="false" type="double" modifier="" name="x1" />
          <parameter const="false" type="double" modifier="" name="y1" />
          <parameter const="false" type="double" modifier="" name="z1" />
          <parameter const="false" type="double" modifier="" name="x2" />
          <parameter const="false" type="double" modifier="" name="y2" />
          <parameter const="false" type="double" modifier="" name="z2" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="id" />
          <parameter const="true" type="QList&lt;RBox&gt;" modifier="&amp;" name="bb" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="queryIntersected">
      <variant return-type="QMap&lt;int,QSet&lt;int&gt;&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="x1" />
          <parameter const="false" type="double" modifier="" name="y1" />
          <parameter const="false" type="double" modifier="" name="z1" />
          <parameter const="false" type="double" modifier="" name="x2" />
          <parameter const="false" type="double" modifier="" name="y2" />
          <parameter const="false" type="double" modifier="" name="z2" />
          <parameter const="false" type="RSpatialIndexVisitor" modifier="*" name="dataVisitor" default="NULL" />
        </parameters>
      </variant>
    </function>
    -->
    <!--
    <function name="queryContained">
      <variant return-type="QMap&lt;int,QSet&lt;int&gt;&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="x1" />
          <parameter const="false" type="double" modifier="" name="y1" />
          <parameter const="false" type="double" modifier="" name="z1" />
          <parameter const="false" type="double" modifier="" name="x2" />
          <parameter const="false" type="double" modifier="" name="y2" />
          <parameter const="false" type="double" modifier="" name="z2" />
          <parameter const="false" type="RSpatialIndexVisitor" modifier="*" name="dataVisitor" default="NULL" />
        </parameters>
      </variant>
    </function>
    -->
    <!--
    <function name="queryNearestNeighbor">
      <variant return-type="QMap&lt;int,QSet&lt;int&gt;&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="uint" modifier="" name="k" />
          <parameter const="false" type="double" modifier="" name="x" />
          <parameter const="false" type="double" modifier="" name="y" />
          <parameter const="false" type="double" modifier="" name="z" />
          <parameter const="false" type="RSpatialIndexVisitor" modifier="*" name="dataVisitor" default="NULL" />
        </parameters>
      </variant>
    </function>
    -->
  </class>
  <class name="RSpatialIndexVisitor" ownership="cpp">
    <!--
    <function name="visitData">
      <variant return-type="void" virtual="true" pure-virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="id" />
          <parameter const="false" type="int" modifier="" name="pos" />
          <parameter const="false" type="double" modifier="" name="x1" />
          <parameter const="false" type="double" modifier="" name="y1" />
          <parameter const="false" type="double" modifier="" name="z1" />
          <parameter const="false" type="double" modifier="" name="x2" />
          <parameter const="false" type="double" modifier="" name="y2" />
          <parameter const="false" type="double" modifier="" name="z2" />
        </parameters>
      </variant>
    </function>
    <function name="visitNode">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="x1" />
          <parameter const="false" type="double" modifier="" name="y1" />
          <parameter const="false" type="double" modifier="" name="z1" />
          <parameter const="false" type="double" modifier="" name="x2" />
          <parameter const="false" type="double" modifier="" name="y2" />
          <parameter const="false" type="double" modifier="" name="z2" />
        </parameters>
      </variant>
    </function>
    -->
  </class>
  <class name="RSpatialIndexVisitorAdapter" ownership="cpp">
    <super_list>
      <super name="RSpatialIndexVisitor" />
    </super_list>
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="visitData">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="id" />
          <parameter const="false" type="int" modifier="" name="pos" />
          <parameter const="false" type="double" modifier="" name="x1" />
          <parameter const="false" type="double" modifier="" name="y1" />
          <parameter const="false" type="double" modifier="" name="z1" />
          <parameter const="false" type="double" modifier="" name="x2" />
          <parameter const="false" type="double" modifier="" name="y2" />
          <parameter const="false" type="double" modifier="" name="z2" />
        </parameters>
      </variant>
    </function>
    <function name="visitNode">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="x1" />
          <parameter const="false" type="double" modifier="" name="y1" />
          <parameter const="false" type="double" modifier="" name="z1" />
          <parameter const="false" type="double" modifier="" name="x2" />
          <parameter const="false" type="double" modifier="" name="y2" />
          <parameter const="false" type="double" modifier="" name="z2" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RSpline" sharedpointer="true">
    <super_list>
      <super name="RShape" />
      <super name="RExplodable" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="controlPoints" />
          <parameter const="false" type="int" modifier="" name="degree" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RSpline" modifier="&amp;" name="other" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getShapeType">
      <variant return-type="RShape::Type" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RSpline*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isDirected">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="copySpline">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RSpline" modifier="&amp;" name="other" />
        </parameters>
      </variant>
    </function>
    <function name="createSplinesFromArc" static="true">
      <variant return-type="QList&lt;RSpline&gt;" access="public">
        <parameters>
          <parameter const="true" type="RArc" modifier="&amp;" name="arc" />
        </parameters>
      </variant>
    </function>
    <function name="createBezierFromSmallArc" static="true">
      <variant return-type="RSpline" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="r" />
          <parameter const="false" type="double" modifier="" name="a1" />
          <parameter const="false" type="double" modifier="" name="a2" />
        </parameters>
      </variant>
    </function>
    <function name="setZ">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="z" />
        </parameters>
      </variant>
    </function>
    <function name="getVectorProperties">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getIntProperties">
      <variant return-type="QList&lt;int&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDoubleProperties">
      <variant return-type="QList&lt;double&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBoolProperties">
      <variant return-type="QList&lt;bool&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isInterpolated">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="appendControlPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="appendControlPoints">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="points" />
        </parameters>
      </variant>
    </function>
    <function name="removeLastControlPoint">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setControlPoints">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="points" />
        </parameters>
      </variant>
    </function>
    <function name="getControlPoints">
      <variant return-type="QList&lt;RVector&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getControlPointsWrapped">
      <variant return-type="QList&lt;RVector&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="countControlPoints">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getControlPointAt">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="appendFitPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="prependFitPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="insertFitPointAt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="t" />
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="removeFitPointAt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="removeFirstFitPoint">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="removeLastFitPoint">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setFitPoints">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="points" />
        </parameters>
      </variant>
    </function>
    <function name="getFitPoints">
      <variant return-type="QList&lt;RVector&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="countFitPoints">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasFitPoints">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getFitPointAt">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="getKnotVector">
      <variant return-type="QList&lt;double&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getActualKnotVector">
      <variant return-type="QList&lt;double&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setKnotVector">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;double&gt;" modifier="&amp;" name="knots" />
        </parameters>
      </variant>
    </function>
    <function name="appendKnot">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="k" />
        </parameters>
      </variant>
    </function>
    <function name="getWeights">
      <variant return-type="QList&lt;double&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setWeights">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QList&lt;double&gt;" modifier="&amp;" name="w" />
        </parameters>
      </variant>
    </function>
    <function name="setDegree">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="d" />
        </parameters>
      </variant>
    </function>
    <function name="getDegree">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getOrder">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPeriodic">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isClosed">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isGeometricallyClosed">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="isPeriodic">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection1">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection2">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSideOfPoint">
      <variant return-type="RS::Side" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="getStartPoint">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoint">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setStartPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="setEndPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="setTangents">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="start" />
          <parameter const="true" type="RVector" modifier="&amp;" name="end" />
        </parameters>
      </variant>
    </function>
    <function name="unsetTangents">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setTangentAtStart">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="t" />
        </parameters>
      </variant>
    </function>
    <function name="getTangentAtStart">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="unsetTangentAtStart">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setTangentAtEnd">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="t" />
        </parameters>
      </variant>
    </function>
    <function name="getTangentAtEnd">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="unsetTangentAtEnd">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="updateTangentsPeriodic">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLength">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPointAt">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="t" />
        </parameters>
      </variant>
    </function>
    <function name="getPointAtDistance">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
        </parameters>
      </variant>
    </function>
    <function name="getAngleAt">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="RS::From" modifier="" name="from" default="RS::FromStart" />
        </parameters>
      </variant>
    </function>
    <function name="getEndPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMiddlePoint">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMiddlePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCenterPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPointsWithDistanceToEnd">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="int" modifier="" name="from" default="RS::FromAny" />
        </parameters>
      </variant>
    </function>
    <function name="getPointCloud">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="segmentLength" />
        </parameters>
      </variant>
    </function>
    <function name="getVectorTo">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="isOnShape">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="tolerance" default="RDEFAULT_TOLERANCE_1E_MIN4" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="flipHorizontal">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="flipVertical">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="reverse">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="stretch">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="area" />
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="getTransformed">
      <variant return-type="QSharedPointer&lt;RShape&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="QTransform" modifier="&amp;" name="transform" />
        </parameters>
      </variant>
    </function>
    <function name="getTrimEnd">
      <variant return-type="RS::Ending" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" />
        </parameters>
      </variant>
    </function>
    <function name="trimStartPoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="trimDist" />
        </parameters>
      </variant>
    </function>
    <function name="trimEndPoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="trimDist" />
        </parameters>
      </variant>
    </function>
    <function name="getDistanceFromStart">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="splitAtPoints">
      <variant return-type="QList&lt;RSpline&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="points" />
        </parameters>
      </variant>
    </function>
    <function name="splitAtParams">
      <variant return-type="QList&lt;RSpline&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;double&gt;" modifier="&amp;" name="params" />
        </parameters>
      </variant>
    </function>
    <function name="toPolyline">
      <variant return-type="RPolyline" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="segments" />
        </parameters>
      </variant>
    </function>
    <function name="approximateWithArcs">
      <variant return-type="RPolyline" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="tolerance" />
          <parameter const="false" type="double" modifier="" name="radiusLimit" default="RDEFAULT_MIN1" />
        </parameters>
      </variant>
    </function>
    <function name="getExploded">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="segments" default="RDEFAULT_MIN1" />
        </parameters>
      </variant>
    </function>
    <function name="getExplodedBezier">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="segments" />
        </parameters>
      </variant>
    </function>
    <function name="getExplodedWithSegmentLength">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="segmentLength" />
        </parameters>
      </variant>
    </function>
    <function name="getBezierSegments">
      <variant return-type="QList&lt;RSpline&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
        </parameters>
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTDelta">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTMin">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTMax">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTAtPoint">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="getTAtDistance">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
        </parameters>
      </variant>
    </function>
    <function name="getDistanceAtT">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="t" />
        </parameters>
      </variant>
    </function>
    <function name="getSegments">
      <variant return-type="QList&lt;RSpline&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="points" />
        </parameters>
      </variant>
    </function>
    <function name="getDiscontinuities">
      <variant return-type="QList&lt;RVector&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="simplify">
      <variant return-type="RSpline" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="tolerance" />
        </parameters>
      </variant>
    </function>
    <function name="updateFromControlPoints">
      <variant return-type="void" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="updateFromFitPoints">
      <variant return-type="void" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="update">
      <variant return-type="void" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="splitAt">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="points" />
        </parameters>
      </variant>
    </function>
    <function name="isDirty">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSelfIntersectionPoints">
      <variant return-type="QList&lt;RVector&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="hasProxy" static="true">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <!--
    <function name="setSplineProxy" static="true">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RSplineProxy" modifier="*" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getSplineProxy" static="true">
      <variant return-type="RSplineProxy*" access="public">
        <parameters />
      </variant>
    </function>
    -->
    <function name="appendToExploded" />
    <function name="invalidate" />
    <function name="updateInternal" />
    <function name="updateBoundingBox" />
    <function name="print" />
    <preproc plain="#ifndef R_NO_OPENNURBS" />
    <preproc plain="#endif" />
    <preproc plain="#if QT_VERSION&gt;=0x060000" />
    <function name="copy">
      <variant return-type="RSpline" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <preproc plain="#endif" />
  </class>
  <class name="RSplineData">
    <super_list>
      <super name="REntityData" />
      <super name="RSpline" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RSpline" modifier="&amp;" name="spline" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="setZ">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="z" />
        </parameters>
      </variant>
    </function>
    <function name="to2D">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="ignoreEmpty" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getMiddlePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getCenterPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getArcReferencePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
        </parameters>
      </variant>
    </function>
    <function name="getPointsWithDistanceToEnd">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="int" modifier="" name="from" default="RS::FromAny" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getIntersectionPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="REntityData" modifier="&amp;" name="other" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="bool" modifier="" name="same" default="false" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="true" />
          <!--
          <parameter const="false" type="QList&lt;QPair&lt;RObject::Id,RObject::Id&gt;&gt;" modifier="*" name="entityIds" default="NULL" />
          -->
        </parameters>
      </variant>
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getVectorTo">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="getDistanceTo">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="range" default="0.0" />
          <parameter const="false" type="bool" modifier="" name="draft" default="false" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="intersectsWith">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="axis1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="axis2" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="flipHorizontal">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="flipVertical">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="stretch">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="area" />
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="ignoreEmpty" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getReferencePoints">
      <variant return-type="QList&lt;RRefPoint&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="hint" default="RS::RenderTop" />
        </parameters>
      </variant>
    </function>
    <function name="moveReferencePoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="targetPoint" />
          <parameter const="false" type="Qt::KeyboardModifiers" modifier="" name="modifiers" default="Qt::NoModifier" />
        </parameters>
      </variant>
    </function>
    <function name="setShape">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RSpline" modifier="&amp;" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="appendControlPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="appendFitPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="prependFitPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="insertFitPointAt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="removeFitPointAt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="setPeriodic">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDegree">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection1">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection2">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStartPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setStartPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="sp" />
        </parameters>
      </variant>
    </function>
    <function name="setEndPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="ep" />
        </parameters>
      </variant>
    </function>
    <function name="reverse">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTrimEnd">
      <variant return-type="RS::Ending" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" />
        </parameters>
      </variant>
    </function>
    <function name="trimStartPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="trimEndPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="isClosed">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isPeriodic">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTangentAtStart">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTangentAtEnd">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getControlPoints">
      <variant return-type="QList&lt;RVector&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getControlPointsWrapped">
      <variant return-type="QList&lt;RVector&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getFitPoints">
      <variant return-type="QList&lt;RVector&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getKnotVector">
      <variant return-type="QList&lt;double&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getActualKnotVector">
      <variant return-type="QList&lt;double&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getWeights">
      <variant return-type="QList&lt;double&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLength">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPointAt">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="t" />
        </parameters>
      </variant>
    </function>
    <function name="getPointAtDistance">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
        </parameters>
      </variant>
    </function>
    <function name="getAngleAt">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="RS::From" modifier="" name="from" default="RS::FromStart" />
        </parameters>
      </variant>
    </function>
    <function name="toPolyline">
      <variant return-type="RPolyline" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="segments" />
        </parameters>
      </variant>
    </function>
    <function name="approximateWithArcs">
      <variant return-type="RPolyline" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="tolerance" />
          <parameter const="false" type="double" modifier="" name="radiusLimit" default="RDEFAULT_MIN1" />
        </parameters>
      </variant>
    </function>
    <function name="simplify">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="tolerance" />
        </parameters>
      </variant>
    </function>
    <function name="castToShape">
      <variant return-type="RShape*" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getShapes">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="false" />
          <parameter const="false" type="bool" modifier="" name="segment" default="false" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="entityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="update">
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RSplineEntity" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
      <super name="REntity" />
    </super_list>
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyProtected" />
    <property static="true" type="RPropertyTypeId" name="PropertyWorkingSet" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyLayer" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetype" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetypeScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineweight" />
    <property static="true" type="RPropertyTypeId" name="PropertyColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDisplayedColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDrawOrder" />
    <property static="true" type="RPropertyTypeId" name="PropertyControlPointNX" />
    <property static="true" type="RPropertyTypeId" name="PropertyControlPointNY" />
    <property static="true" type="RPropertyTypeId" name="PropertyControlPointNZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyFitPointNX" />
    <property static="true" type="RPropertyTypeId" name="PropertyFitPointNY" />
    <property static="true" type="RPropertyTypeId" name="PropertyFitPointNZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyKnotN" />
    <property static="true" type="RPropertyTypeId" name="PropertyPeriodic" />
    <property static="true" type="RPropertyTypeId" name="PropertyDegree" />
    <property static="true" type="RPropertyTypeId" name="PropertyUseStartTangent" />
    <property static="true" type="RPropertyTypeId" name="PropertyStartTangentX" />
    <property static="true" type="RPropertyTypeId" name="PropertyStartTangentY" />
    <property static="true" type="RPropertyTypeId" name="PropertyStartTangentZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyUseEndTangent" />
    <property static="true" type="RPropertyTypeId" name="PropertyEndTangentX" />
    <property static="true" type="RPropertyTypeId" name="PropertyEndTangentY" />
    <property static="true" type="RPropertyTypeId" name="PropertyEndTangentZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyLength" />
    <property static="true" type="RPropertyTypeId" name="PropertyTotalLength" />
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="RSplineData" modifier="&amp;" name="data" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RSplineEntity" modifier="&amp;" name="other" />
        </parameters>
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStaticPropertyTypeIds" static="true">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RSplineEntity*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="exportEntity">
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RExporter" modifier="&amp;" name="e" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
          <parameter const="false" type="bool" modifier="" name="forceSelected" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="setUndone">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getData">
      <variant return-type="RSplineData&amp;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setShape">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RSpline" modifier="&amp;" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTDelta">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTMin">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTMax">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTAtPoint">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="getTAtDistance">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
        </parameters>
      </variant>
    </function>
    <function name="getDegree">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection1">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection2">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTrimEnd">
      <variant return-type="RS::Ending" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" />
        </parameters>
      </variant>
    </function>
    <function name="trimStartPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="trimEndPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="splitAtPoints">
      <variant return-type="QList&lt;RSpline&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="points" />
        </parameters>
      </variant>
    </function>
    <function name="splitAtParams">
      <variant return-type="QList&lt;RSpline&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;double&gt;" modifier="&amp;" name="params" />
        </parameters>
      </variant>
    </function>
    <function name="getTangentAtStart">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTangentAtEnd">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isClosed">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isGeometricallyClosed">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="tolerance" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="isPeriodic">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="appendControlPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="appendFitPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="prependFitPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="insertFitPointAt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="removeFitPointAt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="setPeriodic">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getControlPoints">
      <variant return-type="QList&lt;RVector&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getControlPointsWrapped">
      <variant return-type="QList&lt;RVector&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="countControlPoints">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getControlPointAt">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="getFitPoints">
      <variant return-type="QList&lt;RVector&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasFitPoints">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="countFitPoints">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getFitPointAt">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="getKnotVector">
      <variant return-type="QList&lt;double&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getActualKnotVector">
      <variant return-type="QList&lt;double&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getWeights">
      <variant return-type="QList&lt;double&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLength">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPointAt">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="t" />
        </parameters>
      </variant>
    </function>
    <function name="getPointAtDistance">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
        </parameters>
      </variant>
    </function>
    <function name="getAngleAt">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="RS::From" modifier="" name="from" default="RS::FromStart" />
        </parameters>
      </variant>
    </function>
    <function name="getStartPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setStartPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="sp" />
        </parameters>
      </variant>
    </function>
    <function name="setEndPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="ep" />
        </parameters>
      </variant>
    </function>
    <function name="toPolyline">
      <variant return-type="RPolyline" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="segments" />
        </parameters>
      </variant>
    </function>
    <function name="approximateWithArcs">
      <variant return-type="RPolyline" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="tolerance" />
          <parameter const="false" type="double" modifier="" name="radiusLimit" default="RDEFAULT_MIN1" />
        </parameters>
      </variant>
    </function>
    <function name="reverse">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSideOfPoint">
      <variant return-type="RS::Side" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="getComplexity">
      <variant return-type="int" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getExploded">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="segments" default="RDEFAULT_MIN1" />
        </parameters>
      </variant>
    </function>
    <function name="simplify">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="tolerance" />
        </parameters>
      </variant>
    </function>
    <function name="getBezierSegments">
      <variant return-type="QList&lt;RSpline&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
        </parameters>
      </variant>
    </function>
    <function name="print" />
  </class>
  <class name="RStorage" ownership="cpp">
    <!--
    <super_list>
      <super name="RNonCopyable" />
      <super name="RRequireHeap" />
    </super_list>
    -->
    <function name="setDocument">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="doc" />
        </parameters>
      </variant>
    </function>
    <function name="getDocument">
      <variant return-type="RDocument*" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clear">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="beginTransaction">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="commitTransaction">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="rollbackTransaction">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="orderBackToFront">
      <variant return-type="QList&lt;REntity::Id&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QSet&lt;REntity::Id&gt;" modifier="&amp;" name="entityIds" />
        </parameters>
      </variant>
    </function>
    <function name="sortBlocks">
      <variant return-type="QList&lt;RBlock::Id&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RBlock::Id&gt;" modifier="&amp;" name="blockIds" />
        </parameters>
      </variant>
    </function>
    <function name="sortLayers">
      <variant return-type="QList&lt;RLayer::Id&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RLayer::Id&gt;" modifier="&amp;" name="layerIds" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="lessThan" static="true">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="QPair&lt;REntity::Id,int&gt;" modifier="&amp;" name="p1" />
          <parameter const="true" type="QPair&lt;REntity::Id,int&gt;" modifier="&amp;" name="p2" />
        </parameters>
      </variant>
    </function>
    -->
    <function name="queryAllObjects">
      <variant return-type="QSet&lt;RObject::Id&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryAllVisibleEntities">
      <variant return-type="QSet&lt;REntity::Id&gt;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryAllEntities">
      <variant return-type="QSet&lt;REntity::Id&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="undone" default="false" />
          <parameter const="false" type="bool" modifier="" name="allBlocks" default="false" />
          <parameter const="false" type="RS::EntityType" modifier="" name="type" default="RS::EntityAll" />
        </parameters>
      </variant>
      <variant return-type="QSet&lt;REntity::Id&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="undone" />
          <parameter const="false" type="bool" modifier="" name="allBlocks" />
          <parameter const="false" type="QList&lt;RS::EntityType&gt;" modifier="" name="types" />
        </parameters>
      </variant>
    </function>
    <function name="queryWorkingSetEntities">
      <variant return-type="QSet&lt;REntity::Id&gt;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryAllUcs">
      <variant return-type="QSet&lt;RUcs::Id&gt;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryAllLayers">
      <variant return-type="QSet&lt;RLayer::Id&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="undone" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="queryAllLayerStates">
      <variant return-type="QSet&lt;RLayerState::Id&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="undone" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="queryAllBlocks">
      <variant return-type="QSet&lt;RBlock::Id&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="undone" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="queryAllLayoutBlocks">
      <variant return-type="QSet&lt;RBlock::Id&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="includeModelSpace" default="false" />
          <parameter const="false" type="bool" modifier="" name="undone" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="queryAllLayouts">
      <variant return-type="QSet&lt;RLayout::Id&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="undone" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="queryAllViews">
      <variant return-type="QSet&lt;RView::Id&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="undone" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="queryAllLinetypes">
      <variant return-type="QSet&lt;RLinetype::Id&gt;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryLayerEntities">
      <variant return-type="QSet&lt;REntity::Id&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
          <parameter const="false" type="bool" modifier="" name="allBlocks" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="querySelectedLayerEntities">
      <variant return-type="QSet&lt;REntity::Id&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
          <parameter const="false" type="bool" modifier="" name="allBlocks" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="hasBlockEntities">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
    </function>
    <function name="queryBlockEntities">
      <variant return-type="QSet&lt;REntity::Id&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
    </function>
    <function name="queryLayerBlockEntities">
      <variant return-type="QSet&lt;REntity::Id&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
    </function>
    <function name="queryChildEntities">
      <variant return-type="QSet&lt;REntity::Id&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="parentId" />
          <parameter const="false" type="RS::EntityType" modifier="" name="type" default="RS::EntityAll" />
        </parameters>
      </variant>
    </function>
    <function name="hasChildEntities">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="parentId" />
        </parameters>
      </variant>
    </function>
    <function name="queryBlockReferences">
      <variant return-type="QSet&lt;REntity::Id&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
    </function>
    <function name="queryAllBlockReferences">
      <variant return-type="QSet&lt;REntity::Id&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryAllViewports">
      <variant return-type="QSet&lt;REntity::Id&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="querySelectedEntities">
      <variant return-type="QSet&lt;REntity::Id&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="querySelectedLayers">
      <variant return-type="QSet&lt;RObject::Id&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryInfiniteEntities">
      <variant return-type="QSet&lt;REntity::Id&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryDocumentVariables">
      <variant return-type="QSharedPointer&lt;RDocumentVariables&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryDocumentVariablesDirect">
      <variant return-type="QSharedPointer&lt;RDocumentVariables&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryDimStyle">
      <variant return-type="QSharedPointer&lt;RDimStyle&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryDimStyleDirect">
      <variant return-type="QSharedPointer&lt;RDimStyle&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryObject">
      <variant return-type="QSharedPointer&lt;RObject&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RObject::Id" modifier="" name="objectId" />
        </parameters>
      </variant>
    </function>
    <function name="queryObjectDirect">
      <variant return-type="QSharedPointer&lt;RObject&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RObject::Id" modifier="" name="objectId" />
        </parameters>
      </variant>
    </function>
    <function name="queryObjectCC">
      <variant return-type="RObject*" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RObject::Id" modifier="" name="objectId" />
        </parameters>
      </variant>
    </function>
    <function name="queryObjectByHandle">
      <variant return-type="QSharedPointer&lt;RObject&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RObject::Handle" modifier="" name="objectHandle" />
        </parameters>
      </variant>
    </function>
    <function name="queryEntity">
      <variant return-type="QSharedPointer&lt;REntity&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
        </parameters>
      </variant>
    </function>
    <function name="queryEntityDirect">
      <variant return-type="QSharedPointer&lt;REntity&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
        </parameters>
      </variant>
    </function>
    <function name="queryVisibleEntityDirect">
      <variant return-type="QSharedPointer&lt;REntity&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
        </parameters>
      </variant>
    </function>
    <function name="queryUcs">
      <variant return-type="QSharedPointer&lt;RUcs&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RUcs::Id" modifier="" name="ucsId" />
        </parameters>
      </variant>
      <variant return-type="QSharedPointer&lt;RUcs&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="ucsName" />
        </parameters>
      </variant>
    </function>
    <function name="queryUcsDirect">
      <variant return-type="QSharedPointer&lt;RUcs&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RUcs::Id" modifier="" name="ucsId" />
        </parameters>
      </variant>
    </function>
    <function name="queryLayer">
      <variant return-type="QSharedPointer&lt;RLayer&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
        </parameters>
      </variant>
      <variant return-type="QSharedPointer&lt;RLayer&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layerName" />
        </parameters>
      </variant>
    </function>
    <function name="queryLayerDirect">
      <variant return-type="QSharedPointer&lt;RLayer&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
        </parameters>
      </variant>
      <variant return-type="QSharedPointer&lt;RLayer&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layerName" />
        </parameters>
      </variant>
    </function>
    <function name="queryCurrentLayer">
      <variant return-type="QSharedPointer&lt;RLayer&gt;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryLayerState">
      <variant return-type="QSharedPointer&lt;RLayerState&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayerState::Id" modifier="" name="layerStateId" />
        </parameters>
      </variant>
      <variant return-type="QSharedPointer&lt;RLayerState&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layerStateName" />
        </parameters>
      </variant>
    </function>
    <function name="queryLayerStateDirect">
      <variant return-type="QSharedPointer&lt;RLayerState&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayerState::Id" modifier="" name="layerStateId" />
        </parameters>
      </variant>
      <variant return-type="QSharedPointer&lt;RLayerState&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layerStateName" />
        </parameters>
      </variant>
    </function>
    <function name="queryLayout">
      <variant return-type="QSharedPointer&lt;RLayout&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayout::Id" modifier="" name="layoutId" />
        </parameters>
      </variant>
      <variant return-type="QSharedPointer&lt;RLayout&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layoutName" />
        </parameters>
      </variant>
    </function>
    <function name="queryLayoutDirect">
      <variant return-type="QSharedPointer&lt;RLayout&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayout::Id" modifier="" name="layoutId" />
        </parameters>
      </variant>
    </function>
    <function name="queryCurrentView">
      <variant return-type="QSharedPointer&lt;RView&gt;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryLinetypeDirect">
      <variant return-type="QSharedPointer&lt;RLinetype&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLinetype::Id" modifier="" name="linetypeId" />
        </parameters>
      </variant>
    </function>
    <function name="queryLinetype">
      <variant return-type="QSharedPointer&lt;RLinetype&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLinetype::Id" modifier="" name="linetypeId" />
        </parameters>
      </variant>
      <variant return-type="QSharedPointer&lt;RLinetype&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="linetypeName" />
        </parameters>
      </variant>
    </function>
    <function name="queryBlockDirect">
      <variant return-type="QSharedPointer&lt;RBlock&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
      <variant return-type="QSharedPointer&lt;RBlock&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="blockName" />
        </parameters>
      </variant>
    </function>
    <function name="queryBlock">
      <variant return-type="QSharedPointer&lt;RBlock&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
      <variant return-type="QSharedPointer&lt;RBlock&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="blockName" />
        </parameters>
      </variant>
    </function>
    <function name="queryView">
      <variant return-type="QSharedPointer&lt;RView&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RView::Id" modifier="" name="viewId" />
        </parameters>
      </variant>
      <variant return-type="QSharedPointer&lt;RView&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="viewName" />
        </parameters>
      </variant>
    </function>
    <function name="setCurrentLayer">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layerName" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getCurrentLayerId">
      <variant return-type="RLayer::Id" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCurrentViewId">
      <variant return-type="RView::Id" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCurrentColor">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RColor" modifier="&amp;" name="color" />
        </parameters>
      </variant>
    </function>
    <function name="getCurrentColor">
      <variant return-type="RColor" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCurrentLineweight">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RLineweight::Lineweight" modifier="" name="lw" />
        </parameters>
      </variant>
    </function>
    <function name="getCurrentLineweight">
      <variant return-type="RLineweight::Lineweight" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCurrentLinetype">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RLinetype::Id" modifier="" name="ltId" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="name" />
        </parameters>
      </variant>
    </function>
    <function name="setCurrentLinetypePattern">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RLinetypePattern" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getCurrentLinetypeId">
      <variant return-type="RLinetype::Id" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCurrentLinetypePattern">
      <variant return-type="RLinetypePattern" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryCurrentLinetype">
      <variant return-type="QSharedPointer&lt;RLinetype&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="queryCurrentBlock">
      <variant return-type="QSharedPointer&lt;RBlock&gt;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCurrentBlock">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="blockName" />
        </parameters>
      </variant>
    </function>
    <function name="getCurrentBlockId">
      <variant return-type="RBlock::Id" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCurrentViewport">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RObject::Id" modifier="" name="viewportId" />
        </parameters>
      </variant>
    </function>
    <function name="unsetCurrentViewport">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCurrentViewportId">
      <variant return-type="RObject::Id" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setModelSpaceBlockId">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="id" />
        </parameters>
      </variant>
    </function>
    <function name="getModelSpaceBlockId">
      <variant return-type="RBlock::Id" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCurrentView">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RView::Id" modifier="" name="viewId" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="viewName" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="startDocumentVariablesTransaction">
      <variant return-type="QSharedPointer&lt;RDocumentVariables&gt;" access="public">
        <parameters>
          <parameter const="false" type="RTransaction" modifier="*&amp;" name="transaction" />
          <parameter const="false" type="bool" modifier="&amp;" name="useLocalTransaction" />
        </parameters>
      </variant>
    </function>
    -->
    <!--
    <function name="endDocumentVariablesTransaction">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" />
          <parameter const="false" type="bool" modifier="" name="useLocalTransaction" />
          <parameter const="false" type="QSharedPointer&lt;RDocumentVariables&gt;" modifier="" name="docVars" />
        </parameters>
      </variant>
    </function>
    -->
    <function name="setUnit">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::Unit" modifier="" name="unit" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getUnit">
      <variant return-type="RS::Unit" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setMeasurement">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::Measurement" modifier="" name="m" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getMeasurement">
      <variant return-type="RS::Measurement" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimensionFont">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="f" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getDimensionFont">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLinetypeScale">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getLinetypeScale">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBlockName">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
    </function>
    <function name="getBlockNameFromHandle">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Handle" modifier="" name="blockHandle" />
        </parameters>
      </variant>
    </function>
    <function name="getBlockNameFromLayout">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layoutName" />
        </parameters>
      </variant>
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayout::Id" modifier="" name="layoutId" />
        </parameters>
      </variant>
    </function>
    <function name="getBlockNames">
      <variant return-type="QSet&lt;QString&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="rxStr" default="RDEFAULT_QSTRING" />
        </parameters>
      </variant>
    </function>
    <function name="getBlockId">
      <variant return-type="RBlock::Id" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="blockName" />
        </parameters>
      </variant>
    </function>
    <function name="getBlockIdAuto">
      <variant return-type="RBlock::Id" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="blockLayoutName" />
        </parameters>
      </variant>
    </function>
    <function name="hasBlock">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="blockName" />
        </parameters>
      </variant>
    </function>
    <function name="getViewName">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RView::Id" modifier="" name="viewId" />
        </parameters>
      </variant>
    </function>
    <function name="getViewNames">
      <variant return-type="QSet&lt;QString&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getViewId">
      <variant return-type="RView::Id" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="viewName" />
        </parameters>
      </variant>
    </function>
    <function name="hasView">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="viewName" />
        </parameters>
      </variant>
    </function>
    <function name="getLayerName">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
        </parameters>
      </variant>
    </function>
    <function name="getLayerNames">
      <variant return-type="QSet&lt;QString&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="rxStr" default="RDEFAULT_QSTRING" />
        </parameters>
      </variant>
    </function>
    <function name="getLayerId">
      <variant return-type="RLayer::Id" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layerName" />
        </parameters>
      </variant>
    </function>
    <function name="setLayer0Id">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="id" />
        </parameters>
      </variant>
    </function>
    <function name="getLayer0Id">
      <variant return-type="RLayer::Id" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasLayer">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layerName" />
        </parameters>
      </variant>
    </function>
    <function name="getLayerStateName">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayerState::Id" modifier="" name="layerStateId" />
        </parameters>
      </variant>
    </function>
    <function name="getLayerStateNames">
      <variant return-type="QSet&lt;QString&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="rxStr" default="RDEFAULT_QSTRING" />
        </parameters>
      </variant>
    </function>
    <function name="getLayerStateId">
      <variant return-type="RLayer::Id" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layerStateName" />
        </parameters>
      </variant>
    </function>
    <function name="hasLayerStates">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasLayerState">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layerStateName" />
        </parameters>
      </variant>
    </function>
    <function name="getLayoutName">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayout::Id" modifier="" name="layoutId" />
        </parameters>
      </variant>
    </function>
    <function name="getLayoutNames">
      <variant return-type="QSet&lt;QString&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="rxStr" default="RDEFAULT_QSTRING" />
        </parameters>
      </variant>
    </function>
    <function name="getLayoutId">
      <variant return-type="RLayout::Id" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layoutName" />
        </parameters>
      </variant>
    </function>
    <function name="hasLayout">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="layoutName" />
        </parameters>
      </variant>
    </function>
    <function name="getLinetypeName">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLinetype::Id" modifier="" name="linetypeId" />
        </parameters>
      </variant>
    </function>
    <function name="getLinetypeDescription">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLinetype::Id" modifier="" name="linetypeId" />
        </parameters>
      </variant>
    </function>
    <function name="getLinetypeLabel">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLinetype::Id" modifier="" name="linetypeId" />
        </parameters>
      </variant>
    </function>
    <function name="getLinetypeNames">
      <variant return-type="QSet&lt;QString&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLinetypePatterns">
      <variant return-type="QList&lt;RLinetypePattern&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLinetypeId">
      <variant return-type="RLinetype::Id" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="linetypeName" />
        </parameters>
      </variant>
    </function>
    <function name="hasLinetype">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="linetypeName" />
        </parameters>
      </variant>
    </function>
    <function name="getVariables">
      <variant return-type="QStringList" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setVariable">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="bool" modifier="" name="overwrite" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="removeVariable">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="getVariable">
      <variant return-type="QVariant" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="hasVariable">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="setKnownVariable">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getKnownVariable">
      <variant return-type="QVariant" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="key" />
        </parameters>
      </variant>
    </function>
    <function name="countSelectedEntities">
      <variant return-type="int" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clearEntitySelection">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <!--
          <parameter const="false" type="QSet&lt;REntity::Id&gt;" modifier="*" name="affectedEntities" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="selectAllEntities">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <!--
          <parameter const="false" type="QSet&lt;REntity::Id&gt;" modifier="*" name="affectedEntities" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="selectEntity">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
          <parameter const="false" type="bool" modifier="" name="add" default="false" />
          <!--
          <parameter const="false" type="QSet&lt;REntity::Id&gt;" modifier="*" name="affectedEntities" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="selectEntities">
      <variant return-type="int" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QSet&lt;REntity::Id&gt;" modifier="&amp;" name="entityIds" />
          <parameter const="false" type="bool" modifier="" name="add" default="false" />
          <!--
          <parameter const="false" type="QSet&lt;REntity::Id&gt;" modifier="*" name="affectedEntities" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="deselectEntity">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
          <!--
          <parameter const="false" type="QSet&lt;REntity::Id&gt;" modifier="*" name="affectedEntities" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="deselectEntities">
      <variant return-type="int" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="QSet&lt;REntity::Id&gt;" modifier="&amp;" name="entityIds" />
          <!--
          <parameter const="false" type="QSet&lt;REntity::Id&gt;" modifier="*" name="affectedEntities" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="isSelected">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
        </parameters>
      </variant>
    </function>
    <function name="isSelectedWorkingSet">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="REntity::Id" modifier="" name="entityId" />
        </parameters>
      </variant>
    </function>
    <function name="isEntity">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RObject::Id" modifier="" name="objectId" />
        </parameters>
      </variant>
    </function>
    <function name="isLayerLocked">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RLayer" modifier="&amp;" name="layer" />
        </parameters>
      </variant>
    </function>
    <function name="isParentLayerLocked">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RLayer" modifier="&amp;" name="layer" />
        </parameters>
      </variant>
    </function>
    <function name="isLayerOff">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RLayer" modifier="&amp;" name="layer" />
        </parameters>
      </variant>
    </function>
    <function name="isLayerOffOrFrozen">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RLayer" modifier="&amp;" name="layer" />
        </parameters>
      </variant>
    </function>
    <function name="isLayerFrozen">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RLayer" modifier="&amp;" name="layer" />
        </parameters>
      </variant>
    </function>
    <function name="isParentLayerFrozen">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RLayer" modifier="&amp;" name="layer" />
        </parameters>
      </variant>
    </function>
    <function name="isLayerSnappable">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RLayer" modifier="&amp;" name="layer" />
        </parameters>
      </variant>
    </function>
    <function name="isParentLayerSnappable">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RLayer" modifier="&amp;" name="layer" />
        </parameters>
      </variant>
    </function>
    <function name="isLayerPlottable">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RLayer" modifier="&amp;" name="layer" />
        </parameters>
      </variant>
    </function>
    <function name="isParentLayerPlottable">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RLayer::Id" modifier="" name="layerId" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RLayer" modifier="&amp;" name="layer" />
        </parameters>
      </variant>
    </function>
    <function name="isEntityVisible">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="REntity" modifier="&amp;" name="entity" />
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
    </function>
    <function name="isBlockFrozen">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
    </function>
    <function name="isLayoutBlock">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RBlock::Id" modifier="" name="blockId" />
        </parameters>
      </variant>
    </function>
    <function name="setObjectId">
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RObject" modifier="&amp;" name="object" />
          <parameter const="false" type="RObject::Id" modifier="" name="objectId" />
        </parameters>
      </variant>
    </function>
    <function name="setObjectHandle">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RObject" modifier="&amp;" name="object" />
          <parameter const="false" type="RObject::Handle" modifier="" name="objectHandle" />
        </parameters>
      </variant>
    </function>
    <function name="setEntityParentId">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="REntity" modifier="&amp;" name="entity" />
          <parameter const="false" type="REntity::Id" modifier="" name="parentId" />
        </parameters>
      </variant>
    </function>
    <function name="setUndoStatus">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RObject" modifier="&amp;" name="object" />
          <parameter const="false" type="bool" modifier="" name="status" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RObject::Id" modifier="" name="object" />
          <parameter const="false" type="bool" modifier="" name="status" />
        </parameters>
      </variant>
    </function>
    <function name="hasSelection">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="ignoreHiddenLayers" default="true" />
          <parameter const="false" type="bool" modifier="" name="ignoreEmpty" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getSelectionBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEntitiesBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="QSet&lt;REntity::Id&gt;" modifier="&amp;" name="ids" />
        </parameters>
      </variant>
    </function>
    <function name="removeObject">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;RObject&gt;" modifier="" name="object" />
        </parameters>
      </variant>
    </function>
    <function name="saveObject">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;RObject&gt;" modifier="" name="object" />
          <parameter const="false" type="bool" modifier="" name="checkBlockRecursion" default="true" />
          <parameter const="false" type="bool" modifier="" name="keepHandles" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="deleteObject">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RObject::Id" modifier="" name="objectId" />
        </parameters>
      </variant>
    </function>
    <function name="getLastTransactionId">
      <variant return-type="int" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLastTransactionId">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="transactionId" />
        </parameters>
      </variant>
    </function>
    <function name="startTransactionGroup">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTransactionGroup">
      <variant return-type="int" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="saveTransaction">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RTransaction" modifier="&amp;" name="transaction" />
        </parameters>
      </variant>
    </function>
    <function name="deleteTransactionsFrom">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="transactionId" />
        </parameters>
      </variant>
    </function>
    <function name="resetTransactionStack">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTransaction">
      <variant return-type="RTransaction" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="transactionId" />
        </parameters>
      </variant>
    </function>
    <function name="toggleUndoStatus">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="QSet&lt;RObject::Id&gt;" modifier="&amp;" name="objects" />
        </parameters>
      </variant>
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RObject::Id" modifier="" name="object" />
        </parameters>
      </variant>
    </function>
    <function name="getMaxTransactionId">
      <variant return-type="int" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMaxLineweight">
      <variant return-type="RLineweight::Lineweight" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getNewObjectId">
      <variant return-type="RObject::Id" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMaxObjectId">
      <variant return-type="RObject::Id" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getNewObjectHandle">
      <variant return-type="RObject::Handle" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMaxObjectHandle">
      <variant return-type="RObject::Handle" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setMaxDrawOrder">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="m" />
        </parameters>
      </variant>
    </function>
    <function name="getMaxDrawOrder">
      <variant return-type="int" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMinDrawOrder">
      <variant return-type="int" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isInBackStorage">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RObject::Id" modifier="" name="" />
        </parameters>
      </variant>
    </function>
    <function name="getKnownVariableName" static="true">
      <variant return-type="QString" access="public">
        <parameters>
          <parameter const="false" type="RS::KnownVariable" modifier="" name="n" />
        </parameters>
      </variant>
    </function>
    <function name="setModified">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="m" />
        </parameters>
      </variant>
    </function>
    <function name="isModified">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLastModifiedDateTime">
      <variant return-type="QDateTime" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLastModified">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="addModifiedListener">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RModifiedListener" modifier="*" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="update">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setNotifyListeners">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getNotifyListeners">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RTabletEvent" ownership="cpp">
    <!--
    <super_list>
      <super name="QTabletEvent" />
    </super_list>
    -->
    <!--
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="QTabletEvent" modifier="&amp;" name="tabletEvent" />
          <parameter const="false" type="RGraphicsScene" modifier="&amp;" name="s" />
          <parameter const="false" type="RGraphicsView" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </constructor>
    -->
    <function name="getModelPosition">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getUcsPosition">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getScreenPosition">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getGraphicsView">
      <variant return-type="RGraphicsView&amp;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getGraphicsScene">
      <variant return-type="RGraphicsScene&amp;" const="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RTerminateEvent" ownership="cpp">
    <super_list>
      <super name="QEvent" />
    </super_list>
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
  </class>
  <class name="RTextBasedData">
    <super_list>
      <super name="REntityData" />
      <super name="RPainterPathSource" />
    </super_list>
    <enum name="TextFlag">
      <key>NoFlags</key>
      <key>Bold</key>
      <key>Italic</key>
      <key>Simple</key>
      <key>DimensionLabel</key>
      <key>Highlighted</key>
      <key>Backward</key>
      <key>UpsideDown</key>
    </enum>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="position" />
          <parameter const="true" type="RVector" modifier="&amp;" name="alignmentPoint" />
          <parameter const="false" type="double" modifier="" name="textHeight" />
          <parameter const="false" type="double" modifier="" name="textWidth" />
          <parameter const="false" type="RS::VAlign" modifier="" name="verticalAlignment" />
          <parameter const="false" type="RS::HAlign" modifier="" name="horizontalAlignment" />
          <parameter const="false" type="RS::TextDrawingDirection" modifier="" name="drawingDirection" />
          <parameter const="false" type="RS::TextLineSpacingStyle" modifier="" name="lineSpacingStyle" />
          <parameter const="false" type="double" modifier="" name="lineSpacingFactor" />
          <parameter const="true" type="QString" modifier="&amp;" name="text" />
          <parameter const="true" type="QString" modifier="&amp;" name="fontName" />
          <parameter const="false" type="bool" modifier="" name="bold" />
          <parameter const="false" type="bool" modifier="" name="italic" />
          <parameter const="false" type="double" modifier="" name="angle" />
          <parameter const="false" type="bool" modifier="" name="simple" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" default="NULL" />
        </parameters>
      </variant>
    </constructor>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setFlag">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RTextBasedData::TextFlag" modifier="" name="flag" />
          <parameter const="false" type="bool" modifier="" name="on" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getFlag">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="RTextBasedData::TextFlag" modifier="" name="flag" />
        </parameters>
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isSane">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="ignoreEmpty" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getWidth">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getHeight">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="sync">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RTextBasedData" modifier="&amp;" name="other" />
        </parameters>
      </variant>
    </function>
    <function name="getPointOnEntity">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
        </parameters>
      </variant>
    </function>
    <function name="getMiddlePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
        </parameters>
      </variant>
    </function>
    <function name="getCenterPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
        </parameters>
      </variant>
    </function>
    <function name="getPointsWithDistanceToEnd">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="int" modifier="" name="from" default="RS::FromAny" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
        </parameters>
      </variant>
    </function>
    <function name="getDistanceTo">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="range" default="0.0" />
          <parameter const="false" type="bool" modifier="" name="draft" default="false" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="intersectsWith">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
        </parameters>
      </variant>
    </function>
    <function name="getPosition">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPosition">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="position" />
        </parameters>
      </variant>
    </function>
    <function name="getAlignmentPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setAlignmentPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="alignmentPoint" />
        </parameters>
      </variant>
    </function>
    <function name="setText">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="text" />
        </parameters>
      </variant>
    </function>
    <function name="getFontName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setFontName">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fontName" />
        </parameters>
      </variant>
    </function>
    <function name="getFontFile">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setFontFile">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fontFile" />
        </parameters>
      </variant>
    </function>
    <function name="isBold">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setBold">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isItalic">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setItalic">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getTextHeight">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setTextHeight">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="h" />
        </parameters>
      </variant>
    </function>
    <function name="getTextWidth">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setTextWidth">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="w" />
        </parameters>
      </variant>
    </function>
    <function name="setVAlign">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::VAlign" modifier="" name="valign" />
        </parameters>
      </variant>
    </function>
    <function name="getVAlign">
      <variant return-type="RS::VAlign" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setHAlign">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::HAlign" modifier="" name="halign" />
        </parameters>
      </variant>
    </function>
    <function name="getHAlign">
      <variant return-type="RS::HAlign" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDrawingDirection">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::TextDrawingDirection" modifier="" name="drawingDirection" />
        </parameters>
      </variant>
    </function>
    <function name="getDrawingDirection">
      <variant return-type="RS::TextDrawingDirection" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLineSpacingStyle">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::TextLineSpacingStyle" modifier="" name="lineSpacingStyle" />
        </parameters>
      </variant>
    </function>
    <function name="getLineSpacingStyle">
      <variant return-type="RS::TextLineSpacingStyle" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLineSpacingFactor">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="lineSpacingFactor" />
        </parameters>
      </variant>
    </function>
    <function name="getLineSpacingFactor">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setAngle">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="angle" />
        </parameters>
      </variant>
    </function>
    <function name="getAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setXScale">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="xScale" />
        </parameters>
      </variant>
    </function>
    <function name="getXScale">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setSimple">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isSimple">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setBackward">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isBackward">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setUpsideDown">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isUpsideDown">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimensionLabel">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isDimensionLabel">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setSelected">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="setHighlighted">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isHighlighted">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getReferencePoints">
      <variant return-type="QList&lt;RRefPoint&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="hint" default="RS::RenderTop" />
        </parameters>
      </variant>
    </function>
    <function name="moveReferencePoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="targetPoint" />
          <parameter const="false" type="Qt::KeyboardModifiers" modifier="" name="modifiers" default="Qt::NoModifier" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="flipHorizontal">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="flipVertical">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getText">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRenderedText">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="escapeUnicode" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getPlainText">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEscapedText">
      <variant return-type="QString" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="escapeUnicode" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="escapeUnicode" static="true">
      <variant return-type="QString" static="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="str" />
        </parameters>
      </variant>
    </function>
    <function name="getMainFont">
      <variant return-type="QFont" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="update">
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="layout" />
        </parameters>
      </variant>
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isDirty">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPainterPaths">
      <variant return-type="QList&lt;RPainterPath&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="draft" default="false" />
          <parameter const="false" type="double" modifier="" name="pixelSizeHint" default="RDEFAULT_MIN1" />
        </parameters>
      </variant>
    </function>
    <function name="getShapes">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="false" />
          <parameter const="false" type="bool" modifier="" name="segment" default="false" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="entityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getExploded">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getClosestShape">
      <variant return-type="QSharedPointer&lt;RShape&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="pos" />
          <parameter const="false" type="double" modifier="" name="range" default="RNANDOUBLE" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getClosestPointOnEntity">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="double" modifier="" name="range" />
          <parameter const="false" type="bool" modifier="" name="limited" />
        </parameters>
      </variant>
    </function>
    <function name="getTextLayouts">
      <variant return-type="QList&lt;RTextLayout&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSimpleTextBlocks">
      <variant return-type="QList&lt;RTextBasedData&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasProxy" static="true">
      <variant return-type="bool" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <!--
    <function name="setTextProxy" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters>
          <parameter const="false" type="RTextProxy" modifier="*" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getTextProxy" static="true">
      <variant return-type="RTextProxy*" static="true" access="public">
        <parameters />
      </variant>
    </function>
    -->
    <function name="toEscapedText" static="true">
      <variant return-type="QString" static="true" access="public">
        <parameters>
          <parameter const="true" type="QTextDocument" modifier="&amp;" name="textDocument" />
          <parameter const="true" type="RColor" modifier="&amp;" name="initialColor" />
          <parameter const="false" type="double" modifier="" name="fontHeightFactor" default="1.0" />
          <parameter const="false" type="bool" modifier="" name="simpleText" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="toRichText" static="true">
      <variant return-type="QString" static="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="escapedText" />
          <parameter const="true" type="QFont" modifier="&amp;" name="mainFont" />
          <parameter const="false" type="double" modifier="" name="fontHeightFactor" default="1.0" />
        </parameters>
      </variant>
    </function>
    <function name="to2D">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RTextBasedEntity" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
      <super name="REntity" />
    </super_list>
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyLayer" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetype" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetypeScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineweight" />
    <property static="true" type="RPropertyTypeId" name="PropertyColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDisplayedColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDrawOrder" />
    <property static="true" type="RPropertyTypeId" name="PropertySimple" />
    <property static="true" type="RPropertyTypeId" name="PropertyPositionX" />
    <property static="true" type="RPropertyTypeId" name="PropertyPositionY" />
    <property static="true" type="RPropertyTypeId" name="PropertyPositionZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyText" />
    <property static="true" type="RPropertyTypeId" name="PropertyPlainText" />
    <property static="true" type="RPropertyTypeId" name="PropertyFontName" />
    <property static="true" type="RPropertyTypeId" name="PropertyHeight" />
    <property static="true" type="RPropertyTypeId" name="PropertyWidth" />
    <property static="true" type="RPropertyTypeId" name="PropertyAngle" />
    <property static="true" type="RPropertyTypeId" name="PropertyXScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyBold" />
    <property static="true" type="RPropertyTypeId" name="PropertyItalic" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineSpacingFactor" />
    <property static="true" type="RPropertyTypeId" name="PropertyHAlign" />
    <property static="true" type="RPropertyTypeId" name="PropertyVAlign" />
    <property static="true" type="RPropertyTypeId" name="PropertyBackward" />
    <property static="true" type="RPropertyTypeId" name="PropertyUpsideDown" />
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStaticPropertyTypeIds" static="true">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getData">
      <variant return-type="RTextBasedData&amp;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="exportEntity">
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RExporter" modifier="&amp;" name="e" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
          <parameter const="false" type="bool" modifier="" name="forceSelected" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="scaleNonUniform">
      <variant return-type="QSharedPointer&lt;REntity&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
    </function>
    <function name="getPainterPaths">
      <variant return-type="QList&lt;RPainterPath&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="draft" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getShapes">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="false" />
          <parameter const="false" type="bool" modifier="" name="segment" default="false" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="entityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getExploded">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTextData">
      <variant return-type="RTextBasedData&amp;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isBold">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setBold">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isItalic">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setItalic">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isBackward">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setBackward">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isUpsideDown">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setUpsideDown">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getPosition">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPosition">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="position" />
        </parameters>
      </variant>
    </function>
    <function name="getAlignmentPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setAlignmentPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="alignmentPoint" />
        </parameters>
      </variant>
    </function>
    <function name="getTextHeight">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setTextHeight">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="h" />
        </parameters>
      </variant>
    </function>
    <function name="getTextWidth">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getWidth">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getHeight">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getVAlign">
      <variant return-type="RS::VAlign" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setVAlign">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::VAlign" modifier="" name="va" />
        </parameters>
      </variant>
    </function>
    <function name="getHAlign">
      <variant return-type="RS::HAlign" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setHAlign">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::HAlign" modifier="" name="ha" />
        </parameters>
      </variant>
    </function>
    <function name="getFontName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setFontName">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="fontName" />
        </parameters>
      </variant>
    </function>
    <function name="getFontFile">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDrawingDirection">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::TextDrawingDirection" modifier="" name="drawingDirection" />
        </parameters>
      </variant>
    </function>
    <function name="getDrawingDirection">
      <variant return-type="RS::TextDrawingDirection" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLineSpacingStyle">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RS::TextLineSpacingStyle" modifier="" name="lineSpacingStyle" />
        </parameters>
      </variant>
    </function>
    <function name="getLineSpacingStyle">
      <variant return-type="RS::TextLineSpacingStyle" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLineSpacingFactor">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="lineSpacingFactor" />
        </parameters>
      </variant>
    </function>
    <function name="getLineSpacingFactor">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setAngle">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="angle" />
        </parameters>
      </variant>
    </function>
    <function name="getAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setXScale">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="xScale" />
        </parameters>
      </variant>
    </function>
    <function name="getXScale">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setSimple">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isSimple">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEscapedText">
      <variant return-type="QString" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="escapeUnicode" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getPlainText">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setText">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="text" />
        </parameters>
      </variant>
    </function>
    <function name="sync">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RTextBasedEntity" modifier="&amp;" name="other" />
        </parameters>
      </variant>
    </function>
    <function name="getSimpleTextBlocks">
      <variant return-type="QList&lt;RTextBasedData&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="print" />
  </class>
  <class name="RTextData">
    <super_list>
      <super name="REntityData" />
      <super name="RTextBasedData" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="position" />
          <parameter const="true" type="RVector" modifier="&amp;" name="alignmentPoint" />
          <parameter const="false" type="double" modifier="" name="textHeight" />
          <parameter const="false" type="double" modifier="" name="textWidth" />
          <parameter const="false" type="RS::VAlign" modifier="" name="verticalAlignment" />
          <parameter const="false" type="RS::HAlign" modifier="" name="horizontalAlignment" />
          <parameter const="false" type="RS::TextDrawingDirection" modifier="" name="drawingDirection" />
          <parameter const="false" type="RS::TextLineSpacingStyle" modifier="" name="lineSpacingStyle" />
          <parameter const="false" type="double" modifier="" name="lineSpacingFactor" />
          <parameter const="true" type="QString" modifier="&amp;" name="text" />
          <parameter const="true" type="QString" modifier="&amp;" name="fontName" />
          <parameter const="false" type="bool" modifier="" name="bold" />
          <parameter const="false" type="bool" modifier="" name="italic" />
          <parameter const="false" type="double" modifier="" name="angle" />
          <parameter const="false" type="bool" modifier="" name="simple" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RTextBasedData" modifier="&amp;" name="data" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RTextEdit" ownership="cpp" inheritable="true">
    <super_list>
      <super name="QObject" />
      <super name="QWidget" />
      <super name="QFrame" />
      <super name="QAbstractScrollArea" />
      <super name="QTextEdit" />
      <super name="QTextBrowser" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QWidget" modifier="*" name="parent" />
        </parameters>
      </variant>
    </constructor>
    <function name="sizeHint">
      <variant return-type="QSize" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="minimumSizeHint">
      <variant return-type="QSize" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RTextEntity" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
      <super name="REntity" />
      <super name="RTextBasedEntity" />
    </super_list>
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyProtected" />
    <property static="true" type="RPropertyTypeId" name="PropertyWorkingSet" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyLayer" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetype" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetypeScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineweight" />
    <property static="true" type="RPropertyTypeId" name="PropertyColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDisplayedColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDrawOrder" />
    <property static="true" type="RPropertyTypeId" name="PropertySimple" />
    <property static="true" type="RPropertyTypeId" name="PropertyPositionX" />
    <property static="true" type="RPropertyTypeId" name="PropertyPositionY" />
    <property static="true" type="RPropertyTypeId" name="PropertyPositionZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyText" />
    <property static="true" type="RPropertyTypeId" name="PropertyPlainText" />
    <property static="true" type="RPropertyTypeId" name="PropertyFontName" />
    <property static="true" type="RPropertyTypeId" name="PropertyHeight" />
    <property static="true" type="RPropertyTypeId" name="PropertyWidth" />
    <property static="true" type="RPropertyTypeId" name="PropertyAngle" />
    <property static="true" type="RPropertyTypeId" name="PropertyXScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyBold" />
    <property static="true" type="RPropertyTypeId" name="PropertyItalic" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineSpacingFactor" />
    <property static="true" type="RPropertyTypeId" name="PropertyHAlign" />
    <property static="true" type="RPropertyTypeId" name="PropertyVAlign" />
    <property static="true" type="RPropertyTypeId" name="PropertyBackward" />
    <property static="true" type="RPropertyTypeId" name="PropertyUpsideDown" />
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="RTextData" modifier="&amp;" name="data" />
        </parameters>
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStaticPropertyTypeIds" static="true">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RTextEntity*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getData">
      <variant return-type="RTextData&amp;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setData">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RTextData" modifier="&amp;" name="d" />
        </parameters>
      </variant>
    </function>
    <function name="print" />
  </class>
  <class name="RTextLabel">
    <super_list>
      <super name="RPoint" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="position" />
          <parameter const="true" type="QString" modifier="&amp;" name="text" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="userData" default="RDEFAULT_QVARIANT" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="clone">
      <variant return-type="RTextLabel*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getText">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getUserData">
      <variant return-type="QVariant" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="print" />
  </class>
  <class name="RTextLayout">
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;QTextLayout&gt;" modifier="" name="layout" />
          <parameter const="true" type="QTransform" modifier="&amp;" name="transform" />
          <parameter const="true" type="QColor" modifier="&amp;" name="color" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="QList&lt;RPainterPath&gt;" modifier="&amp;" name="pps" />
          <parameter const="true" type="QColor" modifier="&amp;" name="color" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="isEmpty">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isTTF">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasPainterPath">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLayout">
      <variant return-type="QSharedPointer&lt;QTextLayout&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTransform">
      <variant return-type="QTransform" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getColor">
      <variant return-type="QColor" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getText">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getFont">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isBold">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isItalic">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isUnderline">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getHeight">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" const="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RTextRenderer">
    <enum name="Target">
      <key>PainterPaths</key>
      <key>RichText</key>
    </enum>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RTextBasedData" modifier="&amp;" name="textData" />
          <parameter const="false" type="bool" modifier="" name="draft" />
          <parameter const="false" type="RTextRenderer::Target" modifier="" name="target" />
          <parameter const="false" type="double" modifier="" name="fontHeightFactor" default="1.0" />
        </parameters>
      </variant>
    </constructor>
    <function name="renderSimple">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="render">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPainterPaths">
      <variant return-type="QList&lt;RPainterPath&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTextLayouts">
      <variant return-type="QList&lt;RTextLayout&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getHeight">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getWidth">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRichText">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="lockForDrawing" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="unlockForDrawing" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPainterPathsForBlock" />
    <function name="getPainterPathsForBlockTtf" />
    <function name="getPainterPathsForBlockCad" />
    <function name="preparePath" />
    <function name="preparePathColor" />
    <function name="preparePathTransform" />
    <function name="getCharacterRect" />
    <function name="getRichTextForBlock" />
    <function name="setBlockFont" />
    <function name="getBlockFont" />
    <function name="setBlockFontFile" />
    <function name="getBlockFontFile" />
    <function name="setUseCadFont" />
    <function name="getUseCadFont" />
    <function name="setBlockBold" />
    <function name="getBlockBold" />
    <function name="setBlockItalic" />
    <function name="getBlockItalic" />
    <function name="setBlockUnderline" />
    <function name="getBlockUnderline" />
    <function name="setBlockHeight" />
    <function name="getBlockHeight" />
    <function name="setCurrentFormat" />
    <function name="getCurrentFormat" />
    <property static="true" type="QString" name="rxLineFeedStr" />
    <property static="true" type="QRegularExpression" name="rxLineFeed" />
    <property static="true" type="QString" name="rxAlignmentLeftStr" />
    <property static="true" type="QRegularExpression" name="rxAlignmentLeft" />
    <property static="true" type="QString" name="rxAlignmentCenterStr" />
    <property static="true" type="QRegularExpression" name="rxAlignmentCenter" />
    <property static="true" type="QString" name="rxAlignmentRightStr" />
    <property static="true" type="QRegularExpression" name="rxAlignmentRight" />
    <property static="true" type="QString" name="rxXAlignmentLeftStr" />
    <property static="true" type="QRegularExpression" name="rxXAlignmentLeft" />
    <property static="true" type="QString" name="rxXAlignmentCenterStr" />
    <property static="true" type="QRegularExpression" name="rxXAlignmentCenter" />
    <property static="true" type="QString" name="rxXAlignmentRightStr" />
    <property static="true" type="QRegularExpression" name="rxXAlignmentRight" />
    <property static="true" type="QString" name="rxXSpaceMTextStr" />
    <property static="true" type="QRegularExpression" name="rxXSpaceMText" />
    <property static="true" type="QString" name="rxTabMMStr" />
    <property static="true" type="QRegularExpression" name="rxTabMM" />
    <property static="true" type="QString" name="rxTabINStr" />
    <property static="true" type="QRegularExpression" name="rxTabIN" />
    <property static="true" type="QString" name="rxParagraphFeedStr" />
    <property static="true" type="QRegularExpression" name="rxParagraphFeed" />
    <property static="true" type="QString" name="rxXFeedStr" />
    <property static="true" type="QRegularExpression" name="rxXFeed" />
    <property static="true" type="QString" name="rxHeightChangeStr" />
    <property static="true" type="QRegularExpression" name="rxHeightChange" />
    <property static="true" type="QString" name="rxUnderlineChangeStr" />
    <property static="true" type="QRegularExpression" name="rxUnderlineChange" />
    <property static="true" type="QString" name="rxStackedTextStr" />
    <property static="true" type="QRegularExpression" name="rxStackedText" />
    <property static="true" type="QString" name="rxColorChangeIndexStr" />
    <property static="true" type="QRegularExpression" name="rxColorChangeIndex" />
    <property static="true" type="QString" name="rxColorChangeCustomStr" />
    <property static="true" type="QRegularExpression" name="rxColorChangeCustom" />
    <property static="true" type="QString" name="rxNonBreakingSpaceStr" />
    <property static="true" type="QRegularExpression" name="rxNonBreakingSpace" />
    <property static="true" type="QString" name="rxOverlineOnStr" />
    <property static="true" type="QRegularExpression" name="rxOverlineOn" />
    <property static="true" type="QString" name="rxOverlineOffStr" />
    <property static="true" type="QRegularExpression" name="rxOverlineOff" />
    <property static="true" type="QString" name="rxUnderlineOnStr" />
    <property static="true" type="QRegularExpression" name="rxUnderlineOn" />
    <property static="true" type="QString" name="rxUnderlineOffStr" />
    <property static="true" type="QRegularExpression" name="rxUnderlineOff" />
    <property static="true" type="QString" name="rxStrikethroughOnStr" />
    <property static="true" type="QRegularExpression" name="rxStrikethroughOn" />
    <property static="true" type="QString" name="rxStrikethroughOffStr" />
    <property static="true" type="QRegularExpression" name="rxStrikethroughOff" />
    <property static="true" type="QString" name="rxWidthChangeStr" />
    <property static="true" type="QRegularExpression" name="rxWidthChange" />
    <property static="true" type="QString" name="rxObliqueAngleChangeStr" />
    <property static="true" type="QRegularExpression" name="rxObliqueAngleChange" />
    <property static="true" type="QString" name="rxTrackChangeStr" />
    <property static="true" type="QRegularExpression" name="rxTrackChange" />
    <property static="true" type="QString" name="rxAlignmentChangeStr" />
    <property static="true" type="QRegularExpression" name="rxAlignmentChange" />
    <property static="true" type="QString" name="rxFontChangeCadStr" />
    <property static="true" type="QRegularExpression" name="rxFontChangeCad" />
    <property static="true" type="QString" name="rxFontChangeTtfStr" />
    <property static="true" type="QRegularExpression" name="rxFontChangeTtf" />
    <property static="true" type="QString" name="rxBeginBlockStr" />
    <property static="true" type="QRegularExpression" name="rxBeginBlock" />
    <property static="true" type="QString" name="rxEndBlockStr" />
    <property static="true" type="QRegularExpression" name="rxEndBlock" />
    <property static="true" type="QString" name="rxBackslashStr" />
    <property static="true" type="QRegularExpression" name="rxBackslash" />
    <property static="true" type="QString" name="rxCurlyOpenStr" />
    <property static="true" type="QRegularExpression" name="rxCurlyOpen" />
    <property static="true" type="QString" name="rxCurlyCloseStr" />
    <property static="true" type="QRegularExpression" name="rxCurlyClose" />
    <property static="true" type="QString" name="rxDegreeStr" />
    <property static="true" type="QRegularExpression" name="rxDegree" />
    <property static="true" type="QString" name="escDegreeStr" />
    <property static="true" type="QRegularExpression" name="escDegree" />
    <property static="true" type="QString" name="rxPlusMinusStr" />
    <property static="true" type="QRegularExpression" name="rxPlusMinus" />
    <property static="true" type="QString" name="escPlusMinusStr" />
    <property static="true" type="QRegularExpression" name="escPlusMinus" />
    <property static="true" type="QString" name="rxDiameterStr" />
    <property static="true" type="QRegularExpression" name="rxDiameter" />
    <property static="true" type="QString" name="escDiameterStr" />
    <property static="true" type="QRegularExpression" name="escDiameter" />
    <property static="true" type="QString" name="rxUnderlineStr" />
    <property static="true" type="QRegularExpression" name="rxUnderline" />
    <property static="true" type="QString" name="escUnderlineStr" />
    <property static="true" type="QRegularExpression" name="escUnderline" />
    <property static="true" type="QString" name="rxNoOpStr" />
    <property static="true" type="QRegularExpression" name="rxNoOp" />
    <property static="true" type="QString" name="rxNoOpEndStr" />
    <property static="true" type="QRegularExpression" name="rxNoOpEnd" />
    <property static="true" type="QString" name="escNoOpStr" />
    <property static="true" type="QRegularExpression" name="escNoOp" />
    <property static="true" type="QString" name="rxUnicodeStr" />
    <property static="true" type="QRegularExpression" name="rxUnicode" />
    <property static="true" type="QString" name="rxOptionalBreakStr" />
    <property static="true" type="QRegularExpression" name="rxOptionalBreak" />
    <property static="true" type="QString" name="rxAllStr" />
    <property static="true" type="QString" name="rxAllBreakStr" />
    <property static="true" type="QRegularExpression" name="rxAll" />
    <property static="true" type="QRegularExpression" name="rxAllBreak" />
    <property static="true" type="QChar" name="chDegree" />
    <property static="true" type="QChar" name="chPlusMinus" />
    <property static="true" type="QChar" name="chDiameter" />
  </class>
  <class name="RToleranceData">
    <super_list>
      <super name="REntityData" />
    </super_list>
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="castToShape">
      <variant return-type="RShape*" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLocation">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLocation">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="getDirection">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDirection">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="d" />
        </parameters>
      </variant>
    </function>
    <!--
    <function name="getFields">
      <variant return-type="QList&lt;QStringList&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    -->
    <function name="getText">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setText">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="t" />
        </parameters>
      </variant>
    </function>
    <function name="getDimtxt">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="scale" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="setDimtxt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="f" />
        </parameters>
      </variant>
    </function>
    <function name="getDimscale">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimscale">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="f" />
        </parameters>
      </variant>
    </function>
    <function name="scaleVisualProperties">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="scaleFactor" />
        </parameters>
      </variant>
    </function>
    <function name="getCorners">
      <variant return-type="QList&lt;RVector&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMiddels">
      <variant return-type="QList&lt;RVector&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getReferencePoints">
      <variant return-type="QList&lt;RRefPoint&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="hint" default="RS::RenderTop" />
        </parameters>
      </variant>
    </function>
    <function name="moveReferencePoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="targetPoint" />
          <parameter const="false" type="Qt::KeyboardModifiers" modifier="" name="modifiers" default="Qt::NoModifier" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="flipHorizontal">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="flipVertical">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getExploded">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="segments" default="RDEFAULT_MIN1" />
        </parameters>
      </variant>
    </function>
    <function name="getShapes">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="false" />
          <parameter const="false" type="bool" modifier="" name="segment" default="false" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="entityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="update">
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTextLabels">
      <variant return-type="QList&lt;RTextData&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getFrame">
      <variant return-type="QList&lt;RLine&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRows">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPointOnEntity">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clearStyleOverrides">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RToleranceEntity" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
      <super name="REntity" />
    </super_list>
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyProtected" />
    <property static="true" type="RPropertyTypeId" name="PropertyWorkingSet" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyLayer" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetype" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetypeScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineweight" />
    <property static="true" type="RPropertyTypeId" name="PropertyColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDisplayedColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDrawOrder" />
    <property static="true" type="RPropertyTypeId" name="PropertyLocationX" />
    <property static="true" type="RPropertyTypeId" name="PropertyLocationY" />
    <property static="true" type="RPropertyTypeId" name="PropertyLocationZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyDirectionX" />
    <property static="true" type="RPropertyTypeId" name="PropertyDirectionY" />
    <property static="true" type="RPropertyTypeId" name="PropertyDirectionZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyText" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimscale" />
    <property static="true" type="RPropertyTypeId" name="PropertyDimtxt" />
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="RToleranceData" modifier="&amp;" name="data" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RToleranceEntity" modifier="&amp;" name="other" />
        </parameters>
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStaticPropertyTypeIds" static="true">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" static="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RToleranceEntity*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getData">
      <variant return-type="RToleranceData&amp;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setData">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RToleranceData" modifier="&amp;" name="d" />
        </parameters>
      </variant>
    </function>
    <function name="setLocation">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="getLocation">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDirection">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getDirection">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setText">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="t" />
        </parameters>
      </variant>
    </function>
    <function name="getText">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDimtxt">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="scale" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="setDimtxt">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getDimscale">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDimscale">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getExploded">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="exportEntity">
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RExporter" modifier="&amp;" name="e" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
          <parameter const="false" type="bool" modifier="" name="forceSelected" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getTextLabels">
      <variant return-type="QList&lt;RTextData&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getFrame">
      <variant return-type="QList&lt;RLine&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRows">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clearStyleOverrides">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <!--
    <function name="print">
      <variant return-type="void" virtual="true" const="true" access="protected">
        <parameters>
          <parameter const="false" type="QDebug" modifier="" name="dbg" />
        </parameters>
      </variant>
    </function>
    -->
  </class>
  <class name="RToolButton">
    <super_list>
      <super name="QObject" />
      <super name="QWidget" />
      <super name="QToolButton" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QWidget" modifier="*" name="parent" />
        </parameters>
      </variant>
    </constructor>
  </class>
  <class name="RToolMatrixItemDelegate" ownership="cpp" inheritable="true">
    <super_list>
      <super name="QObject" />
      <super name="QAbstractItemDelegate" />
      <super name="QItemDelegate" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QTreeView" modifier="*" name="view" />
          <parameter const="false" type="QWidget" modifier="*" name="parent" />
        </parameters>
      </variant>
    </constructor>
    <!--
    <function name="paint">
      <variant return-type="void" const="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="QPainter" modifier="*" name="painter" />
          <parameter const="true" type="QStyleOptionViewItem" modifier="&amp;" name="option" />
          <parameter const="true" type="QModelIndex" modifier="&amp;" name="index" />
        </parameters>
      </variant>
    </function>
    -->
    <!--
    <function name="sizeHint">
      <variant return-type="QSize" const="true" overridable="true" access="public">
        <parameters>
          <parameter const="true" type="QStyleOptionViewItem" modifier="&amp;" name="opt" />
          <parameter const="true" type="QModelIndex" modifier="&amp;" name="index" />
        </parameters>
      </variant>
    </function>
    -->
  </class>
  <class name="RTraceData">
    <super_list>
      <super name="RSolidData" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="p2" />
          <parameter const="true" type="RVector" modifier="&amp;" name="p3" />
          <parameter const="true" type="RVector" modifier="&amp;" name="p4" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RTraceEntity" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
      <super name="REntity" />
    </super_list>
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyProtected" />
    <property static="true" type="RPropertyTypeId" name="PropertyWorkingSet" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyLayer" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetype" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetypeScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineweight" />
    <property static="true" type="RPropertyTypeId" name="PropertyColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDisplayedColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDrawOrder" />
    <property static="true" type="RPropertyTypeId" name="PropertyPoint1X" />
    <property static="true" type="RPropertyTypeId" name="PropertyPoint1Y" />
    <property static="true" type="RPropertyTypeId" name="PropertyPoint1Z" />
    <property static="true" type="RPropertyTypeId" name="PropertyPoint2X" />
    <property static="true" type="RPropertyTypeId" name="PropertyPoint2Y" />
    <property static="true" type="RPropertyTypeId" name="PropertyPoint2Z" />
    <property static="true" type="RPropertyTypeId" name="PropertyPoint3X" />
    <property static="true" type="RPropertyTypeId" name="PropertyPoint3Y" />
    <property static="true" type="RPropertyTypeId" name="PropertyPoint3Z" />
    <property static="true" type="RPropertyTypeId" name="PropertyPoint4X" />
    <property static="true" type="RPropertyTypeId" name="PropertyPoint4Y" />
    <property static="true" type="RPropertyTypeId" name="PropertyPoint4Z" />
    <property static="true" type="RPropertyTypeId" name="PropertyLength" />
    <property static="true" type="RPropertyTypeId" name="PropertyTotalLength" />
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="RTraceData" modifier="&amp;" name="data" />
        </parameters>
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStaticPropertyTypeIds" static="true">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RTraceEntity*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="exportEntity">
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RExporter" modifier="&amp;" name="e" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
          <parameter const="false" type="bool" modifier="" name="forceSelected" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getData">
      <variant return-type="RTraceData&amp;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getVertexAt">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="countVertices">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStartPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection1">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection2">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="reverse">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTrimEnd">
      <variant return-type="RS::Ending" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" />
        </parameters>
      </variant>
    </function>
    <function name="trimStartPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="trimEndPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getLength">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="print" />
  </class>
  <class name="RTransaction">
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RStorage" modifier="&amp;" name="storage" />
          <parameter const="true" type="QString" modifier="&amp;" name="text" />
          <parameter const="false" type="bool" modifier="" name="undoable" default="true" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="false" type="RStorage" modifier="&amp;" name="storage" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <enum name="Type">
      <key>Generic</key>
      <key>CurrentLayerChange</key>
      <key>CurrentLayerSelectionChange</key>
      <key>LayerLockStatusChange</key>
      <key>LayerVisibilityStatusChange</key>
      <key>SaveWorkingSet</key>
      <key>ChangeDocumentSetting</key>
      <key>Undo</key>
      <key>Redo</key>
    </enum>
    <function name="setRecordAffectedObjects">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="setAllowAll">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="setAllowInvisible">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="setSpatialIndexDisabled">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="setExistingBlockDetectionDisabled">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="setExistingLayerDetectionDisabled">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="setExistingLinetypeDetectionDisabled">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="setBlockRecursionDetectionDisabled">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="setKeepHandles">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="setKeepChildren">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isUndoing">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isRedoing">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isUndoable">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isFailed">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="redo">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="undo">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="end">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="updateAffectedBlockReferences">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setId">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="id" />
        </parameters>
      </variant>
    </function>
    <function name="getId">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setGroup">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="group" />
        </parameters>
      </variant>
    </function>
    <function name="getGroup">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getText">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="overwriteBlock">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;RBlock&gt;" modifier="" name="block" />
        </parameters>
      </variant>
    </function>
    <function name="addObject">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;RObject&gt;" modifier="" name="obj" />
          <parameter const="false" type="bool" modifier="" name="useCurrentAttributes" default="true" />
          <parameter const="false" type="bool" modifier="" name="forceNew" default="false" />
          <parameter const="true" type="QSet&lt;RPropertyTypeId&gt;" modifier="&amp;" name="modifiedPropertyTypeIds" default="RDEFAULT_QSET_RPROPERTYTYPEID" />
        </parameters>
      </variant>
    </function>
    <function name="addAffectedObject">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RObject::Id" modifier="" name="objectId" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;RObject&gt;" modifier="" name="object" />
        </parameters>
      </variant>
    </function>
    <function name="addAffectedObjects">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QSet&lt;RObject::Id&gt;" modifier="&amp;" name="objectIds" />
        </parameters>
      </variant>
    </function>
    <function name="deleteObject">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RObject::Id" modifier="" name="objectId" />
          <parameter const="false" type="bool" modifier="" name="force" default="false" />
        </parameters>
      </variant>
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="QSharedPointer&lt;RObject&gt;" modifier="" name="object" />
          <parameter const="false" type="bool" modifier="" name="force" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getAffectedObjects">
      <variant return-type="QList&lt;RObject::Id&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStatusChanges">
      <variant return-type="QSet&lt;RObject::Id&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasStatusChange">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="RObject::Id" modifier="" name="id" />
        </parameters>
      </variant>
    </function>
    <function name="getPropertyChanges">
      <variant return-type="QList&lt;RPropertyChange&gt;" const="true" access="public">
        <parameters>
          <parameter const="false" type="RObject::Id" modifier="" name="id" />
        </parameters>
      </variant>
    </function>
    <function name="hasOnlyChanges">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="fail">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="endCycle">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isPreview">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setTypes">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RTransaction::Types" modifier="" name="t" />
        </parameters>
      </variant>
    </function>
    <function name="getTypes">
      <variant return-type="RTransaction::Types" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setType">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RTransaction::Type" modifier="" name="type" />
          <parameter const="false" type="bool" modifier="" name="on" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="isType">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="false" type="RTransaction::Type" modifier="" name="type" />
        </parameters>
      </variant>
    </function>
    <function name="addPropertyChange" />
    <function name="commit" />
    <function name="rollback" />
  </class>
  <class name="RTransactionListener" ownership="cpp">
    <function name="updateTransactionListener">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="setCurrentBlock">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RTransactionListenerAdapter" ownership="cpp">
    <super_list>
      <super name="QObject" />
      <super name="RTransactionListener" />
    </super_list>
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="updateTransactionListener">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="setCurrentBlock">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
        </parameters>
      </variant>
    </function>
    <function name="transactionUpdated">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" />
        </parameters>
      </variant>
    </function>
    <function name="currentBlockSet">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RTransactionStack" ownership="cpp">
    <!--
    <super_list>
      <super name="RNonCopyable" />
    </super_list>
    -->
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RStorage" modifier="&amp;" name="storage" />
        </parameters>
      </variant>
    </constructor>
    <function name="reset">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="undo">
      <variant return-type="QList&lt;RTransaction&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="redo">
      <variant return-type="QList&lt;RTransaction&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isUndoAvailable">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isRedoAvailable">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getUndoableTransactionText">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRedoableTransactionText">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RTransform">
    <super_list>
      <super name="QTransform" nodowncast="true" />
    </super_list>
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="translate">
      <variant return-type="RTransform&amp;" access="public">
        <parameters>
          <parameter const="false" type="qreal" modifier="" name="dx" />
          <parameter const="false" type="qreal" modifier="" name="dy" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="RTransform&amp;" access="public">
        <parameters>
          <parameter const="false" type="qreal" modifier="" name="sx" />
          <parameter const="false" type="qreal" modifier="" name="sy" />
        </parameters>
      </variant>
    </function>
    <function name="rotateRadians">
      <variant return-type="RTransform&amp;" access="public">
        <parameters>
          <parameter const="false" type="qreal" modifier="" name="angle" />
          <parameter const="false" type="Qt::Axis" modifier="" name="axis" default="Qt::ZAxis" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="RTransform&amp;" access="public">
        <parameters>
          <parameter const="false" type="qreal" modifier="" name="angle" />
          <parameter const="false" type="Qt::Axis" modifier="" name="axis" default="Qt::ZAxis" />
        </parameters>
      </variant>
    </function>
    <function name="getOps">
      <variant return-type="QList&lt;RTransformOp&gt;" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RTransformOp" ownership="cpp">
    <enum name="Type">
      <key>Translation</key>
      <key>Scale</key>
      <key>Rotation</key>
    </enum>
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <property type="RTransformOp::Type" name="type" read="getType" />
    <property type="double" name="d1" read="getD1" />
    <property type="double" name="d2" read="getD2" />
    <function name="createTranslation" static="true">
      <variant return-type="RTransformOp" access="public">
        <parameters>
          <parameter const="false" type="qreal" modifier="" name="dx" />
          <parameter const="false" type="qreal" modifier="" name="dy" />
        </parameters>
      </variant>
    </function>
    <function name="createScale" static="true">
      <variant return-type="RTransformOp" access="public">
        <parameters>
          <parameter const="false" type="qreal" modifier="" name="sx" />
          <parameter const="false" type="qreal" modifier="" name="sy" />
        </parameters>
      </variant>
    </function>
    <function name="createRotation" static="true">
      <variant return-type="RTransformOp" access="public">
        <parameters>
          <parameter const="false" type="qreal" modifier="" name="a" />
        </parameters>
      </variant>
    </function>
    <function name="getType">
      <variant return-type="RTransformOp::Type" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getD1">
      <variant return-type="qreal" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getD2">
      <variant return-type="qreal" const="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RTransformation">
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
  </class>
  <class name="RTranslation">
    <super_list>
      <super name="RTransformation" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
          <parameter const="false" type="double" modifier="" name="rotationAngle" default="0.0" />
          <parameter const="false" type="double" modifier="" name="scaleFactor" default="1.0" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RVector::nullVector" />
        </parameters>
      </variant>
    </constructor>
  </class>
  <class name="RTreeWidget">
    <super_list>
      <super name="QObject" />
      <super name="QPaintDevice" />
      <super name="QWidget" />
      <super name="QFrame" />
      <super name="QAbstractScrollArea" />
      <super name="QAbstractItemView" />
      <super name="QTreeView" />
      <super name="QTreeWidget" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QWidget" modifier="*" name="parent" default="0" />
        </parameters>
      </variant>
    </constructor>
    <function name="setSelectableColumn">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="c" />
        </parameters>
      </variant>
    </function>
    <function name="getIndex">
      <variant return-type="QModelIndex" access="public">
        <parameters>
          <parameter const="false" type="QTreeWidgetItem" modifier="*" name="item" />
          <parameter const="false" type="int" modifier="" name="column" default="0" />
        </parameters>
      </variant>
    </function>
    <function name="getActiveItem">
      <variant return-type="QTreeWidgetItem*" access="public">
        <parameters />
      </variant>
    </function>
    <function name="contextMenuEvent">
      <variant return-type="void" virtual="true" access="protected">
        <parameters>
          <parameter const="false" type="QContextMenuEvent" modifier="*" name="e" />
        </parameters>
      </variant>
    </function>
    <function name="mousePressEvent">
      <variant return-type="void" virtual="true" overridable="true" access="protected">
        <parameters>
          <parameter const="false" type="QMouseEvent" modifier="*" name="e" />
        </parameters>
      </variant>
    </function>
    <function name="mouseReleaseEvent">
      <variant return-type="void" virtual="true" overridable="true" access="protected">
        <parameters>
          <parameter const="false" type="QMouseEvent" modifier="*" name="e" />
        </parameters>
      </variant>
    </function>
    <function name="mouseMoveEvent">
      <variant return-type="void" virtual="true" overridable="true" access="protected">
        <parameters>
          <parameter const="false" type="QMouseEvent" modifier="*" name="e" />
        </parameters>
      </variant>
    </function>
    <function name="resizeEvent">
      <variant return-type="void" virtual="true" overridable="true" access="protected">
        <parameters>
          <parameter const="false" type="QResizeEvent" modifier="*" name="event" />
        </parameters>
      </variant>
    </function>
    <function name="itemColumnClicked">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="QTreeWidgetItem" modifier="*" name="item" />
          <parameter const="false" type="int" modifier="" name="column" />
        </parameters>
      </variant>
    </function>
    <function name="contextMenuRequested">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="QTreeWidgetItem" modifier="*" name="item" />
          <parameter const="false" type="int" modifier="" name="column" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RTriangle" sharedpointer="true">
    <super_list>
      <super name="RShape" />
      <super name="RExplodable" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="p2" />
          <parameter const="true" type="RVector" modifier="&amp;" name="p3" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getShapeType">
      <variant return-type="RShape::Type" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RTriangle*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setZ">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="z" />
        </parameters>
      </variant>
    </function>
    <function name="getVectorProperties">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPolyline">
      <variant return-type="RPolyline" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getOrientation">
      <variant return-type="RS::Orientation" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="reverse">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="createArrow" static="true">
      <variant return-type="RTriangle" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="position" />
          <parameter const="false" type="double" modifier="" name="direction" />
          <parameter const="false" type="double" modifier="" name="size" />
        </parameters>
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLength">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getArea">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCorner">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
        </parameters>
      </variant>
    </function>
    <function name="setCorner">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="i" />
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="setCorners">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="c1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="c2" />
          <parameter const="true" type="RVector" modifier="&amp;" name="c3" />
        </parameters>
      </variant>
    </function>
    <function name="getEndPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMiddlePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCenterPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPointsWithDistanceToEnd">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="int" modifier="" name="from" default="RS::FromAny" />
        </parameters>
      </variant>
    </function>
    <function name="getPointCloud">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="segmentLength" />
        </parameters>
      </variant>
    </function>
    <function name="getDistanceTo">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="getVectorTo">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="getNormal">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isPointInTriangle">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
          <parameter const="false" type="bool" modifier="" name="treatAsQuadrant" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="isPointInQuadrant">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getD">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getExploded">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="segments" default="RDEFAULT_MIN1" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="flipHorizontal">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="flipVertical">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTransformed">
      <variant return-type="QSharedPointer&lt;RShape&gt;" const="true" access="public">
        <parameters>
          <parameter const="true" type="QTransform" modifier="&amp;" name="transform" />
        </parameters>
      </variant>
    </function>
    <function name="print" />
    <preproc plain="#if QT_VERSION&gt;=0x060000" />
    <function name="copy">
      <variant return-type="RTriangle" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <preproc plain="#endif" />
  </class>
  <class name="RUcs" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="QString" modifier="&amp;" name="name" />
          <parameter const="true" type="RVector" modifier="&amp;" name="origin" />
          <parameter const="true" type="RVector" modifier="&amp;" name="xAxisDirection" />
          <parameter const="true" type="RVector" modifier="&amp;" name="yAxisDirection" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RUcs*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="setOrigin">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="o" />
        </parameters>
      </variant>
    </function>
    <function name="setXAxisDirection">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="x" />
        </parameters>
      </variant>
    </function>
    <function name="setYAxisDirection">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="y" />
        </parameters>
      </variant>
    </function>
    <function name="getZAxisDirection">
      <variant return-type="RVector" access="public">
        <parameters />
      </variant>
    </function>
    <function name="mapFromUcs">
      <variant return-type="RVector" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="positionUcs" />
        </parameters>
      </variant>
    </function>
    <function name="mapToUcs">
      <variant return-type="RVector" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="positionWcs" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RUcsListener" ownership="cpp">
    <function name="update">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
    <function name="clear">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RUnit">
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="formatLinear" static="true">
      <variant return-type="QString" static="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="length" />
          <parameter const="false" type="RS::Unit" modifier="" name="unit" />
          <parameter const="false" type="RS::LinearFormat" modifier="" name="format" />
          <parameter const="false" type="int" modifier="" name="prec" />
          <parameter const="false" type="bool" modifier="" name="showUnit" default="false" />
          <parameter const="false" type="bool" modifier="" name="showLeadingZeroes" default="true" />
          <parameter const="false" type="bool" modifier="" name="showTrailingZeroes" default="false" />
          <parameter const="false" type="bool" modifier="" name="onlyPreciseResult" default="false" />
          <parameter const="false" type="char" modifier="" name="decimalSeparator" default="RDEFAULT_DOT" />
        </parameters>
      </variant>
    </function>
    <function name="formatScientific" static="true">
      <variant return-type="QString" static="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="length" />
          <parameter const="false" type="RS::Unit" modifier="" name="unit" />
          <parameter const="false" type="int" modifier="" name="prec" />
          <parameter const="false" type="bool" modifier="" name="showUnit" default="false" />
          <parameter const="false" type="bool" modifier="" name="showLeadingZeroes" default="true" />
          <parameter const="false" type="bool" modifier="" name="showTrailingZeroes" default="false" />
          <parameter const="false" type="bool" modifier="" name="onlyPreciseResult" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="formatDecimal" static="true">
      <variant return-type="QString" static="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="length" />
          <parameter const="false" type="RS::Unit" modifier="" name="unit" />
          <parameter const="false" type="int" modifier="" name="prec" />
          <parameter const="false" type="bool" modifier="" name="showUnit" default="false" />
          <parameter const="false" type="bool" modifier="" name="showLeadingZeroes" default="true" />
          <parameter const="false" type="bool" modifier="" name="showTrailingZeroes" default="false" />
          <parameter const="false" type="bool" modifier="" name="onlyPreciseResult" default="false" />
          <parameter const="false" type="char" modifier="" name="decimalSeparator" default="RDEFAULT_DOT" />
        </parameters>
      </variant>
    </function>
    <function name="formatEngineering" static="true">
      <variant return-type="QString" static="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="length" />
          <parameter const="false" type="RS::Unit" modifier="" name="unit" />
          <parameter const="false" type="int" modifier="" name="prec" />
          <parameter const="false" type="bool" modifier="" name="showUnit" default="false" />
          <parameter const="false" type="bool" modifier="" name="showLeadingZeroes" default="true" />
          <parameter const="false" type="bool" modifier="" name="showTrailingZeroes" default="false" />
          <parameter const="false" type="bool" modifier="" name="onlyPreciseResult" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="formatArchitectural" static="true">
      <variant return-type="QString" static="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="length" />
          <parameter const="false" type="RS::Unit" modifier="" name="unit" />
          <parameter const="false" type="int" modifier="" name="prec" />
          <parameter const="false" type="bool" modifier="" name="showUnit" default="false" />
          <parameter const="false" type="bool" modifier="" name="showLeadingZeroes" default="true" />
          <parameter const="false" type="bool" modifier="" name="showTrailingZeroes" default="false" />
          <parameter const="false" type="bool" modifier="" name="onlyPreciseResult" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="formatFractional" static="true">
      <variant return-type="QString" static="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="length" />
          <parameter const="false" type="RS::Unit" modifier="" name="unit" />
          <parameter const="false" type="int" modifier="" name="prec" />
          <parameter const="false" type="bool" modifier="" name="showUnit" default="false" />
          <parameter const="false" type="bool" modifier="" name="showLeadingZeroes" default="true" />
          <parameter const="false" type="bool" modifier="" name="showTrailingZeroes" default="false" />
          <parameter const="false" type="bool" modifier="" name="onlyPreciseResult" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="formatAngle" static="true">
      <variant return-type="QString" static="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="angle" />
          <parameter const="false" type="RS::AngleFormat" modifier="" name="format" />
          <parameter const="false" type="int" modifier="" name="prec" />
          <parameter const="false" type="bool" modifier="" name="showLeadingZeroes" default="true" />
          <parameter const="false" type="bool" modifier="" name="showTrailingZeroes" default="false" />
          <parameter const="false" type="char" modifier="" name="decimalSeparator" default="RDEFAULT_DOT" />
        </parameters>
      </variant>
    </function>
    <function name="isMetric" static="true">
      <variant return-type="bool" static="true" access="public">
        <parameters>
          <parameter const="false" type="RS::Unit" modifier="" name="unit" />
        </parameters>
      </variant>
    </function>
    <function name="convert" static="true">
      <variant return-type="double" static="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="value" />
          <parameter const="false" type="RS::Unit" modifier="" name="source" />
          <parameter const="false" type="RS::Unit" modifier="" name="dest" />
        </parameters>
      </variant>
      <variant return-type="RVector" static="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="value" />
          <parameter const="false" type="RS::Unit" modifier="" name="source" />
          <parameter const="false" type="RS::Unit" modifier="" name="dest" />
        </parameters>
      </variant>
    </function>
    <function name="getFactorToM" static="true">
      <variant return-type="double" static="true" access="public">
        <parameters>
          <parameter const="false" type="RS::Unit" modifier="" name="unit" />
        </parameters>
      </variant>
    </function>
    <function name="parseUnit" static="true">
      <variant return-type="RS::Unit" static="true" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="str" />
        </parameters>
      </variant>
    </function>
    <function name="unitToSymbol" static="true">
      <variant return-type="QString" static="true" access="public">
        <parameters>
          <parameter const="false" type="RS::Unit" modifier="" name="unit" />
          <parameter const="false" type="bool" modifier="" name="asText" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="unitToName" static="true">
      <variant return-type="QString" static="true" access="public">
        <parameters>
          <parameter const="false" type="RS::Unit" modifier="" name="unit" />
          <parameter const="false" type="bool" modifier="" name="tr" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getLabel" static="true">
      <variant return-type="QString" static="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="v" />
          <parameter const="false" type="RDocument" modifier="&amp;" name="document" />
          <parameter const="false" type="int" modifier="" name="precisionOverride" default="RDEFAULT_MIN1" />
          <parameter const="false" type="bool" modifier="" name="forceSuppressTrailingZeroes" default="false" />
          <parameter const="false" type="bool" modifier="" name="onlyPreciseResult" default="false" />
          <parameter const="false" type="char" modifier="" name="decimalSeparator" default="RDEFAULT_DOT" />
        </parameters>
      </variant>
    </function>
    <function name="doubleToString" static="true">
      <variant return-type="QString" static="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="value" />
          <parameter const="false" type="double" modifier="" name="prec" />
          <parameter const="false" type="bool" modifier="" name="showLeadingZeroes" default="true" />
          <parameter const="false" type="bool" modifier="" name="showTrailingZeroes" default="false" />
          <parameter const="false" type="char" modifier="" name="decimalSeparator" default="RDEFAULT_DOT" />
        </parameters>
      </variant>
      <variant return-type="QString" static="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="value" />
          <parameter const="false" type="int" modifier="" name="prec" />
          <parameter const="false" type="bool" modifier="" name="showLeadingZeroes" default="true" />
          <parameter const="false" type="bool" modifier="" name="showTrailingZeroes" default="false" />
          <parameter const="false" type="char" modifier="" name="decimalSeparator" default="RDEFAULT_DOT" />
        </parameters>
      </variant>
    </function>
    <function name="doubleToStringDec" static="true">
      <variant return-type="QString" static="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="value" />
          <parameter const="false" type="int" modifier="" name="prec" />
          <parameter const="false" type="bool" modifier="" name="showLeadingZeroes" default="true" />
          <parameter const="false" type="bool" modifier="" name="showTrailingZeroes" default="false" />
          <parameter const="false" type="char" modifier="" name="decimalSeparator" default="RDEFAULT_DOT" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RVector">
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="double" modifier="" name="vx" />
          <parameter const="false" type="double" modifier="" name="vy" />
          <parameter const="false" type="double" modifier="" name="vz" default="0.0" />
          <parameter const="false" type="bool" modifier="" name="valid_in" default="true" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="QList&lt;double&gt;" modifier="&amp;" name="tuples" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <property type="double" name="x" read="getX" write="setX" />
    <property type="double" name="y" read="getY" write="setY" />
    <property type="double" name="z" read="getZ" write="setZ" />
    <property type="bool" name="valid" read="isValid" />
    <function name="set">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="vx" />
          <parameter const="false" type="double" modifier="" name="vy" />
          <parameter const="false" type="double" modifier="" name="vz" default="0.0" />
        </parameters>
      </variant>
    </function>
    <function name="setPolar">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="radius" />
          <parameter const="false" type="double" modifier="" name="angle" />
        </parameters>
      </variant>
    </function>
    <function name="get2D">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isZero">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isSane">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isNaN">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isInside">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="b" />
        </parameters>
      </variant>
    </function>
    <function name="equalsFuzzy">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
          <parameter const="false" type="double" modifier="" name="tol" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="equalsFuzzy2D">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
          <parameter const="false" type="double" modifier="" name="tol" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="getDistanceTo">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getDistanceTo2D">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="setAngle">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a" />
        </parameters>
      </variant>
    </function>
    <function name="getAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAngleToPlaneXY">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAngleTo">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="setMagnitude2D">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="m" />
        </parameters>
      </variant>
    </function>
    <function name="getMagnitude">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSquaredMagnitude">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMagnitude2D">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLerp">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
          <parameter const="false" type="double" modifier="" name="t" />
        </parameters>
      </variant>
    </function>
    <function name="getUnitVector">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setX">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="x" />
        </parameters>
      </variant>
    </function>
    <function name="getX">
      <variant return-type="double" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setY">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="y" />
        </parameters>
      </variant>
    </function>
    <function name="getY">
      <variant return-type="double" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setZ">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="z" />
        </parameters>
      </variant>
    </function>
    <function name="getZ">
      <variant return-type="double" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isInWindow">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="firstCorner" />
          <parameter const="true" type="RVector" modifier="&amp;" name="secondCorner" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="RVector" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="moveList" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters>
          <parameter const="false" type="QList&lt;RVector&gt;" modifier="&amp;" name="list" />
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="RVector" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
      <variant return-type="RVector" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
        </parameters>
      </variant>
    </function>
    <function name="getRotated">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
    </function>
    <function name="rotate3D">
      <variant return-type="RVector" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
          <parameter const="false" type="double" modifier="" name="rotation" />
        </parameters>
      </variant>
    </function>
    <function name="rotateList" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters>
          <parameter const="false" type="QList&lt;RVector&gt;" modifier="&amp;" name="list" />
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
      <variant return-type="void" static="true" access="public">
        <parameters>
          <parameter const="false" type="QList&lt;RVector&gt;" modifier="&amp;" name="list" />
          <parameter const="false" type="double" modifier="" name="rotation" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="RVector" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="factor" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RVector::nullVector" />
        </parameters>
      </variant>
      <variant return-type="RVector" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="factors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RVector::nullVector" />
        </parameters>
      </variant>
    </function>
    <function name="getScaled">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="factors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
    </function>
    <function name="scaleList" static="true">
      <variant return-type="void" static="true" access="public">
        <parameters>
          <parameter const="false" type="QList&lt;RVector&gt;" modifier="&amp;" name="list" />
          <parameter const="false" type="double" modifier="" name="factor" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RVector::nullVector" />
        </parameters>
      </variant>
      <variant return-type="void" static="true" access="public">
        <parameters>
          <parameter const="false" type="QList&lt;RVector&gt;" modifier="&amp;" name="list" />
          <parameter const="true" type="RVector" modifier="&amp;" name="factors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RVector::nullVector" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="RVector" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="axis1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="axis2" />
        </parameters>
      </variant>
      <variant return-type="RVector" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="getMirrored">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="flipHorizontal">
      <variant return-type="RVector" access="public">
        <parameters />
      </variant>
    </function>
    <function name="flipVertical">
      <variant return-type="RVector" access="public">
        <parameters />
      </variant>
    </function>
    <function name="stretch">
      <variant return-type="RVector" access="public">
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="area" />
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="isoProject">
      <variant return-type="RVector" access="public">
        <parameters>
          <parameter const="false" type="RS::IsoProjectionType" modifier="" name="type" />
        </parameters>
      </variant>
    </function>
    <function name="axonometricProjection">
      <variant return-type="RVector" access="public">
        <parameters>
          <parameter const="false" type="RS::IsoProjectionType" modifier="" name="type" />
        </parameters>
      </variant>
    </function>
    <function name="obliqueProjection">
      <variant return-type="RVector" access="public">
        <parameters>
          <parameter const="false" type="RS::IsoProjectionType" modifier="" name="type" />
        </parameters>
      </variant>
    </function>
    <function name="transform">
      <variant return-type="RVector" access="public">
        <parameters>
          <parameter const="true" type="RMatrix" modifier="&amp;" name="m" />
        </parameters>
      </variant>
    </function>
    <function name="transform2DM">
      <variant return-type="RVector" access="public">
        <parameters>
          <parameter const="true" type="RMatrix" modifier="&amp;" name="m" />
        </parameters>
      </variant>
    </function>
    <function name="transform2D">
      <variant return-type="RVector" access="public">
        <parameters>
          <parameter const="true" type="QTransform" modifier="&amp;" name="t" />
        </parameters>
      </variant>
    </function>
    <function name="getTransformed">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="true" type="RMatrix" modifier="&amp;" name="m" />
        </parameters>
      </variant>
    </function>
    <function name="getTransformed2DM">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="true" type="RMatrix" modifier="&amp;" name="m" />
        </parameters>
      </variant>
    </function>
    <function name="getTransformed2D">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="true" type="QTransform" modifier="&amp;" name="t" />
        </parameters>
      </variant>
    </function>
    <function name="getDividedComponents">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getMultipliedComponents">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getClosest">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="list" />
        </parameters>
      </variant>
    </function>
    <function name="getClosest2D">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="list" />
        </parameters>
      </variant>
    </function>
    <function name="getClosestDistance">
      <variant return-type="double" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="list" />
          <parameter const="false" type="int" modifier="" name="counts" />
        </parameters>
      </variant>
    </function>
    <function name="getClosestIndex">
      <variant return-type="int" const="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="list" />
          <parameter const="false" type="bool" modifier="" name="ignoreZ" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getClosestIndex2D">
      <variant return-type="int" const="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="list" />
        </parameters>
      </variant>
    </function>
    <function name="operator_add" call="operator+">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="operator_subtract" call="operator-">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="operator_multiply" call="operator*">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="operator_divide" call="operator/">
      <variant return-type="RVector" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="getNegated">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAbsolute">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="dot">
      <variant return-type="double" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="other" />
        </parameters>
      </variant>
    </function>
    <function name="normalize">
      <variant return-type="RVector" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getNormalized">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="operator_add_assign" call="operator+=">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="operator_subtract_assign" call="operator-=">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="operator_multiply_assign" call="operator*=">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="operator_divide_assign" call="operator/=">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="operator_equal" call="operator==">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="operator_unequal" call="operator!=">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getFloor">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCeil">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="lteXY">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="gteXY">
      <variant return-type="bool" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <preproc plain="#if QT_VERSION&gt;=0x060000" />
    <function name="copy">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <preproc plain="#endif" />
    <function name="containsFuzzy" static="true">
      <variant return-type="bool" static="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="vectors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
          <parameter const="false" type="double" modifier="" name="tol" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="findFirstFuzzy" static="true">
      <variant return-type="int" static="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="vectors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
          <parameter const="false" type="double" modifier="" name="tol" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="getMinimum" static="true">
      <variant return-type="RVector" static="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="v2" />
        </parameters>
      </variant>
      <variant return-type="RVector" static="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="vectors" />
        </parameters>
      </variant>
    </function>
    <function name="getMaximum" static="true">
      <variant return-type="RVector" static="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="v2" />
        </parameters>
      </variant>
      <variant return-type="RVector" static="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="vectors" />
        </parameters>
      </variant>
    </function>
    <function name="getMinimumX" static="true">
      <variant return-type="RVector" static="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="vectors" />
        </parameters>
      </variant>
    </function>
    <function name="getMaximumX" static="true">
      <variant return-type="RVector" static="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="vectors" />
        </parameters>
      </variant>
    </function>
    <function name="getMinimumY" static="true">
      <variant return-type="RVector" static="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="vectors" />
        </parameters>
      </variant>
    </function>
    <function name="getMaximumY" static="true">
      <variant return-type="RVector" static="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="vectors" />
        </parameters>
      </variant>
    </function>
    <function name="getAverage" static="true">
      <variant return-type="RVector" static="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="v2" />
        </parameters>
      </variant>
      <variant return-type="RVector" static="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="vectors" />
        </parameters>
      </variant>
    </function>
    <function name="getUnion" static="true">
      <variant return-type="QList&lt;RVector&gt;" static="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="vectorsA" />
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="vectorsB" />
          <parameter const="false" type="double" modifier="" name="tol" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="getUnique" static="true">
      <variant return-type="QList&lt;RVector&gt;" static="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="vectors" />
          <parameter const="false" type="double" modifier="" name="tol" default="RS::PointTolerance" />
        </parameters>
      </variant>
    </function>
    <function name="getXList" static="true">
      <variant return-type="QList&lt;double&gt;" static="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="vectors" />
        </parameters>
      </variant>
    </function>
    <function name="getYList" static="true">
      <variant return-type="QList&lt;double&gt;" static="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="vectors" />
        </parameters>
      </variant>
    </function>
    <function name="getZList" static="true">
      <variant return-type="QList&lt;double&gt;" static="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="vectors" />
        </parameters>
      </variant>
    </function>
    <function name="getCrossProduct" static="true">
      <variant return-type="RVector" static="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="v2" />
        </parameters>
      </variant>
    </function>
    <function name="getDotProduct" static="true">
      <variant return-type="double" static="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="v2" />
        </parameters>
      </variant>
    </function>
    <function name="createPolar" static="true">
      <variant return-type="RVector" static="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="radius" />
          <parameter const="false" type="double" modifier="" name="angle" />
        </parameters>
      </variant>
    </function>
    <function name="lessThanX" static="true">
      <variant return-type="bool" static="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="v2" />
        </parameters>
      </variant>
    </function>
    <function name="greaterThanX" static="true">
      <variant return-type="bool" static="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="v2" />
        </parameters>
      </variant>
    </function>
    <function name="lessThanY" static="true">
      <variant return-type="bool" static="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="v2" />
        </parameters>
      </variant>
    </function>
    <function name="greaterThanY" static="true">
      <variant return-type="bool" static="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="v2" />
        </parameters>
      </variant>
    </function>
    <function name="lessThanEqualXY" static="true">
      <variant return-type="bool" static="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="v2" />
        </parameters>
      </variant>
    </function>
    <function name="greaterThanEqualXY" static="true">
      <variant return-type="bool" static="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="v2" />
        </parameters>
      </variant>
    </function>
    <function name="getSortedByDistance" static="true">
      <variant return-type="QList&lt;RVector&gt;" static="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="list" />
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <!--
    <class name="RVectorDistanceSort">
      <function name="lessThan" static="true">
        <variant return-type="bool" static="true" access="public">
          <parameters>
            <parameter const="true" type="RVector" modifier="&amp;" name="v1" />
            <parameter const="true" type="RVector" modifier="&amp;" name="v2" />
          </parameters>
        </variant>
      </function>
    </class>
    -->
    <function name="getSortedLeftRightTopBottom" static="true">
      <variant return-type="QList&lt;RVector&gt;" static="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="list" />
        </parameters>
      </variant>
    </function>
    <!--
    <class name="RVectorLeftRightTopBottomSort">
      <function name="lessThan" static="true">
        <variant return-type="bool" static="true" access="public">
          <parameters>
            <parameter const="true" type="RVector" modifier="&amp;" name="v1" />
            <parameter const="true" type="RVector" modifier="&amp;" name="v2" />
          </parameters>
        </variant>
      </function>
    </class>
    -->
    <function name="getSortedByAngle" static="true">
      <variant return-type="QList&lt;RVector&gt;" static="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="list" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
          <parameter const="false" type="double" modifier="" name="angle" />
        </parameters>
      </variant>
    </function>
    <!--
    <class name="RVectorAngleSort">
      <function name="lessThan" static="true">
        <variant return-type="bool" static="true" access="public">
          <parameters>
            <parameter const="true" type="RVector" modifier="&amp;" name="v1" />
            <parameter const="true" type="RVector" modifier="&amp;" name="v2" />
          </parameters>
        </variant>
      </function>
    </class>
    -->
    <property static="true" type="RVector" name="invalid" />
    <property static="true" type="RVector" name="nullVector" />
    <property static="true" type="RVector" name="nanVector" />
  </class>
  <class name="RView" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="QString" modifier="&amp;" name="name" />
          <parameter const="false" type="RVector" modifier="" name="centerPoint" />
          <parameter const="false" type="double" modifier="" name="width" />
          <parameter const="false" type="double" modifier="" name="height" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RView*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getName">
      <variant return-type="QString" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setName">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="QString" modifier="&amp;" name="n" />
        </parameters>
      </variant>
    </function>
    <function name="getCenterPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCenterPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="cPoint" />
        </parameters>
      </variant>
    </function>
    <function name="getWidth">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setWidth">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="w" />
        </parameters>
      </variant>
    </function>
    <function name="getHeight">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setHeight">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="h" />
        </parameters>
      </variant>
    </function>
    <function name="getBox">
      <variant return-type="RBox" access="public">
        <parameters />
      </variant>
    </function>
    <function name="scale">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="factor" />
        </parameters>
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RViewFocusListener" ownership="cpp">
    <function name="updateFocus">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="RGraphicsView" modifier="*" name="view" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RViewFocusListenerAdapter" ownership="cpp" inheritable="true">
    <super_list>
      <super name="RViewFocusListener" />
    </super_list>
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="updateFocus">
      <variant return-type="void" virtual="true" overridable="true" access="public">
        <parameters>
          <parameter const="false" type="RGraphicsView" modifier="*" name="view" />
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RViewListener">
    <function name="updateViews">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
    <function name="clearViews">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RViewListenerAdapter" ownership="cpp">
    <super_list>
      <super name="QObject" />
      <super name="RViewListener" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QObject" modifier="*" name="parent" default="NULL" />
        </parameters>
      </variant>
    </constructor>
    <function name="updateViews">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
    <function name="clearViews">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="viewsUpdated">
      <variant return-type="void" access="public" signal="true">
        <parameters>
          <parameter const="false" type="RDocumentInterface" modifier="*" name="documentInterface" />
        </parameters>
      </variant>
    </function>
    <function name="viewsCleared">
      <variant return-type="void" access="public" signal="true">
        <parameters />
      </variant>
    </function>
  </class>
  <class name="RViewportData">
    <super_list>
      <super name="REntityData" />
      <super name="RPoint" />
    </super_list>
    <constructor>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="ignoreEmpty" />
        </parameters>
      </variant>
      <variant return-type="RBox" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="to2D">
      <variant return-type="void" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isValid">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="setZ">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="z" />
        </parameters>
      </variant>
    </function>
    <function name="getMiddlePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getCenterPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getArcReferencePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
        </parameters>
      </variant>
    </function>
    <function name="getPointsWithDistanceToEnd">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="int" modifier="" name="from" default="RS::FromAny" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="subEntityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getIntersectionPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="REntityData" modifier="&amp;" name="other" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="bool" modifier="" name="same" default="false" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="true" />
          <!--
          <parameter const="false" type="QList&lt;QPair&lt;RObject::Id,RObject::Id&gt;&gt;" modifier="*" name="entityIds" default="NULL" />
          -->
        </parameters>
      </variant>
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="true" />
        </parameters>
      </variant>
    </function>
    <function name="getVectorTo">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="getDistanceTo">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="range" default="0.0" />
          <parameter const="false" type="bool" modifier="" name="draft" default="false" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="intersectsWith">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RShape" modifier="&amp;" name="shape" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="axis1" />
          <parameter const="true" type="RVector" modifier="&amp;" name="axis2" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="flipHorizontal">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="flipVertical">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="stretch">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="area" />
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="castToShape">
      <variant return-type="RShape*" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getViewportId">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setViewportId">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="id" />
        </parameters>
      </variant>
    </function>
    <function name="getStatus">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setStatus">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="getCenter">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCenter">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="c" />
        </parameters>
      </variant>
    </function>
    <function name="getViewCenter">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setViewCenter">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="c" />
        </parameters>
      </variant>
    </function>
    <function name="getViewTarget">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setViewTarget">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="t" />
        </parameters>
      </variant>
    </function>
    <function name="getWidth">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setWidth">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="w" />
        </parameters>
      </variant>
    </function>
    <function name="getHeight">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setHeight">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="h" />
        </parameters>
      </variant>
    </function>
    <function name="getScale">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setScale">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="getRotation">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setRotation">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="r" />
        </parameters>
      </variant>
    </function>
    <function name="isOverall">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setOverall">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isOff">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setOff">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getViewOffset">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getInternalReferencePoints">
      <variant return-type="QList&lt;RRefPoint&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="hint" default="RS::RenderTop" />
        </parameters>
      </variant>
    </function>
    <function name="getReferencePoints">
      <variant return-type="QList&lt;RRefPoint&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="hint" default="RS::RenderTop" />
        </parameters>
      </variant>
    </function>
    <function name="moveReferencePoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="targetPoint" />
          <parameter const="false" type="Qt::KeyboardModifiers" modifier="" name="modifiers" default="Qt::NoModifier" />
        </parameters>
      </variant>
    </function>
    <function name="getDistanceTo">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="range" default="0.0" />
          <parameter const="false" type="bool" modifier="" name="draft" default="false" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="getShapes">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="false" />
          <parameter const="false" type="bool" modifier="" name="segment" default="false" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="entityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
    <function name="getEdges">
      <variant return-type="QList&lt;RLine&gt;" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" />
        </parameters>
      </variant>
    </function>
    <function name="setStatusFlag" />
    <function name="testStatusFlag" />
  </class>
  <class name="RViewportEntity" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
      <super name="REntity" />
    </super_list>
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyLayer" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetype" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetypeScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineweight" />
    <property static="true" type="RPropertyTypeId" name="PropertyColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDisplayedColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDrawOrder" />
    <property static="true" type="RPropertyTypeId" name="PropertyCenterX" />
    <property static="true" type="RPropertyTypeId" name="PropertyCenterY" />
    <property static="true" type="RPropertyTypeId" name="PropertyCenterZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyWidth" />
    <property static="true" type="RPropertyTypeId" name="PropertyHeight" />
    <property static="true" type="RPropertyTypeId" name="PropertyScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyRotation" />
    <property static="true" type="RPropertyTypeId" name="PropertyOn" />
    <property static="true" type="RPropertyTypeId" name="PropertyViewCenterX" />
    <property static="true" type="RPropertyTypeId" name="PropertyViewCenterY" />
    <property static="true" type="RPropertyTypeId" name="PropertyViewTargetX" />
    <property static="true" type="RPropertyTypeId" name="PropertyViewTargetY" />
    <property static="true" type="RPropertyTypeId" name="PropertyViewTargetZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyOverall" />
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="RViewportData" modifier="&amp;" name="data" />
        </parameters>
      </variant>
    </constructor>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStaticPropertyTypeIds" static="true">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RViewportEntity*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="exportEntity">
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RExporter" modifier="&amp;" name="e" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
          <parameter const="false" type="bool" modifier="" name="forceSelected" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getData">
      <variant return-type="RViewportData&amp;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setData">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="RViewportData" modifier="&amp;" name="d" />
        </parameters>
      </variant>
    </function>
    <function name="getViewportId">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setViewportId">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="id" />
        </parameters>
      </variant>
    </function>
    <function name="getStatus">
      <variant return-type="int" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setStatus">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="int" modifier="" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="getCenter">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setCenter">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="c" />
        </parameters>
      </variant>
    </function>
    <function name="getViewCenter">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setViewCenter">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="c" />
        </parameters>
      </variant>
    </function>
    <function name="getViewTarget">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setViewTarget">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="t" />
        </parameters>
      </variant>
    </function>
    <function name="getWidth">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setWidth">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="w" />
        </parameters>
      </variant>
    </function>
    <function name="getHeight">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setHeight">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="h" />
        </parameters>
      </variant>
    </function>
    <function name="getScale">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setScale">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="s" />
        </parameters>
      </variant>
    </function>
    <function name="getRotation">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setRotation">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="r" />
        </parameters>
      </variant>
    </function>
    <function name="isOverall">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setOverall">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="isOff">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setOff">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getViewOffset">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPosition">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setPosition">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="print" />
  </class>
  <class name="RWheelEvent" ownership="cpp">
    <super_list>
      <super name="QEvent" />
      <super name="QInputEvent" />
      <super name="QPointerEvent" />
      <super name="QSinglePointEvent" />
      <super name="QWheelEvent" />
      <super name="RInputEvent" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="position" />
          <parameter const="false" type="int" modifier="" name="delta" />
          <parameter const="false" type="Qt::MouseButtons" modifier="" name="buttons" />
          <parameter const="false" type="Qt::KeyboardModifiers" modifier="" name="modifiers" />
          <parameter const="false" type="Qt::Orientation" modifier="" name="orient" />
          <parameter const="false" type="RGraphicsScene" modifier="&amp;" name="s" />
          <parameter const="false" type="RGraphicsView" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </constructor>
  </class>
  <class name="RWidget">
    <super_list>
      <super name="QObject" />
      <super name="QWidget" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="QWidget" modifier="*" name="parent" default="0" />
        </parameters>
      </variant>
    </constructor>
    <function name="removeAction">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="QAction" modifier="*" name="action" />
        </parameters>
      </variant>
    </function>
    <function name="addAction">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="QAction" modifier="*" name="action" />
        </parameters>
      </variant>
    </function>
    <function name="insertAction">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="QAction" modifier="*" name="before" />
          <parameter const="false" type="QAction" modifier="*" name="action" />
        </parameters>
      </variant>
    </function>
    <function name="actionAdded" />
  </class>
  <class name="RXLine" sharedpointer="true">
    <super_list>
      <super name="RShape" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="basePoint" />
          <parameter const="false" type="double" modifier="" name="angle" />
          <parameter const="false" type="double" modifier="" name="distance" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="basePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="directionVector" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="line" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getShapeType">
      <variant return-type="RShape::Type" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLineShape">
      <variant return-type="RLine" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RXLine*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="isDirected">
      <variant return-type="bool" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBoundingBox">
      <variant return-type="RBox" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setZ">
      <variant return-type="void" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="z" />
        </parameters>
      </variant>
    </function>
    <function name="getVectorProperties">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getMiddlePoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getCenterPoints">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getPointsWithDistanceToEnd">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="int" modifier="" name="from" default="RS::FromAny" />
        </parameters>
      </variant>
    </function>
    <function name="getPointCloud">
      <variant return-type="QList&lt;RVector&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="segmentLength" />
        </parameters>
      </variant>
    </function>
    <function name="getAngleAt">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="RS::From" modifier="" name="from" default="RS::FromStart" />
        </parameters>
      </variant>
    </function>
    <function name="getVectorTo">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
          <parameter const="false" type="bool" modifier="" name="limited" default="true" />
          <parameter const="false" type="double" modifier="" name="strictRange" default="RMAXDOUBLE" />
        </parameters>
      </variant>
    </function>
    <function name="getBasePoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setBasePoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="vector" />
        </parameters>
      </variant>
    </function>
    <function name="getSecondPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setSecondPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="vector" />
        </parameters>
      </variant>
    </function>
    <function name="getDirectionVector">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDirectionVector">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="vector" />
        </parameters>
      </variant>
    </function>
    <function name="getMiddlePoint">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getLength">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setLength">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="getAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setAngle">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="a" />
        </parameters>
      </variant>
    </function>
    <function name="getDirection1">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection2">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSideOfPoint">
      <variant return-type="RS::Side" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="getStartPoint">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getEndPoint">
      <variant return-type="RVector" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="trimStartPoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="trimDist" />
        </parameters>
      </variant>
    </function>
    <function name="trimEndPoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="trimDist" />
        </parameters>
      </variant>
    </function>
    <function name="getTrimEnd">
      <variant return-type="RS::Ending" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" />
        </parameters>
      </variant>
    </function>
    <function name="getDistanceFromStart">
      <variant return-type="double" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getClippedLine">
      <variant return-type="RLine" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="box" />
        </parameters>
      </variant>
    </function>
    <function name="move">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="rotate">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="rotation" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="scale">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="scaleFactors" />
          <parameter const="true" type="RVector" modifier="&amp;" name="center" default="RDEFAULT_RVECTOR" />
        </parameters>
      </variant>
    </function>
    <function name="mirror">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RLine" modifier="&amp;" name="axis" />
        </parameters>
      </variant>
    </function>
    <function name="reverse">
      <variant return-type="bool" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="stretch">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RPolyline" modifier="&amp;" name="area" />
          <parameter const="true" type="RVector" modifier="&amp;" name="offset" />
        </parameters>
      </variant>
    </function>
    <function name="getTransformed">
      <variant return-type="QSharedPointer&lt;RShape&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QTransform" modifier="&amp;" name="transform" />
        </parameters>
      </variant>
    </function>
    <function name="getOffsetShapes">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="double" modifier="" name="distance" />
          <parameter const="false" type="int" modifier="" name="number" />
          <parameter const="false" type="RS::Side" modifier="" name="side" />
          <parameter const="true" type="RVector" modifier="&amp;" name="position" default="RVector::invalid" />
        </parameters>
      </variant>
    </function>
    <function name="splitAt">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="QList&lt;RVector&gt;" modifier="&amp;" name="points" />
        </parameters>
      </variant>
    </function>
    <function name="print" />
    <preproc plain="#if QT_VERSION&gt;=0x060000" />
    <function name="copy">
      <variant return-type="RXLine" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <preproc plain="#endif" />
  </class>
  <class name="RXLineData">
    <super_list>
      <super name="REntityData" />
      <super name="RXLine" />
    </super_list>
    <constructor>
      <variant>
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="basePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="dir" />
        </parameters>
      </variant>
      <variant>
        <parameters>
          <parameter const="true" type="RXLine" modifier="&amp;" name="line" />
        </parameters>
      </variant>
      <variant>
        <parameters />
      </variant>
    </constructor>
    <function name="getType">
      <variant return-type="RS::EntityType" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getXLine">
      <variant return-type="RXLine" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getBasePoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirectionVector">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasFixedAngle">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setFixedAngle">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="reverse">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getTrimEnd">
      <variant return-type="RS::Ending" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" />
        </parameters>
      </variant>
    </function>
    <function name="trimStartPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="trimEndPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getSideOfPoint">
      <variant return-type="RS::Side" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="getReferencePoints">
      <variant return-type="QList&lt;RRefPoint&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RS::ProjectionRenderingHint" modifier="" name="hint" default="RS::RenderTop" />
        </parameters>
      </variant>
    </function>
    <function name="moveReferencePoint">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="referencePoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="targetPoint" />
          <parameter const="false" type="Qt::KeyboardModifiers" modifier="" name="modifiers" default="Qt::NoModifier" />
        </parameters>
      </variant>
    </function>
    <function name="castToShape">
      <variant return-type="RShape*" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getShapes">
      <variant return-type="QList&lt;QSharedPointer&lt;RShape&gt;&gt;" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="true" type="RBox" modifier="&amp;" name="queryBox" default="RDEFAULT_RBOX" />
          <parameter const="false" type="bool" modifier="" name="ignoreComplex" default="false" />
          <parameter const="false" type="bool" modifier="" name="segment" default="false" />
          <!--
          <parameter const="false" type="QList&lt;RObject::Id&gt;" modifier="*" name="entityIds" default="NULL" />
          -->
        </parameters>
      </variant>
    </function>
  </class>
  <class name="RXLineEntity" ownership="cpp" sharedpointer="true">
    <super_list>
      <super name="RObject" />
      <super name="REntity" />
    </super_list>
    <property static="true" type="RPropertyTypeId" name="PropertyCustom" />
    <property static="true" type="RPropertyTypeId" name="PropertyHandle" />
    <property static="true" type="RPropertyTypeId" name="PropertyProtected" />
    <property static="true" type="RPropertyTypeId" name="PropertyWorkingSet" />
    <property static="true" type="RPropertyTypeId" name="PropertyType" />
    <property static="true" type="RPropertyTypeId" name="PropertyBlock" />
    <property static="true" type="RPropertyTypeId" name="PropertyLayer" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetype" />
    <property static="true" type="RPropertyTypeId" name="PropertyLinetypeScale" />
    <property static="true" type="RPropertyTypeId" name="PropertyLineweight" />
    <property static="true" type="RPropertyTypeId" name="PropertyColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDisplayedColor" />
    <property static="true" type="RPropertyTypeId" name="PropertyDrawOrder" />
    <property static="true" type="RPropertyTypeId" name="PropertyBasePointX" />
    <property static="true" type="RPropertyTypeId" name="PropertyBasePointY" />
    <property static="true" type="RPropertyTypeId" name="PropertyBasePointZ" />
    <property static="true" type="RPropertyTypeId" name="PropertySecondPointX" />
    <property static="true" type="RPropertyTypeId" name="PropertySecondPointY" />
    <property static="true" type="RPropertyTypeId" name="PropertySecondPointZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyDirectionX" />
    <property static="true" type="RPropertyTypeId" name="PropertyDirectionY" />
    <property static="true" type="RPropertyTypeId" name="PropertyDirectionZ" />
    <property static="true" type="RPropertyTypeId" name="PropertyAngle" />
    <property static="true" type="RPropertyTypeId" name="PropertyFixedAngle" />
    <constructor>
      <variant>
        <parameters>
          <parameter const="false" type="RDocument" modifier="*" name="document" />
          <parameter const="true" type="RXLineData" modifier="&amp;" name="data" />
        </parameters>
      </variant>
    </constructor>
    <function name="init" static="true">
      <variant return-type="void" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getRtti" static="true">
      <variant return-type="RS::EntityType" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getStaticPropertyTypeIds" static="true">
      <variant return-type="QSet&lt;RPropertyTypeId&gt;" access="public">
        <parameters />
      </variant>
    </function>
    <function name="clone">
      <variant return-type="RXLineEntity*" virtual="true" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setProperty">
      <variant return-type="bool" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="" name="propertyTypeId" />
          <parameter const="true" type="QVariant" modifier="&amp;" name="value" />
          <parameter const="false" type="RTransaction" modifier="*" name="transaction" default="NULL" />
        </parameters>
      </variant>
    </function>
    <function name="getProperty">
      <variant return-type="QPair&lt;QVariant,RPropertyAttributes&gt;" virtual="true" access="public">
        <parameters>
          <parameter const="false" type="RPropertyTypeId" modifier="&amp;" name="propertyTypeId" />
          <parameter const="false" type="bool" modifier="" name="humanReadable" default="false" />
          <parameter const="false" type="bool" modifier="" name="noAttributes" default="false" />
          <parameter const="false" type="bool" modifier="" name="showOnRequest" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="exportEntity">
      <variant return-type="void" virtual="true" const="true" access="public">
        <parameters>
          <parameter const="false" type="RExporter" modifier="&amp;" name="e" />
          <parameter const="false" type="bool" modifier="" name="preview" default="false" />
          <parameter const="false" type="bool" modifier="" name="forceSelected" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getData">
      <variant return-type="RXLineData&amp;" virtual="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setShape">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RXLine" modifier="&amp;" name="l" />
        </parameters>
      </variant>
    </function>
    <function name="setBasePoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getBasePoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setSecondPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="p" />
        </parameters>
      </variant>
    </function>
    <function name="getSecondPoint">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setDirectionVectorPoint">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="v" />
        </parameters>
      </variant>
    </function>
    <function name="getDirectionVector">
      <variant return-type="RVector" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getAngle">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="hasFixedAngle">
      <variant return-type="bool" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="setFixedAngle">
      <variant return-type="void" access="public">
        <parameters>
          <parameter const="false" type="bool" modifier="" name="on" />
        </parameters>
      </variant>
    </function>
    <function name="getDirection1">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getDirection2">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="reverse">
      <variant return-type="bool" access="public">
        <parameters />
      </variant>
    </function>
    <function name="getSideOfPoint">
      <variant return-type="RS::Side" const="true" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="point" />
        </parameters>
      </variant>
    </function>
    <function name="getTrimEnd">
      <variant return-type="RS::Ending" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" />
        </parameters>
      </variant>
    </function>
    <function name="trimStartPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="trimEndPoint">
      <variant return-type="bool" access="public">
        <parameters>
          <parameter const="true" type="RVector" modifier="&amp;" name="trimPoint" />
          <parameter const="true" type="RVector" modifier="&amp;" name="clickPoint" default="RVector::invalid" />
          <parameter const="false" type="bool" modifier="" name="extend" default="false" />
        </parameters>
      </variant>
    </function>
    <function name="getLength">
      <variant return-type="double" const="true" access="public">
        <parameters />
      </variant>
    </function>
    <function name="print" />
  </class>
</unit>
